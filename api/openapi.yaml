openapi: 3.0.2
info:
  title: Camunda BPM REST API
  description: OpenApi Spec for Camunda BPM REST API.
  license:
    name: Apache License 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 7.14.0
externalDocs:
  description: Find out more about Camunda Rest API
  url: https://docs.camunda.org/manual/7.14/reference/rest/overview/
servers:
- url: http://{host}:{port}/{contextPath}
  description: The API server for the default process engine
  variables:
    host:
      default: localhost
    port:
      default: "8000"
    contextPath:
      default: engine-rest
- url: http://{host}:{port}/{contextPath}/engine/{engineName}
  description: The API server for a named process engine
  variables:
    host:
      default: localhost
    port:
      default: "8080"
    contextPath:
      default: engine-rest
    engineName:
      default: default
tags:
- name: Condition
- name: Deployment
- name: Engine
- name: Event Subscription
- name: External Task
- name: Historic Activity Instance
- name: Historic Process Instance
- name: Incident
- name: Message
- name: Metrics
- name: Process Definition
- name: Process Instance
- name: Signal
- name: Schema Log
- name: Task
- name: Task Attachment
- name: Task Comment
- name: Task Identity Link
- name: Task Local Variable
- name: Task Variable
- name: Telemetry
- name: User
- name: Version
paths:
  /condition:
    post:
      tags:
      - Condition
      description: "Triggers evaluation of conditions for conditional start event(s).\
        \ \nInternally this maps to the engines condition evaluation builder method\
        \ ConditionEvaluationBuilder#evaluateStartConditions(). \nFor more information\
        \ see the [Conditional Start Events](https://docs.camunda.org/manual/7.14/reference/bpmn20/events/conditional-events/#conditional-start-event)\n\
        section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.14/reference/bpmn20/)."
      operationId: evaluateCondition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationConditionDto'
            examples:
              example-1:
                summary: POST /condition
                description: The content of the Request Body
                value:
                  variables:
                    temperature:
                      value: 24
                      type: Integer
                      valueInfo:
                        transient: true
                    city:
                      value: Parma
                      type: String
                  businessKey: aBusinessKey
                  tenantId: aTenantId
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessInstanceDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response
                  description: The Response content of a status 200
                  value:
                  - links: []
                    id: aProcInstId
                    definitionId: aProcDefId
                    businessKey: aBusinessKey
                    ended: false
                    suspended: false
                    tenantId: aTenantId
                  - links: []
                    id: anotherId
                    definitionId: aProcDefId
                    businessKey: aBusinessKey
                    ended: false
                    suspended: false
                    tenantId: aTenantId
        "400":
          description: If both tenantId and withoutTenantId are supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: If the user is not allowed to start the process instance of
            the process definition, which start condition was evaluated to `true`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
      x-swagger-router-controller: Condition
  /deployment:
    get:
      tags:
      - Deployment
      description: |-
        Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments,
        such as the id or name or a range of the deployment time. The size of the result set can be retrieved by
        using the [Get Deployment count](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query-count/) method.
      operationId: getDeployments
      parameters:
      - name: id
        in: query
        description: Filter by deployment id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Filter by the deployment name. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameLike
        in: query
        description: |-
          Filter by the deployment name that the parameter is a substring of. The parameter can include the
          wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains
          (`%`name`%`).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: source
        in: query
        description: Filter by the deployment source.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutSource
        in: query
        description: Filter by the deployment source whereby source is equal to `null`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: tenantIdIn
        in: query
        description: Filter by a comma-separated list of tenant ids. A deployment
          must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: |-
          Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default
          behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: includeDeploymentsWithoutTenantId
        in: query
        description: |-
          Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may
          only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: after
        in: query
        description: |-
          Restricts to all deployments after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: before
        in: query
        description: |-
          Restricts to all deployments before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/deployment?name=deploymentName`
                  value:
                  - id: someId
                    name: deploymentName
                    source: process application
                    deploymentTime: 2013-04-23T13:42:43.000+0200
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`, or if an invalid operator for variable comparison is used. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Deployment
  /deployment/count:
    get:
      tags:
      - Deployment
      description: |-
        Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the
        [Get Deployments](https://docs.camunda.org/manual/7.14/reference/rest/deployment/get-query/) method.
      operationId: getDeploymentsCount
      parameters:
      - name: id
        in: query
        description: Filter by deployment id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Filter by the deployment name. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameLike
        in: query
        description: |-
          Filter by the deployment name that the parameter is a substring of. The parameter can include the
          wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains
          (`%`name`%`).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: source
        in: query
        description: Filter by the deployment source.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutSource
        in: query
        description: Filter by the deployment source whereby source is equal to `null`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: tenantIdIn
        in: query
        description: Filter by a comma-separated list of tenant ids. A deployment
          must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: |-
          Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default
          behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: includeDeploymentsWithoutTenantId
        in: query
        description: |-
          Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may
          only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: after
        in: query
        description: |-
          Restricts to all deployments after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: before
        in: query
        description: |-
          Restricts to all deployments before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: GET `/deployment/count?name=deploymentName`
                  value:
                    count: 1
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example, if an invalid operator for variable
            comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Deployment
  /deployment/create:
    post:
      tags:
      - Deployment
      description: |-
        Creates a deployment.

        **Security Consideration**

        Deployments can contain custom code in form of scripts or EL expressions to customize process behavior.
        This may be abused for remote execution of arbitrary code.
      operationId: createDeployment
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiFormDeploymentDto'
            examples:
              example-1:
                summary: POST `/deployment/create`
                value:
                - links:
                  - method: GET
                    href: http://localhost:38080/rest-test/deployment/aDeploymentId
                    rel: self
                  id: aDeploymentId
                  name: aName
                  source: process application
                  deploymentTime: 2013-01-23T13:59:43.000+0200
                  deployedProcessDefinitions:
                    aProcDefId:
                      id: aProcDefId
                      key: aKey
                      category: aCategory
                      description: aDescription
                      name: aName
                      version: 42
                      resource: aResourceName
                      deploymentId: aDeploymentId
                      diagram: aResourceName.png
                      suspended: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentWithDefinitionsDto'
        "400":
          description: |-
            Bad Request. In case one of the bpmn resources cannot be parsed.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#parse-exceptions) for
            the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseExceptionDto'
              examples:
                example-1:
                  summary: GET /deployment?name=deploymentName
                  value:
                  - type: ParseException
                    message: 'ENGINE-09005 Could not parse BPMN process. Errors: Exclusive
                      Gateway ''ExclusiveGateway_1'' has outgoing sequence flow ''SequenceFlow_0''
                      without condition which is not the default flow.'
                    details:
                      invoice.bpmn:
                        errors:
                        - message: Exclusive Gateway 'ExclusiveGateway_1' has outgoing
                            sequence flow 'SequenceFlow_0' without condition which
                            is not the default flow.
                          line: 77
                          column: 15
                          mainBpmnElementId: ExclusiveGateway_1
                          bpmnElementIds:
                          - ExclusiveGateway_1
                          - SequenceFlow_0
                        warnings:
                        - message: It is not recommended to use a cancelling boundary
                            timer event with a time cycle.
                          line: 87
                          column: 20
                          mainBpmnElementId: BoundaryEvent_1
                          bpmnElementIds:
                          - BoundaryEvent_1
      x-swagger-router-controller: Deployment
  /deployment/{id}:
    get:
      tags:
      - Deployment
      description: Retrieves a deployment by id, according to the `Deployment` interface
        of the engine.
      operationId: getDeployment
      parameters:
      - name: id
        in: path
        description: The id of the deployment.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/deployments/someDeploymentId`
                  value:
                    id: someDeploymentId
                    name: deploymentName
                    source: process application
                    deploymentTime: 2013-04-23T13:42:43.000+0200
        "404":
          description: |-
            Deployment with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Deployment
    delete:
      tags:
      - Deployment
      description: Deletes a deployment by id.
      operationId: deleteDeployment
      parameters:
      - name: id
        in: path
        description: The id of the deployment to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: cascade
        in: query
        description: |-
          `true`, if all process instances, historic process instances and jobs for this deployment
          should be deleted.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: skipCustomListeners
        in: query
        description: '`true`, if only the built-in ExecutionListeners should be notified
          with the end event.'
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: skipIoMappings
        in: query
        description: '`true`, if all input/output mappings should not be invoked.'
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: Request successful.
        "404":
          description: |-
            A Deployment with the provided id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Deployment
  /deployment/{id}/redeploy:
    post:
      tags:
      - Deployment
      description: |-
        Re-deploys an existing deployment.

        The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or
        `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the
        given deployment are re-deployed.

        **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize
        process behavior. This may be abused for remote execution of arbitrary code. See the section on
        [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/) in
        the user guide for details.
      operationId: redeploy
      parameters:
      - name: id
        in: path
        description: The id of the deployment to re-deploy.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedeploymentDto'
            examples:
              example-1:
                summary: POST `/deployment/anDeploymentId/redeploy`
                value:
                  resourceIds:
                  - aResourceId
                  resourceNames:
                  - aResourceName
                  source: cockpit
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentWithDefinitionsDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    links:
                    - method: GET
                      href: http://localhost:38080/rest-test/deployment/aDeploymentId
                      rel: self
                    id: aDeploymentId
                    name: aName
                    source: cockpit
                    deploymentTime: 2015-10-13T13:59:43.000+0200
                    deployedProcessDefinitions:
                      aProcDefId:
                        id: aProcDefId
                        key: aKey
                        category: aCategory
                        description: aDescription
                        name: aName
                        version: 42
                        resource: aResourceName
                        deploymentId: aDeploymentId
                        diagram: aResourceName.png
                        suspended: true
        "404":
          description: |-
            Deployment or a deployment resource for the given deployment does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Deployment
  /deployment/{id}/resources:
    get:
      tags:
      - Deployment
      description: Retrieves all deployment resources of a given deployment.
      operationId: getDeploymentResources
      parameters:
      - name: id
        in: path
        description: The id of the deployment to retrieve the deployment resources
          for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentResourceDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/deployment/anDeploymentId/resources`
                  value:
                  - id: anResourceId
                    name: anResourceName
                    deploymentId: anDeploymentId
                  - id: anotherResourceId
                    name: anotherResourceName
                    deploymentId: anDeploymentId
        "404":
          description: |-
            Deployment resources for the given deployment do not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Deployment
  /deployment/{id}/resources/{resourceId}:
    get:
      tags:
      - Deployment
      description: Retrieves a deployment resource by resource id for the given deployment.
      operationId: getDeploymentResource
      parameters:
      - name: id
        in: path
        description: The id of the deployment
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: resourceId
        in: path
        description: The id of the deployment resource
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentResourceDto'
              examples:
                example-1:
                  summary: GET `/deployments/someDeploymentId/resources/someResourceId`
                  value:
                    id: someResourceId
                    name: someResourceName
                    deploymentId: someDeploymentId
        "404":
          description: |-
            Deployment Resource with given resource id or deployment id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Deployment
  /deployment/{id}/resources/{resourceId}/data:
    get:
      tags:
      - Deployment
      description: Retrieves the binary content of a deployment resource for the given
        deployment by id.
      operationId: getDeploymentResourceData
      parameters:
      - name: id
        in: path
        description: The id of the deployment.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: resourceId
        in: path
        description: The id of the deployment resource.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful. The media type of the response depends
            on the filename.
          content:
            application/octet-stream:
              schema:
                type: string
                description: For files without any MIME type information, a byte stream
                  is returned.
                format: binary
                x-content-type: application/octet-stream
            '*/*':
              schema:
                type: string
                description: |-
                  Files with MIME type information are returned as the saved type. For example, a
                                              `process.bpmn` resource will have the media type `application/xml`.
                format: binary
        "400":
          description: |-
            Deployment Resource with given resource id or deployment id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Deployment
  /engine:
    get:
      tags:
      - Engine
      description: |-
        Retrieves the names of all process engines available on your platform.
        **Note**: You cannot prepend `/engine/{name}` to this method.
      operationId: getProcessEngineNames
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessEngineDto'
                x-content-type: application/json
              examples:
                example-1:
                  value:
                  - name: default
                  - name: anotherEngineName
      x-swagger-router-controller: Engine
  /event-subscription:
    get:
      tags:
      - Event Subscription
      description: |-
        Queries for event subscriptions that fulfill given parameters.
        The size of the result set can be retrieved by using the
        [Get Event Subscriptions count](https://docs.camunda.org/manual/7.14/reference/rest/event-subscription/get-query-count/) method.
      operationId: getEventSubscriptions
      parameters:
      - name: eventSubscriptionId
        in: query
        description: Only select subscription with the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventName
        in: query
        description: Only select subscriptions for events with the given name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventType
        in: query
        description: |-
          Only select subscriptions for events with the given type.
          Valid values: `message`, `signal`, `compensate` and `conditional`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - message
          - signal
          - compensate
          - conditional
      - name: executionId
        in: query
        description: Only select subscriptions that belong to an execution with the
          given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceId
        in: query
        description: Only select subscriptions that belong to a process instance with
          the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityId
        in: query
        description: Only select subscriptions that belong to an activity with the
          given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: |-
          Filter by a comma-separated list of tenant ids.
          Only select subscriptions that belong to one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: |-
          Only select subscriptions which have no tenant id.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: includeEventSubscriptionsWithoutTenantId
        in: query
        description: |-
          Select event subscriptions which have no tenant id.
          Can be used in combination with tenantIdIn parameter.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - created
          - tenantId
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSubscriptionDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/event-subscription?eventType=message&sortBy=created&sortOrder=desc`
                  value:
                  - id: anId
                    eventType: message
                    eventName: anEventName
                    executionId: anExecutionId
                    processInstanceId: aProcessInstanceId
                    activityId: anActivityId
                    createdDate: 2020-04-20T15:23:12.229+0200
                  - id: anotherId
                    eventType: message
                    eventName: anotherEventName
                    executionId: anotherExecutionId
                    processInstanceId: anotherProcessInstanceId
                    activityId: anotherActivityId
                    createdDate: 2020-04-20T15:20:12.229+0200
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid,
            for example if a `sortOrder` parameter is supplied, but no `sortBy`.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: EventSubscription
  /event-subscription/count:
    get:
      tags:
      - Event Subscription
      description: |-
        Queries for the number of event subscriptions that fulfill given parameters.
        Takes the same parameters as the
        [Get Event Subscriptions](https://docs.camunda.org/manual/7.14/reference/rest/event-subscription/get-query/) method.
      operationId: getEventSubscriptionsCount
      parameters:
      - name: eventSubscriptionId
        in: query
        description: Only select subscription with the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventName
        in: query
        description: Only select subscriptions for events with the given name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventType
        in: query
        description: |-
          Only select subscriptions for events with the given type.
          Valid values: `message`, `signal`, `compensate` and `conditional`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - message
          - signal
          - compensate
          - conditional
      - name: executionId
        in: query
        description: Only select subscriptions that belong to an execution with the
          given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceId
        in: query
        description: Only select subscriptions that belong to a process instance with
          the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityId
        in: query
        description: Only select subscriptions that belong to an activity with the
          given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: |-
          Filter by a comma-separated list of tenant ids.
          Only select subscriptions that belong to one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: |-
          Only select subscriptions which have no tenant id.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: includeEventSubscriptionsWithoutTenantId
        in: query
        description: |-
          Select event subscriptions which have no tenant id.
          Can be used in combination with tenantIdIn parameter.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: GET `/event-subscription/count`
                  value:
                    count: 1
        "400":
          description: |-
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: EventSubscription
  /external-task:
    get:
      tags:
      - External Task
      description: |-
        Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic
        runtime properties of executions. The size of the result set can be retrieved by using the
        [Get External Task Count](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query-count/) method.
      operationId: getExternalTasks
      parameters:
      - name: externalTaskId
        in: query
        description: Filter by an external task's id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalTaskIdIn
        in: query
        description: Filter by the comma-separated list of external task ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: topicName
        in: query
        description: Filter by an external task topic.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: workerId
        in: query
        description: Filter by the id of the worker that the task was most recently
          locked by.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locked
        in: query
        description: |-
          Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
          Value may only be `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: notLocked
        in: query
        description: |-
          Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
          Value may only be `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: withRetriesLeft
        in: query
        description: |-
          Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
          `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: noRetriesLeft
        in: query
        description: |-
          Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
          external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: lockExpirationAfter
        in: query
        description: |-
          Restrict to external tasks that have a lock that expires after a given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: lockExpirationBefore
        in: query
        description: |-
          Restrict to external tasks that have a lock that expires before a given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: activityId
        in: query
        description: Filter by the id of the activity that an external task is created
          for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityIdIn
        in: query
        description: Filter by the comma-separated list of ids of the activities that
          an external task is created for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: executionId
        in: query
        description: Filter by the id of the execution that an external task belongs
          to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceId
        in: query
        description: Filter by the id of the process instance that an external task
          belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceIdIn
        in: query
        description: Filter by a comma-separated list of process instance ids that
          an external task may belong to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Filter by the id of the process definition that an external task
          belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: |-
          Filter by a comma-separated list of tenant ids.
          An external task must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: Only include active tasks. Value may only be `true`, as `false`
          matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: suspended
        in: query
        description: Only include suspended tasks. Value may only be `true`, as `false`
          matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: priorityHigherThanOrEquals
        in: query
        description: |-
          Only include jobs with a priority higher than or equal to the given value.
          Value must be a valid `long` value.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: priorityLowerThanOrEquals
        in: query
        description: |-
          Only include jobs with a priority lower than or equal to the given value.
          Value must be a valid `long` value.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - id
          - lockExpirationTime
          - processInstanceId
          - processDefinitionId
          - processDefinitionKey
          - taskPriority
          - tenantId
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalTaskDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /external-task?topicName=aTopic
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    retries: 3
                    suspended: false
                    workerId: aWorkerId
                    topicName: aTopic
                    priority: 9
                    businessKey: aBusinessKey
                  - activityId: anotherActivityId
                    activityInstanceId: anotherActivityInstanceId
                    errorMessage: anotherErrorMessage
                    executionId: anotherExecutionId
                    id: anotherExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: anotherProcessDefinitionId
                    processDefinitionKey: anotherProcessDefinitionKey
                    processInstanceId: anotherProcessInstanceId
                    retries: 1
                    suspended: false
                    workerId: aWorkerId
                    topicName: aTopic
                    priority: 3
                    businessKey: aBusinessKey
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
    post:
      tags:
      - External Task
      description: |-
        Queries for external tasks that fulfill given parameters in the form of a JSON object.

        This method is slightly more powerful than the
        [Get External Tasks](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query/) method because it allows to
        specify a hierarchical result sorting.
      operationId: queryExternalTasks
      parameters:
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalTaskQueryDto'
            examples:
              example-1:
                summary: POST /external-task
                value:
                  processDefinitionId: aProcessDefinitionId
                  sorting:
                  - sortBy: processDefinitionKey
                    sortOrder: asc
                  - sortBy: lockExpirationTime
                    sortOrder: desc
      responses:
        "200":
          description: Request successful. The Response is a JSON array of external
            task objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalTaskDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    retries: 3
                    suspended: false
                    workerId: aWorkerId
                    topicName: aTopic
                    priority: 9
                    businessKey: aBusinessKey
                  - activityId: anotherActivityId
                    activityInstanceId: anotherActivityInstanceId
                    errorMessage: anotherErrorMessage
                    executionId: anotherExecutionId
                    id: anotherExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: anotherProcessDefinitionKey
                    processInstanceId: anotherProcessInstanceId
                    retries: 1
                    suspended: false
                    workerId: aWorkerId
                    topicName: aTopic
                    priority: 3
                    businessKey: aBusinessKey
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/count:
    get:
      tags:
      - External Task
      description: |-
        Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the
        [Get External Tasks](https://docs.camunda.org/manual/7.14/reference/rest/external-task/get-query/) method.
      operationId: getExternalTasksCount
      parameters:
      - name: externalTaskId
        in: query
        description: Filter by an external task's id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalTaskIdIn
        in: query
        description: Filter by the comma-separated list of external task ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: topicName
        in: query
        description: Filter by an external task topic.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: workerId
        in: query
        description: Filter by the id of the worker that the task was most recently
          locked by.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locked
        in: query
        description: |-
          Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
          Value may only be `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: notLocked
        in: query
        description: |-
          Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
          Value may only be `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: withRetriesLeft
        in: query
        description: |-
          Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
          `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: noRetriesLeft
        in: query
        description: |-
          Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
          external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: lockExpirationAfter
        in: query
        description: |-
          Restrict to external tasks that have a lock that expires after a given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: lockExpirationBefore
        in: query
        description: |-
          Restrict to external tasks that have a lock that expires before a given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
          `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: activityId
        in: query
        description: Filter by the id of the activity that an external task is created
          for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityIdIn
        in: query
        description: Filter by the comma-separated list of ids of the activities that
          an external task is created for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: executionId
        in: query
        description: Filter by the id of the execution that an external task belongs
          to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceId
        in: query
        description: Filter by the id of the process instance that an external task
          belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceIdIn
        in: query
        description: Filter by a comma-separated list of process instance ids that
          an external task may belong to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Filter by the id of the process definition that an external task
          belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: |-
          Filter by a comma-separated list of tenant ids.
          An external task must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: Only include active tasks. Value may only be `true`, as `false`
          matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: suspended
        in: query
        description: Only include suspended tasks. Value may only be `true`, as `false`
          matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: priorityHigherThanOrEquals
        in: query
        description: |-
          Only include jobs with a priority higher than or equal to the given value.
          Value must be a valid `long` value.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: priorityLowerThanOrEquals
        in: query
        description: |-
          Only include jobs with a priority lower than or equal to the given value.
          Value must be a valid `long` value.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: GET /external-task/count?topicName=aTopic
                  value:
                    count: 42
        "400":
          description: |-
            Returned if some of the query parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
    post:
      tags:
      - External Task
      description: |-
        Queries for the number of external tasks that fulfill given parameters. This method takes the same message
        body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/external-task/post-query/) method.
      operationId: queryExternalTasksCount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalTaskQueryDto'
            examples:
              example-1:
                summary: POST /external-task/count
                value:
                  topicName: aTopicName
                  withRetriesLeft: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    count: 1
        "400":
          description: |-
            Returned if some of the query parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/fetchAndLock:
    post:
      tags:
      - External Task
      description: |-
        Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted
        to specific task topics and for each task topic an individual lock time can be provided.
      operationId: fetchAndLock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchExternalTasksDto'
            examples:
              example-1:
                summary: POST /external-task/fetchAndLock (1)
                description: Request with variable filtering
                value:
                  workerId: aWorkerId
                  maxTasks: 2
                  usePriority: true
                  topics:
                  - topicName: createOrder
                    lockDuration: 10000
                    variables:
                    - orderId
              example-2:
                summary: POST /external-task/fetchAndLock (2)
                description: Request with all variables included
                value:
                  workerId: aWorkerId
                  maxTasks: 2
                  usePriority: true
                  topics:
                  - topicName: createOrder
                    lockDuration: 10000
                    processDefinitionId: aProcessDefinitionId
                    tenantIdIn: tenantOne
              example-3:
                summary: POST /external-task/fetchAndLock (3)
                description: Request with includeExtensionProperties
                value:
                  workerId: aWorkerId
                  maxTasks: 1
                  usePriority: true
                  topics:
                  - topicName: createOrder
                    lockDuration: 10000
                    includeExtensionProperties: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LockedExternalTaskDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: POST /external-task/fetchAndLock (1)
                  description: Request with variable filtering
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    retries: 3
                    workerId: aWorkerId
                    priority: 4
                    topicName: createOrder
                    variables:
                      orderId:
                        type: String
                        value: "1234"
                        valueInfo: {}
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anotherErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    retries: 3
                    workerId: aWorkerId
                    priority: 0
                    topicName: createOrder
                    variables:
                      orderId:
                        type: String
                        value: "3456"
                        valueInfo: {}
                example-2:
                  summary: POST /external-task/fetchAndLock (2)
                  description: Request with all variables included
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.00+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    tenantId: tenantOne
                    retries: 3
                    workerId: aWorkerId
                    priority: 4
                    topicName: createOrder
                    businessKey: aBusinessKey
                    variables:
                      orderId:
                        type: String
                        value: "1234"
                        valueInfo: {}
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anotherErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    retries: 3
                    workerId: aWorkerId
                    priority: 0
                    topicName: createOrder
                    businessKey: aBusinessKey
                    variables:
                      orderId:
                        type: String
                        value: "3456"
                        valueInfo: {}
                example-3:
                  summary: POST /external-task/fetchAndLock (3)
                  description: Request with includeExtensionProperties
                  value:
                  - activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    errorDetails: anErrorDetails
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    suspended: false
                    workerId: aWorkerId
                    topicName: createOrder
                    variables: {}
                    priority: 0
                    businessKey: default
                    extensionProperties:
                      property2: value2
                      property1: value1
        "400":
          description: |-
            Bad Request. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/retries:
    put:
      tags:
      - External Task
      description: "Sets the number of retries left to execute external tasks by id\
        \ synchronously. If retries are set to 0, \nan incident is created."
      operationId: setExternalTaskRetries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRetriesForExternalTasksDto'
            examples:
              example-1:
                summary: PUT /external-task/retries
                value:
                  retries: 123
                  externalTaskIds:
                  - anExternalTask
                  - anotherExternalTask
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            In case the number of retries is negative or null, an exception of type `InvalidRequestException` is
            returned. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: "Returned if the task does not exist. This could indicate a\
            \ wrong task id as well as a cancelled task, \ne.g., due to a caught BPMN\
            \ boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/retries-async:
    post:
      tags:
      - External Task
      description: |-
        Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0,
        an incident is created.
      operationId: setExternalTaskRetriesAsyncOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRetriesForExternalTasksDto'
            examples:
              example-1:
                summary: POST /external-task/retries-async
                value:
                  retries: 123
                  externalTaskIds:
                  - anExternalTask
                  - anotherExternalTask
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
        "400":
          description: "If neither externalTaskIds nor externalTaskQuery are present\
            \ or externalTaskIds contains null value or \nthe number of retries is\
            \ negative or null, an exception of type `InvalidRequestException` is\
            \ returned.\nSee the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: "Returned if the task does not exist. This could indicate a\
            \ wrong task id as well as a cancelled task, \ne.g., due to a caught BPMN\
            \ boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/topic-names:
    get:
      tags:
      - External Task
      description: |-
        Queries for distinct topic names of external tasks that fulfill given parameters.
        Query can be restricted to only tasks with retries left, tasks that are locked, or tasks
        that are unlocked. The parameters withLockedTasks and withUnlockedTasks are
        exclusive. Setting them both to true will return an empty list.
        Providing no parameters will return a list of all distinct topic names with external tasks.
      operationId: getTopicNames
      parameters:
      - name: withLockedTasks
        in: query
        description: |-
          Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
          Value may only be `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: withUnlockedTasks
        in: query
        description: |-
          Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
          Value may only be `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: withRetriesLeft
        in: query
        description: |-
          Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
          `true`, as `false` matches any external task.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /external-task/topic-names?withLockedTasks
                  value:
                  - topic-a
                  - topic-b
                  - topic-c
        "400":
          description: Returned if some of the query parameters are invalid.
          content:
            application/json:
              schema:
                x-content-type: application/json
      x-swagger-router-controller: ExternalTask
  /external-task/{id}:
    get:
      tags:
      - External Task
      description: Retrieves an external task by id, corresponding to the `ExternalTask`
        interface in the engine.
      operationId: getExternalTask
      parameters:
      - name: id
        in: path
        description: The id of the external task to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalTaskDto'
              examples:
                example-1:
                  summary: GET /external-task/anExternalTaskId
                  value:
                    activityId: anActivityId
                    activityInstanceId: anActivityInstanceId
                    errorMessage: anErrorMessage
                    executionId: anExecutionId
                    id: anExternalTaskId
                    lockExpirationTime: 2015-10-06T16:34:42.000+0200
                    processDefinitionId: aProcessDefinitionId
                    processDefinitionKey: aProcessDefinitionKey
                    processInstanceId: aProcessInstanceId
                    retries: 3
                    suspended: false
                    workerId: aWorkerId
                    priority: 0
                    topicName: aTopic
                    businessKey: aBusinessKey
        "404":
          description: |-
            External task with the given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/{id}/bpmnError:
    post:
      tags:
      - External Task
      description: |-
        Reports a business error in the context of a running external task by id. The error code must be specified
        to identify the BPMN error handler.
      operationId: handleExternalTaskBpmnError
      parameters:
      - name: id
        in: path
        description: The id of the external task in which context a BPMN error is
          reported.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalTaskBpmnError'
            examples:
              example-1:
                summary: POST /external-task/anId/bpmnError
                value:
                  workerId: aWorker
                  errorCode: bpmn-error
                  errorMessage: anErrorMessage
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if the task's most recent lock was not acquired by the provided worker.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Returned if the corresponding process instance could not be resumed successfully.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/{id}/complete:
    post:
      tags:
      - External Task
      description: Completes an external task by id and updates process variables.
      operationId: completeExternalTaskResource
      parameters:
      - name: id
        in: path
        description: The id of the task to complete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteExternalTaskDto'
            examples:
              example-1:
                summary: POST /external-task/anId/complete
                value:
                  workerId: aWorker
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
                  localVariables:
                    aLocalVariable:
                      value: aStringValue
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if the task's most recent lock was not acquired by the provided worker. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Returned if the corresponding process instance could not be resumed successfully. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/{id}/errorDetails:
    get:
      tags:
      - External Task
      description: Retrieves the error details in the context of a running external
        task by id.
      operationId: getExternalTaskErrorDetails
      parameters:
      - name: id
        in: path
        description: The id of the external task for which the error details should
          be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            text/plain:
              schema:
                type: string
                description: The error details for the external task.
                x-content-type: text/plain
              examples:
                example-1:
                  value: "org.apache.ibatis.jdbc.RuntimeSqlException: org.apache.ibatis.jdbc.RuntimeSqlException:\
                    \ test cause\n                  at org.camunda.bpm.engine.test.api.externaltask.ExternalTaskServiceTest.testHandleFailureWithErrorDetails(ExternalTaskServiceTest.java:1424)\n\
                    \                  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native\
                    \ Method)\n                  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
                    \                  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
                    \                "
        "204":
          description: Request successful. In case the external task has no error
            details.
        "500":
          description: |-
            An external task with the given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/{id}/extendLock:
    post:
      tags:
      - External Task
      description: Extends the timeout of the lock by a given amount of time.
      operationId: extendLock
      parameters:
      - name: id
        in: path
        description: The id of the external task.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendLockOnExternalTaskDto'
            examples:
              example-1:
                summary: POST /external-task/anId/extendLock
                value:
                  workerId: anId
                  newDuration: 100000
      responses:
        "204":
          description: Request successful.
        "400":
          description: "In case the new lock duration is negative or the external\
            \ task is not locked by the given worker or not \nlocked at all, an exception\
            \ of type `InvalidRequestException` is returned. See the\n[Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/{id}/failure:
    post:
      tags:
      - External Task
      description: |-
        Reports a failure to execute an external task by id. A number of retries and a timeout until the task can
        be retried can be specified. If retries are set to 0, an incident for this task is created.
      operationId: handleFailure
      parameters:
      - name: id
        in: path
        description: The id of the external task to report a failure for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalTaskFailureDto'
            examples:
              example-1:
                summary: POST /external-task/anId/failure
                value:
                  workerId: aWorker
                  errorMessage: Does not compute
                  retries: 3
                  retryTimeout: 60000
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if the task's most recent lock was not acquired by the provided worker. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Returned if the corresponding process instance could not be resumed successfully. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/{id}/priority:
    put:
      tags:
      - External Task
      description: Sets the priority of an existing external task by id. The default
        value of a priority is 0.
      operationId: setExternalTaskResourcePriority
      parameters:
      - name: id
        in: path
        description: The id of the external task to set the priority for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriorityDto'
            examples:
              example-1:
                summary: PUT /external-task/anId/priority
                value:
                  priority: 5
      responses:
        "204":
          description: Request successful.
        "404":
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/{id}/retries:
    put:
      tags:
      - External Task
      description: "Sets the number of retries left to execute an external task by\
        \ id. If retries are set to 0, an \nincident is created."
      operationId: setExternalTaskResourceRetries
      parameters:
      - name: id
        in: path
        description: The id of the external task to set the number of retries for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetriesDto'
            examples:
              example-1:
                summary: PUT /external-task/anId/retries
                value:
                  retries: 123
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            In case the number of retries is negative or null, an exception of type `InvalidRequestException`
            is returned. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /external-task/{id}/unlock:
    post:
      tags:
      - External Task
      description: Unlocks an external task by id. Clears the task's lock expiration
        time and worker id.
      operationId: unlock
      parameters:
      - name: id
        in: path
        description: The id of the external task to unlock.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "404":
          description: |-
            Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
            e.g., due to a caught BPMN boundary event. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ExternalTask
  /history/activity-instance:
    get:
      tags:
      - Historic Activity Instance
      summary: Get List
      description: |-
        Queries for historic activity instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the
        [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
      operationId: getHistoricActivityInstances
      parameters:
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - activityInstanceId
          - instanceId
          - executionId
          - activityId
          - activityName
          - activityType
          - startTime
          - endTime
          - duration
          - definitionId
          - occurrence
          - tenantId
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: activityInstanceId
        in: query
        description: Filter by activity instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceId
        in: query
        description: Filter by process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Filter by process definition id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: executionId
        in: query
        description: Filter by the id of the execution that executed the activity
          instance.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityId
        in: query
        description: Filter by the activity id (according to BPMN 2.0 XML).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityName
        in: query
        description: Filter by the activity name (according to BPMN 2.0 XML).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityType
        in: query
        description: Filter by activity type.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: taskAssignee
        in: query
        description: Only include activity instances that are user tasks and assigned
          to a given user.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: finished
        in: query
        description: |-
          Only include finished activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: unfinished
        in: query
        description: |-
          Only include unfinished activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: canceled
        in: query
        description: |-
          Only include canceled activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: completeScope
        in: query
        description: |-
          Only include activity instances which completed a scope.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: startedBefore
        in: query
        description: |-
          Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: startedAfter
        in: query
        description: |-
          Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: finishedBefore
        in: query
        description: |-
          Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: finishedAfter
        in: query
        description: |-
          Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: tenantIdIn
        in: query
        description: Filter by a comma-separated list of ids. An activity instance
          must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: Only include historic activity instances that belong to no tenant.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoricActivityInstanceDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for GET `/history/activity-instance?activityType=userTask&taskAssignee=peter`
                  value:
                  - activityId: anActivity
                    activityName: anActivityName
                    activityType: userTask
                    assignee: peter
                    calledProcessInstanceId: aHistoricCalledProcessInstanceId
                    canceled: true
                    completeScope: false
                    durationInMillis: 2000
                    endTime: 2013-04-23T18:42:43.000+0200
                    executionId: anExecutionId
                    id: aHistoricActivityInstanceId
                    parentActivityInstanceId: aHistoricParentActivityInstanceId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    startTime: 2013-04-23T11:20:43.000+0200
                    taskId: aTaskId
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricActivityInstance
    post:
      tags:
      - Historic Activity Instance
      summary: Get List (POST)
      description: |-
        Queries for historic activity instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the
        [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
      operationId: queryHistoricActivityInstances
      parameters:
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoricActivityInstanceQueryDto'
            examples:
              example-1:
                summary: POST `/history/activity-instance`
                value:
                  activityType: userTask
                  taskAssignee: peter
                  sorting:
                  - sortBy: activityId
                    sortOrder: asc
                  - sortBy: executionId
                    sortOrder: desc
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoricActivityInstanceDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                  - activityId: anActivity
                    activityName: anActivityName
                    activityType: userTask
                    assignee: peter
                    calledProcessInstanceId: aHistoricCalledProcessInstanceId
                    canceled: true
                    completeScope: false
                    durationInMillis: 2000
                    endTime: 2013-04-23T18:42:43.000+0200
                    executionId: anExecutionId
                    id: aHistoricActivityInstanceId
                    parentActivityInstanceId: aHistoricParentActivityInstanceId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    startTime: 2013-04-23T11:20:43.000+0200
                    taskId: aTaskId
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricActivityInstance
  /history/activity-instance/count:
    get:
      tags:
      - Historic Activity Instance
      summary: Get List Count
      description: |-
        Queries for the number of historic activity instances that fulfill the given parameters.
        Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
      operationId: getHistoricActivityInstancesCount
      parameters:
      - name: activityInstanceId
        in: query
        description: Filter by activity instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceId
        in: query
        description: Filter by process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Filter by process definition id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: executionId
        in: query
        description: Filter by the id of the execution that executed the activity
          instance.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityId
        in: query
        description: Filter by the activity id (according to BPMN 2.0 XML).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityName
        in: query
        description: Filter by the activity name (according to BPMN 2.0 XML).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityType
        in: query
        description: Filter by activity type.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: taskAssignee
        in: query
        description: Only include activity instances that are user tasks and assigned
          to a given user.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: finished
        in: query
        description: |-
          Only include finished activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: unfinished
        in: query
        description: |-
          Only include unfinished activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: canceled
        in: query
        description: |-
          Only include canceled activity instances.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: completeScope
        in: query
        description: |-
          Only include activity instances which completed a scope.
          Value may only be `true`, as `false` behaves the same as when the property is not set.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: startedBefore
        in: query
        description: |-
          Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: startedAfter
        in: query
        description: |-
          Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: finishedBefore
        in: query
        description: |-
          Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: finishedAfter
        in: query
        description: |-
          Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
          the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: tenantIdIn
        in: query
        description: Filter by a comma-separated list of ids. An activity instance
          must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: Only include historic activity instances that belong to no tenant.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for GET `/history/activity-instance/count?activityType=userTask`
                  value:
                    count: 1
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricActivityInstance
    post:
      tags:
      - Historic Activity Instance
      summary: Get List Count (POST)
      description: Queries for the number of historic activity instances that fulfill
        the given parameters.
      operationId: queryHistoricActivityInstancesCount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoricActivityInstanceQueryDto'
            examples:
              example-1:
                summary: POST `/history/activity-instance/count`
                value:
                  activityType: userTask
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    count: 1
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricActivityInstance
  /history/activity-instance/{id}:
    get:
      tags:
      - Historic Activity Instance
      summary: Get
      description: Retrieves a historic activity instance by id, according to the
        `HistoricActivityInstance` interface in the engine.
      operationId: getHistoricActivityInstance
      parameters:
      - name: id
        in: path
        description: The id of the historic activity instance to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricActivityInstanceDto'
              examples:
                example-1:
                  summary: GET `/history/activity-instance/aActivityInstId`
                  value:
                    id: aActivityInstId
                    activityId: anActivity
                    activityName: anActivityName
                    activityType: userTask
                    assignee: peter
                    calledProcessInstanceId: aHistoricCalledProcessInstanceId
                    canceled: true
                    completeScope: false
                    durationInMillis: 2000
                    endTime: 2013-04-23T18:42:43.000+0200
                    executionId: anExecutionId
                    parentActivityInstanceId: aHistoricParentActivityInstanceId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    startTime: 2013-04-23T11:20:43.000+0200
                    taskId: aTaskId
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
        "404":
          description: |-
            Not Found
            Historic activity instance with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricActivityInstance
  /history/process-instance:
    get:
      tags:
      - Historic Process Instance
      summary: Get List
      description: |-
        Queries for historic process instances that fulfill the given parameters.
        The size of the result set can be retrieved by using the
        [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query-count/) method.
      operationId: getHistoricProcessInstances
      parameters:
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - instanceId
          - definitionId
          - definitionKey
          - definitionName
          - definitionVersion
          - businessKey
          - startTime
          - endTime
          - duration
          - tenantId
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: processInstanceId
        in: query
        description: Filter by process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceIds
        in: query
        description: Filter by process instance ids. Filter by a comma-separated list
          of `Strings`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Filter by the process definition the instances run on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKey
        in: query
        description: Filter by the key of the process definition the instances run
          on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: Filter by a list of process definition keys. A process instance
          must have one of the given process definition keys. Filter by a comma-separated
          list of `Strings`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionName
        in: query
        description: Filter by the name of the process definition the instances run
          on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionNameLike
        in: query
        description: Filter by process definition names that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyNotIn
        in: query
        description: Exclude instances that belong to a set of process definitions.
          Filter by a comma-separated list of `Strings`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKey
        in: query
        description: Filter by process instance business key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyLike
        in: query
        description: Filter by process instance business key that the parameter is
          a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rootProcessInstances
        in: query
        description: Restrict the query to all process instances that are top level
          process instances.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: finished
        in: query
        description: Only include finished process instances. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: unfinished
        in: query
        description: Only include unfinished process instances. Value may only be
          `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: withIncidents
        in: query
        description: Only include process instances which have an incident. Value
          may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: withRootIncidents
        in: query
        description: Only include process instances which have a root incident. Value
          may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidentType
        in: query
        description: Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentStatus
        in: query
        description: Only include process instances which have an incident in status
          either open or resolved. To get all process instances, use the query parameter
          withIncidents.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - open
          - resolved
      - name: incidentMessage
        in: query
        description: Filter by the incident message. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessageLike
        in: query
        description: Filter by the incident message that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startedBefore
        in: query
        description: |-
          Restrict to instances that were started before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: startedAfter
        in: query
        description: |-
          Restrict to instances that were started after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: finishedBefore
        in: query
        description: |-
          Restrict to instances that were finished before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: finishedAfter
        in: query
        description: |-
          Restrict to instances that were finished after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: executedActivityAfter
        in: query
        description: |-
          Restrict to instances that executed an activity after the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: executedActivityBefore
        in: query
        description: |-
          Restrict to instances that executed an activity before the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: executedJobAfter
        in: query
        description: |-
          Restrict to instances that executed an job after the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: executedJobBefore
        in: query
        description: |-
          Restrict to instances that executed an job before the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: startedBy
        in: query
        description: Only include process instances that were started by the given
          user.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superProcessInstanceId
        in: query
        description: Restrict query to all process instances that are sub process
          instances of the given process instance. Takes a process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subProcessInstanceId
        in: query
        description: Restrict query to one process instance that has a sub process
          instance with the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superCaseInstanceId
        in: query
        description: Restrict query to all process instances that are sub process
          instances of the given case instance. Takes a case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subCaseInstanceId
        in: query
        description: Restrict query to one process instance that has a sub case instance
          with the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceId
        in: query
        description: Restrict query to all process instances that are sub process
          instances of the given case instance. Takes a case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: Filter by a list of tenant ids. A process instance must have
          one of the given tenant ids. Filter by a comma-separated list of `Strings`
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: Only include historic process instances which belong to no tenant.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: executedActivityIdIn
        in: query
        description: Restrict to instances that executed an activity with one of given
          ids. Filter by a comma-separated list of `Strings`
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activeActivityIdIn
        in: query
        description: Restrict to instances that have an active activity with one of
          given ids. Filter by a comma-separated list of `Strings`
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: Restrict to instances that are active.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: suspended
        in: query
        description: Restrict to instances that are suspended.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: completed
        in: query
        description: Restrict to instances that are completed.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: externallyTerminated
        in: query
        description: Restrict to instances that are externallyTerminated.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: internallyTerminated
        in: query
        description: Restrict to instances that are internallyTerminated.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: variables
        in: query
        description: |
          Only include process instances that have/had variables with certain values.
          Variable filtering expressions are comma-separated and are structured as follows:
          A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.

          **Note:** Values are always treated as String objects on server side.

          Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.

          Key and value may not contain underscore or comma characters.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variableNamesIgnoreCase
        in: query
        description: Match all variable names provided in variables case-insensitively.
          If set to `true` variableName and variablename are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: variableValuesIgnoreCase
        in: query
        description: Match all variable values provided in variables case-insensitively.
          If set to `true` variableValue and variablevalue are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoricProcessInstanceDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for GET `/history/process-instance?finishedAfter=2013-01-01T00:00:00.000%2b0200&finishedBefore=2013-04-01T23:59:59.000%2b0200&executedActivityAfter=2013-03-23T13:42:44.000%2b0200`
                  value:
                  - id: 7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionId: invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionKey: invoice
                    processDefinitionName: Invoice Receipt
                    processDefinitionVersion: 1
                    startTime: 2017-02-10T14:33:19.000+0200
                    startActivityId: StartEvent_1
                    rootProcessInstanceId: f8259e5d-ab9d-11e8-8449-e4a7a094a9d6
                    state: ACTIVE
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
    post:
      tags:
      - Historic Process Instance
      summary: Get List (POST)
      description: |-
        Queries for historic process instances that fulfill the given parameters.
        This method is slightly more powerful than the
        [Get Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/)
        because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.
      operationId: queryHistoricProcessInstances
      parameters:
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
            examples:
              example-1:
                summary: POST `/history/process-instance`
                value:
                  finishedAfter: 2013-01-01T00:00:00.000+0200
                  finishedBefore: 2013-04-01T23:59:59.000+0200
                  executedActivityAfter: 2013-03-23T13:42:44.000+0200
                  variables:
                  - name: myVariable
                    operator: eq
                    value: camunda
                  - name: mySecondVariable
                    operator: neq
                    value: 124
                  sorting:
                  - sortBy: businessKey
                    sortOrder: asc
                  - sortBy: startTime
                    sortOrder: desc
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoricProcessInstanceDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for POST `/history/process-instance`
                  value:
                  - id: 7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionId: invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionKey: invoice
                    processDefinitionName: Invoice Receipt
                    processDefinitionVersion: 1
                    startTime: 2017-02-10T14:33:19.000+0200
                    startActivityId: StartEvent_1
                    rootProcessInstanceId: f8259e5d-ab9d-11e8-8449-e4a7a094a9d6
                    state: ACTIVE
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
  /history/process-instance/count:
    get:
      tags:
      - Historic Process Instance
      summary: Get List Count
      description: |-
        Queries for the number of historic process instances that fulfill the given parameters.
        Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method.
      operationId: getHistoricProcessInstancesCount
      parameters:
      - name: processInstanceId
        in: query
        description: Filter by process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceIds
        in: query
        description: Filter by process instance ids. Filter by a comma-separated list
          of `Strings`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Filter by the process definition the instances run on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKey
        in: query
        description: Filter by the key of the process definition the instances run
          on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: Filter by a list of process definition keys. A process instance
          must have one of the given process definition keys. Filter by a comma-separated
          list of `Strings`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionName
        in: query
        description: Filter by the name of the process definition the instances run
          on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionNameLike
        in: query
        description: Filter by process definition names that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyNotIn
        in: query
        description: Exclude instances that belong to a set of process definitions.
          Filter by a comma-separated list of `Strings`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKey
        in: query
        description: Filter by process instance business key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyLike
        in: query
        description: Filter by process instance business key that the parameter is
          a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rootProcessInstances
        in: query
        description: Restrict the query to all process instances that are top level
          process instances.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: finished
        in: query
        description: Only include finished process instances. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: unfinished
        in: query
        description: Only include unfinished process instances. Value may only be
          `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: withIncidents
        in: query
        description: Only include process instances which have an incident. Value
          may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: withRootIncidents
        in: query
        description: Only include process instances which have a root incident. Value
          may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidentType
        in: query
        description: Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentStatus
        in: query
        description: Only include process instances which have an incident in status
          either open or resolved. To get all process instances, use the query parameter
          withIncidents.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - open
          - resolved
      - name: incidentMessage
        in: query
        description: Filter by the incident message. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessageLike
        in: query
        description: Filter by the incident message that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startedBefore
        in: query
        description: |-
          Restrict to instances that were started before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: startedAfter
        in: query
        description: |-
          Restrict to instances that were started after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: finishedBefore
        in: query
        description: |-
          Restrict to instances that were finished before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: finishedAfter
        in: query
        description: |-
          Restrict to instances that were finished after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: executedActivityAfter
        in: query
        description: |-
          Restrict to instances that executed an activity after the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: executedActivityBefore
        in: query
        description: |-
          Restrict to instances that executed an activity before the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: executedJobAfter
        in: query
        description: |-
          Restrict to instances that executed an job after the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: executedJobBefore
        in: query
        description: |-
          Restrict to instances that executed an job before the given date (inclusive).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: startedBy
        in: query
        description: Only include process instances that were started by the given
          user.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superProcessInstanceId
        in: query
        description: Restrict query to all process instances that are sub process
          instances of the given process instance. Takes a process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subProcessInstanceId
        in: query
        description: Restrict query to one process instance that has a sub process
          instance with the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superCaseInstanceId
        in: query
        description: Restrict query to all process instances that are sub process
          instances of the given case instance. Takes a case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subCaseInstanceId
        in: query
        description: Restrict query to one process instance that has a sub case instance
          with the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceId
        in: query
        description: Restrict query to all process instances that are sub process
          instances of the given case instance. Takes a case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: Filter by a list of tenant ids. A process instance must have
          one of the given tenant ids. Filter by a comma-separated list of `Strings`
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: Only include historic process instances which belong to no tenant.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: executedActivityIdIn
        in: query
        description: Restrict to instances that executed an activity with one of given
          ids. Filter by a comma-separated list of `Strings`
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activeActivityIdIn
        in: query
        description: Restrict to instances that have an active activity with one of
          given ids. Filter by a comma-separated list of `Strings`
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: Restrict to instances that are active.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: suspended
        in: query
        description: Restrict to instances that are suspended.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: completed
        in: query
        description: Restrict to instances that are completed.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: externallyTerminated
        in: query
        description: Restrict to instances that are externallyTerminated.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: internallyTerminated
        in: query
        description: Restrict to instances that are internallyTerminated.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: variables
        in: query
        description: |
          Only include process instances that have/had variables with certain values.
          Variable filtering expressions are comma-separated and are structured as follows:
          A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.

          **Note:** Values are always treated as String objects on server side.

          Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.

          Key and value may not contain underscore or comma characters.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variableNamesIgnoreCase
        in: query
        description: Match all variable names provided in variables case-insensitively.
          If set to `true` variableName and variablename are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: variableValuesIgnoreCase
        in: query
        description: Match all variable values provided in variables case-insensitively.
          If set to `true` variableValue and variablevalue are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for GET `/history/process-instance/count?variables=myVariable_eq_camunda`
                  value:
                    count: 1
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
    post:
      tags:
      - Historic Process Instance
      summary: Get List Count (POST)
      description: |-
        Queries for the number of historic process instances that fulfill the given parameters.
        This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/get-process-instance-query/) method and
        therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.14/reference/rest/history/process-instance/post-process-instance-query-count/) method.
      operationId: queryHistoricProcessInstancesCount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
            examples:
              example-1:
                summary: POST `/history/process-instance/count`
                value:
                  finishedAfter: 2013-01-01T00:00:00.000+0200
                  finishedBefore: 2013-04-01T23:59:59.000+0200
                  executedActivityAfter: 2013-03-23T13:42:44.000+0200
                  variables:
                  - name: myVariable
                    operator: eq
                    value: camunda
                  - name: mySecondVariable
                    operator: neq
                    value: 124
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    count: 1
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
  /history/process-instance/delete:
    post:
      tags:
      - Historic Process Instance
      summary: Delete Async (POST)
      description: |-
        Delete multiple historic process instances asynchronously (batch).
        At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
        If both are provided then all instances matching query criterion and instances from the list will be deleted.
      operationId: deleteHistoricProcessInstancesAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteHistoricProcessInstancesDto'
            examples:
              example-1:
                summary: POST `/history/process-instance/delete`
                value:
                  deleteReason: aReason
                  historicProcessInstanceIds:
                  - aProcess
                  - secondProcess
                  historicProcessInstanceQuery:
                    startedAfter: 2016-10-11T11:44:13.000+0200
                    finishedBefore: 2016-10-13T11:44:17.000+0200
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for POST `/history/process-instance/delete`
                  value:
                    id: 120b568d-724a-11e9-98b7-be5e0f7575b7
                    type: process-set-removal-time
                    totalJobs: 12
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: 120b5690-724a-11e9-98b7-be5e0f7575b7
                    monitorJobDefinitionId: 120b568f-724a-11e9-98b7-be5e0f7575b7
                    batchJobDefinitionId: 120b568e-724a-11e9-98b7-be5e0f7575b7
                    tenantId: accounting
                    suspended: false
        "400":
          description: |-
            Returned if some of the query parameters are invalid, i.e. neither historicProcessInstanceIds,
            nor historicProcessInstanceQuery is present. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
  /history/process-instance/report:
    get:
      tags:
      - Historic Process Instance
      summary: Get Duration Report
      description: |-
        Retrieves a report about the duration of completed process instances, grouped by a period.
        These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.

        **Note:** This only includes historic data.
      operationId: getHistoricProcessInstanceDurationReport
      parameters:
      - name: reportType
        in: query
        description: |-
          **Mandatory.** Specifies the type of the report to retrieve.
          To retrieve a report about the duration of process instances, the value must be set to `duration`.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: periodUnit
        in: query
        description: '**Mandatory.** Specifies the granularity of the report. Valid
          values are `month` and `quarter`.'
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - month
          - quarter
      - name: processDefinitionIdIn
        in: query
        description: Filter by process definition ids. Must be a comma-separated list
          of process definition ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: Filter by process definition keys. Must be a comma-separated
          list of process definition keys.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startedBefore
        in: query
        description: |-
          Restrict to instances that were started before the given date.
          By [default](), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: startedAfter
        in: query
        description: |-
          Restrict to instances that were started after the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      responses:
        "200":
          description: Request successful. In case of an expected text/csv response
            to retrieve the result as a csv file.
          content:
            text/csv:
              schema:
                x-content-type: text/csv
        "400":
          description: |-
            Returned if some of the query parameters are invalid or mandatory parameters are not supplied.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            If the authenticated user is unauthorized to read the history.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
  /history/process-instance/set-removal-time:
    post:
      tags:
      - Historic Process Instance
      summary: Set Removal Time Async (POST)
      description: |-
        Sets the removal time to multiple historic process instances asynchronously (batch).

        At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
        If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
      operationId: setRemovalTimeAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRemovalTimeToHistoricProcessInstancesDto'
            examples:
              example-1:
                summary: POST `/history/process-instance/set-removal-time`
                value:
                  absoluteRemovalTime: 2019-05-05T11:56:24.725+0200
                  hierarchical: true
                  historicProcessInstanceQuery:
                    unfinished: true
                  historicProcessInstanceIds:
                  - b4d2ad98-7240-11e9-98b7-be5e0f7575b7
                  - b4d2ad94-7240-11e9-98b7-be5e0f7575b7
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for POST `/history/process-instance/set-removal-time`
                  value:
                    id: 120b568d-724a-11e9-98b7-be5e0f7575b7
                    type: process-set-removal-time
                    totalJobs: 12
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: 120b5690-724a-11e9-98b7-be5e0f7575b7
                    monitorJobDefinitionId: 120b568f-724a-11e9-98b7-be5e0f7575b7
                    batchJobDefinitionId: 120b568e-724a-11e9-98b7-be5e0f7575b7
                    tenantId: accounting
                    suspended: false
        "400":
          description: |-
            Bad Request
            Request was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid,
            e. g. if neither `historicProcessInstances` nor `historicProcessInstanceQuery` is present or if no mode is specified.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
  /history/process-instance/{id}:
    get:
      tags:
      - Historic Process Instance
      summary: Get
      description: Retrieves a historic process instance by id, according to the `HistoricProcessInstance`
        interface in the engine.
      operationId: getHistoricProcessInstance
      parameters:
      - name: id
        in: path
        description: The id of the historic process instance to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricProcessInstanceDto'
              examples:
                example-1:
                  summary: GET `/history/process-instance/7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e`
                  value:
                    id: 7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionId: invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e
                    processDefinitionKey: invoice
                    processDefinitionName: Invoice Receipt
                    processDefinitionVersion: 1
                    startTime: 2017-02-10T14:33:19.000+0200
                    startActivityId: StartEvent_1
                    rootProcessInstanceId: f8259e5d-ab9d-11e8-8449-e4a7a094a9d6
                    state: ACTIVE
        "404":
          description: |-
            Not Found
            Historic process instance with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
    delete:
      tags:
      - Historic Process Instance
      summary: Delete
      description: Deletes a process instance from the history by id.
      operationId: deleteHistoricProcessInstance
      parameters:
      - name: id
        in: path
        description: The id of the historic process instance to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: failIfNotExists
        in: query
        description: If set to `false`, the request will still be successful if the
          process id is not found.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "204":
          description: Request successful.
        "404":
          description: |-
            Not found
            Historic process instance with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
  /history/process-instance/{id}/variable-instances:
    delete:
      tags:
      - Historic Process Instance
      summary: Delete Variable Instances
      description: Deletes all variables of a process instance from the history by
        id.
      operationId: deleteHistoricVariableInstancesOfHistoricProcessInstance
      parameters:
      - name: id
        in: path
        description: The id of the process instance for which all historic variables
          are to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "404":
          description: |-
            Not found
            Historic process instance with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#parse-exceptions) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: HistoricProcessInstance
  /incident:
    get:
      tags:
      - Incident
      summary: Get List
      description: |-
        Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using
        the [Get Incident Count](https://docs.camunda.org/manual/7.14/reference/rest/incident/get-query-count/) method.
      operationId: getIncidents
      parameters:
      - name: incidentId
        in: query
        description: Restricts to incidents that have the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentType
        in: query
        description: |-
          Restricts to incidents that belong to the given incident type. See the
          [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident
          types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessage
        in: query
        description: Restricts to incidents that have the given incident message.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessageLike
        in: query
        description: |-
          Restricts to incidents that incidents message is a substring of the given value. The string can include
          the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or
          contains (`%string%`).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Restricts to incidents that belong to a process definition with
          the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: |-
          Restricts to incidents that belong to a process definition with the given keys. Must be a
          comma-separated list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceId
        in: query
        description: Restricts to incidents that belong to a process instance with
          the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: executionId
        in: query
        description: Restricts to incidents that belong to an execution with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentTimestampBefore
        in: query
        description: |-
          Restricts to incidents that have an incidentTimestamp date before the given date. By default, the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: incidentTimestampAfter
        in: query
        description: |-
          Restricts to incidents that have an incidentTimestamp date after the given date. By default*, the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: activityId
        in: query
        description: Restricts to incidents that belong to an activity with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: failedActivityId
        in: query
        description: Restricts to incidents that were created due to the failure of
          an activity with the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: causeIncidentId
        in: query
        description: Restricts to incidents that have the given incident id as cause
          incident.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rootCauseIncidentId
        in: query
        description: Restricts to incidents that have the given incident id as root
          cause incident.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: configuration
        in: query
        description: Restricts to incidents that have the given parameter set as configuration.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: Restricts to incidents that have one of the given comma-separated
          tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: jobDefinitionIdIn
        in: query
        description: Restricts to incidents that have one of the given comma-separated
          job definition ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - incidentId
          - incidentMessage
          - incidentTimestamp
          - incidentType
          - executionId
          - activityId
          - processInstanceId
          - processDefinitionId
          - causeIncidentId
          - rootCauseIncidentId
          - configuration
          - tenantId
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncidentDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/incident/anIncidentId`
                  value:
                  - id: anIncidentId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    executionId: anExecutionId
                    incidentTimestamp: 2014-03-01T08:00:00.000+0200
                    incidentType: failedJob
                    activityId: serviceTask
                    failedActivityId: serviceTask
                    causeIncidentId: aCauseIncidentId
                    rootCauseIncidentId: aRootCauseIncidentId
                    configuration: aConfiguration
                    incidentMessage: anIncidentMessage
                    jobDefinitionId: aJobDefinitionId
                  - id: anIncidentId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    executionId: anotherExecutionId
                    incidentTimestamp: 2014-03-01T09:00:00.000+0200
                    incidentType: customIncidentType
                    activityId: userTask
                    failedActivityId: userTask
                    causeIncidentId: anotherCauseIncidentId
                    rootCauseIncidentId: anotherRootCauseIncidentId
                    configuration: anotherConfiguration
                    incidentMessage: anotherIncidentMessage
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error
            response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Incident
  /incident/count:
    get:
      tags:
      - Incident
      summary: Get List Count
      description: |-
        Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the
        [Get Incidents](https://docs.camunda.org/manual/7.14/reference/rest/incident/get-query/) method.
      operationId: getIncidentsCount
      parameters:
      - name: incidentId
        in: query
        description: Restricts to incidents that have the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentType
        in: query
        description: |-
          Restricts to incidents that belong to the given incident type. See the
          [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident
          types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessage
        in: query
        description: Restricts to incidents that have the given incident message.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessageLike
        in: query
        description: |-
          Restricts to incidents that incidents message is a substring of the given value. The string can include
          the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or
          contains (`%string%`).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Restricts to incidents that belong to a process definition with
          the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: |-
          Restricts to incidents that belong to a process definition with the given keys. Must be a
          comma-separated list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceId
        in: query
        description: Restricts to incidents that belong to a process instance with
          the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: executionId
        in: query
        description: Restricts to incidents that belong to an execution with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentTimestampBefore
        in: query
        description: |-
          Restricts to incidents that have an incidentTimestamp date before the given date. By default, the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: incidentTimestampAfter
        in: query
        description: |-
          Restricts to incidents that have an incidentTimestamp date after the given date. By default*, the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: activityId
        in: query
        description: Restricts to incidents that belong to an activity with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: failedActivityId
        in: query
        description: Restricts to incidents that were created due to the failure of
          an activity with the given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: causeIncidentId
        in: query
        description: Restricts to incidents that have the given incident id as cause
          incident.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rootCauseIncidentId
        in: query
        description: Restricts to incidents that have the given incident id as root
          cause incident.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: configuration
        in: query
        description: Restricts to incidents that have the given parameter set as configuration.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: Restricts to incidents that have one of the given comma-separated
          tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: jobDefinitionIdIn
        in: query
        description: Restricts to incidents that have one of the given comma-separated
          job definition ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountResultDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/incident/count?processInstanceId=aProcInstId`
                  value:
                  - count: 2
        "400":
          description: |-
            Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error
            response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Incident
  /incident/{id}:
    get:
      tags:
      - Incident
      summary: Get Incident
      description: Retrieves an incident by ID.
      operationId: getIncident
      parameters:
      - name: id
        in: path
        description: The id of the incident to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentDto'
              examples:
                example-1:
                  summary: GET `/incident/anIncidentId`
                  value:
                    id: anIncidentId
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    executionId: anExecutionId
                    incidentTimestamp: 2014-03-01T08:00:00.000+0200
                    incidentType: failedJob
                    activityId: serviceTask
                    failedActivityId: serviceTask
                    causeIncidentId: aCauseIncidentId
                    rootCauseIncidentId: aRootCauseIncidentId
                    configuration: aConfiguration
                    incidentMessage: anIncidentMessage
                    jobDefinitionId: aJobDefinitionId
        "404":
          description: Returned if an incident with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Incident
    delete:
      tags:
      - Incident
      summary: Resolve Incident
      description: Resolves an incident with given id.
      operationId: resolveIncident
      parameters:
      - name: id
        in: path
        description: The id of the incident to be resolved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if an incident is not related to any execution or an incident is of type `failedJob` or
            `failedExternalTask`. To resolve such an incident, please refer to the
            [Incident Types](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: Returned if an incident with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Incident
  /message:
    post:
      tags:
      - Message
      description: "Correlates a message to the process engine to either trigger a\
        \ message start event or an intermediate message \ncatching event. Internally\
        \ this maps to the engine's message correlation builder methods\n`MessageCorrelationBuilder#correlateWithResult()`\
        \ and `MessageCorrelationBuilder#correlateAllWithResult()`.\nFor more information\
        \ about the correlation behavior, see the [Message Events](https://docs.camunda.org/manual/7.14/bpmn20/events/message-events/)\n\
        section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.14/reference/bpmn20/)."
      operationId: deliverMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorrelationMessageDto'
            examples:
              example-1:
                summary: POST /condition
                description: Correlate without result
                value:
                  messageName: aMessage
                  businessKey: aBusinessKey
                  correlationKeys:
                    aVariable:
                      value: aValue
                      type: String
                  processVariables:
                    aVariable:
                      value: aNewValue
                      type: String
                      valueInfo:
                        transient: true
                    anotherVariable:
                      value: true
                      type: Boolean
              example-2:
                summary: POST /condition
                description: Correlate with result
                value:
                  messageName: aMessage
                  businessKey: aBusinessKey
                  correlationKeys:
                    aVariable:
                      value: aValue
                      type: String
                  processVariables:
                    aVariable:
                      value: aNewValue
                      type: String
                      valueInfo:
                        transient: true
                    anotherVariable:
                      value: true
                      type: Boolean
                  resultEnabled: true
              example-3:
                summary: POST /condition
                description: Correlate with result and variables
                value:
                  messageName: aMessage
                  businessKey: aBusinessKey
                  correlationKeys:
                    aVariable:
                      value: aValue
                      type: String
                  processVariables:
                    aVariable:
                      value: aNewValue
                      type: String
                      valueInfo:
                        transient: true
                    anotherVariable:
                      value: true
                      type: Boolean
                  resultEnabled: true
                  variablesInResultEnabled: true
      responses:
        "200":
          description: |-
            Request successful. The property `resultEnabled` in the request body was `true`.
            The `variables` property is only returned, if the property variablesInResultEnable`
            was set to `true` in the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageCorrelationResultWithVariableDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response.
                  description: The Response content of a status 200. The property
                    `variablesInResultEnabled` in the request body was `false` (Default).
                  value:
                  - resultType: ProcessDefinition
                    processInstance:
                      links: []
                      id: aProcInstId
                      definitionId: aProcDefId
                      businessKey: aKey
                      caseInstanceId: aCaseInstId
                      ended: false
                      suspended: false
                      tenantId: aTenantId
                example-2:
                  summary: Status 200 Response.
                  description: The Response content of a status 200. The property
                    `variablesInResultEnabled` in the request body was `true`.
                  value:
                  - resultType: Execution
                    execution:
                      id: anExecutionId
                      processInstanceId: aProcInstId
                      ended: false
                      tenantId: aTenantId
                    variables:
                      aVariable:
                        value: aNewValue
                        type: String
                        valueInfo:
                          transient: true
                      anotherVariable:
                        value: true
                        type: Boolean
        "204":
          description: Request successful. The property `resultEnabled` in the request
            body was `false` (Default).
        "400":
          description: |-
            Returned if:
            * no `messageName` was supplied
            * both `tenantId` and `withoutTenantId` are supplied
            * the message has not been correlated to exactly one entity (execution or process definition)
            * the variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Message
  /metrics:
    get:
      tags:
      - Metrics
      description: Retrieves a list of metrics, aggregated for a given interval.
      operationId: interval
      parameters:
      - name: name
        in: query
        description: The name of the metric.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - activity-instance-start
          - activity-instance-end
          - job-acquisition-attempt
          - job-acquired-success
          - job-acquired-failure
          - job-execution-rejected
          - job-successful
          - job-failed
          - job-locked-exclusive
          - executed-decision-elements
          - history-cleanup-removed-process-instances
          - history-cleanup-removed-case-instances
          - history-cleanup-removed-decision-instances
          - history-cleanup-removed-batch-operations
      - name: reporter
        in: query
        description: |-
          The name of the reporter (host), on which the metrics was logged. This will have
          value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.14/reference/deployment-descriptors/tags/process-engine/#hostname).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startDate
        in: query
        description: The start date (inclusive).
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: endDate
        in: query
        description: The end date (exclusive).
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: interval
        in: query
        description: |-
          The interval for which the metrics should be aggregated. Time unit is seconds.
          Default: The interval is set to 15 minutes (900 seconds).
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "900"
      - name: aggregateByReporter
        in: query
        description: Aggregate metrics by reporter.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricsIntervalResultDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /metrics?name=activity-instance-end&startDate=1970-01-01T01:45:00.000%2b0200&endDate=1970-01-01T02:00:00.000%2b0200
                  value:
                  - timestamp: 1970-01-01T01:45:00.000+0200
                    name: activity-instance-end
                    reporter: REPORTER
                    value: 23
        "400":
          description: Returned if some of the query parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Metrics
  /metrics/{metrics-name}/sum:
    get:
      tags:
      - Metrics
      description: Retrieves the `sum` (count) for a given metric.
      operationId: getMetrics
      parameters:
      - name: metrics-name
        in: path
        description: The name of the metric.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - activity-instance-start
          - activity-instance-end
          - job-acquisition-attempt
          - job-acquired-success
          - job-acquired-failure
          - job-execution-rejected
          - job-successful
          - job-failed
          - job-locked-exclusive
          - executed-decision-elements
          - history-cleanup-removed-process-instances
          - history-cleanup-removed-case-instances
          - history-cleanup-removed-decision-instances
          - history-cleanup-removed-batch-operations
      - name: startDate
        in: query
        description: The start date (inclusive).
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: endDate
        in: query
        description: The end date (exclusive).
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResultDto'
              examples:
                example-1:
                  summary: GET /metrics/activity-instance-end/sum?startDate=2015-01-01T00:00:00.000%2b0200
                  value:
                    result: 4342343241
      x-swagger-router-controller: Metrics
  /process-definition:
    get:
      tags:
      - Process Definition
      summary: Get List
      description: "Queries for process definitions that fulfill given parameters.\
        \ Parameters may be the properties of \nprocess definitions, such as the name,\
        \ key or version. The size of the result set can be retrieved\nby using the\
        \ [Get Definition Count](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/get-query-count/)\
        \ method."
      operationId: getProcessDefinitions
      parameters:
      - name: processDefinitionId
        in: query
        description: Filter by process definition id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionIdIn
        in: query
        description: Filter by a comma-separated list of process definition ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Filter by process definition name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameLike
        in: query
        description: Filter by process definition names that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deploymentId
        in: query
        description: Filter by the deployment the id belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deployedAfter
        in: query
        description: |-
          Filter by the deploy time of the deployment the process definition belongs to.
          Only selects process definitions that have been deployed after (exclusive) a specific time.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: deployedAt
        in: query
        description: |-
          Filter by the deploy time of the deployment the process definition belongs to.
          Only selects process definitions that have been deployed at a specific time (exact match).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: key
        in: query
        description: Filter by process definition key, i.e., the id in the BPMN 2.0
          XML. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: keysIn
        in: query
        description: Filter by a comma-separated list of process definition keys.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: keyLike
        in: query
        description: Filter by process definition keys that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: category
        in: query
        description: Filter by process definition category. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: categoryLike
        in: query
        description: Filter by process definition categories that the parameter is
          a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: Filter by process definition version.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: latestVersion
        in: query
        description: |-
          Only include those process definitions that are latest versions.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: resourceName
        in: query
        description: Filter by the name of the process definition resource. Exact
          match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceNameLike
        in: query
        description: Filter by names of those process definition resources that the
          parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startableBy
        in: query
        description: Filter by a user name who is allowed to start the process.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: |-
          Only include active process definitions.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: suspended
        in: query
        description: |-
          Only include suspended process definitions.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidentId
        in: query
        description: Filter by the incident id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentType
        in: query
        description: |-
          Filter by the incident type.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessage
        in: query
        description: Filter by the incident message. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessageLike
        in: query
        description: Filter by the incident message that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: |-
          Filter by a comma-separated list of tenant ids.
          A process definition must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: |-
          Only include process definitions which belong to no tenant.
          Value may only be true, as false is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: includeProcessDefinitionsWithoutTenantId
        in: query
        description: |-
          Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: versionTag
        in: query
        description: Filter by the version tag.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: versionTagLike
        in: query
        description: Filter by the version tag that the parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutVersionTag
        in: query
        description: Only include process definitions without a `versionTag`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: startableInTasklist
        in: query
        description: Filter by process definitions which are startable in Tasklist..
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: notStartableInTasklist
        in: query
        description: Filter by process definitions which are not startable in Tasklist.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: startablePermissionCheck
        in: query
        description: |-
          Filter by process definitions which the user is allowed to start in Tasklist.
          If the user doesn't have these permissions the result will be empty list.
          The permissions are:
          * `CREATE` permission for all Process instances
          * `CREATE_INSTANCE` and `READ` permission on Process definition level
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - category
          - key
          - id
          - name
          - version
          - deploymentId
          - deployTime
          - 'tenantId '
          - versionTag
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessDefinitionDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response of GET `/process-definition?keyLike=invoice&sortBy=version&sortOrder=asc`
                  value:
                  - id: invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    name: Invoice Receipt
                    version: 1
                    resource: invoice.v1.bpmn
                    deploymentId: c398cd26-2046-11e7-8f94-34f39ab71d4e
                    suspended: false
                    historyTimeToLive: 5
                    startableInTasklist: true
                  - id: invoice:2:c3e1bd16-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    name: Invoice Receipt
                    version: 2
                    resource: invoice.v2.bpmn
                    deploymentId: c3d82020-2046-11e7-8f94-34f39ab71d4e
                    suspended: false
                    startableInTasklist: true
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/count:
    get:
      tags:
      - Process Definition
      summary: Get List Count
      description: |-
        Requests the number of process definitions that fulfill the query criteria.
        Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/get-query/) method.
      operationId: getProcessDefinitionsCount
      parameters:
      - name: processDefinitionId
        in: query
        description: Filter by process definition id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionIdIn
        in: query
        description: Filter by a comma-separated list of process definition ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Filter by process definition name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameLike
        in: query
        description: Filter by process definition names that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deploymentId
        in: query
        description: Filter by the deployment the id belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deployedAfter
        in: query
        description: |-
          Filter by the deploy time of the deployment the process definition belongs to.
          Only selects process definitions that have been deployed after (exclusive) a specific time.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: deployedAt
        in: query
        description: |-
          Filter by the deploy time of the deployment the process definition belongs to.
          Only selects process definitions that have been deployed at a specific time (exact match).
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: key
        in: query
        description: Filter by process definition key, i.e., the id in the BPMN 2.0
          XML. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: keysIn
        in: query
        description: Filter by a comma-separated list of process definition keys.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: keyLike
        in: query
        description: Filter by process definition keys that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: category
        in: query
        description: Filter by process definition category. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: categoryLike
        in: query
        description: Filter by process definition categories that the parameter is
          a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: Filter by process definition version.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: latestVersion
        in: query
        description: |-
          Only include those process definitions that are latest versions.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: resourceName
        in: query
        description: Filter by the name of the process definition resource. Exact
          match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: resourceNameLike
        in: query
        description: Filter by names of those process definition resources that the
          parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startableBy
        in: query
        description: Filter by a user name who is allowed to start the process.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: |-
          Only include active process definitions.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: suspended
        in: query
        description: |-
          Only include suspended process definitions.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidentId
        in: query
        description: Filter by the incident id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentType
        in: query
        description: |-
          Filter by the incident type.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessage
        in: query
        description: Filter by the incident message. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessageLike
        in: query
        description: Filter by the incident message that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: |-
          Filter by a comma-separated list of tenant ids.
          A process definition must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: |-
          Only include process definitions which belong to no tenant.
          Value may only be true, as false is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: includeProcessDefinitionsWithoutTenantId
        in: query
        description: |-
          Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`.
          Value may only be `true`, as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: versionTag
        in: query
        description: Filter by the version tag.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: versionTagLike
        in: query
        description: Filter by the version tag that the parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutVersionTag
        in: query
        description: Only include process definitions without a `versionTag`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: startableInTasklist
        in: query
        description: Filter by process definitions which are startable in Tasklist..
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: notStartableInTasklist
        in: query
        description: Filter by process definitions which are not startable in Tasklist.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: startablePermissionCheck
        in: query
        description: |-
          Filter by process definitions which the user is allowed to start in Tasklist.
          If the user doesn't have these permissions the result will be empty list.
          The permissions are:
          * `CREATE` permission for all Process instances
          * `CREATE_INSTANCE` and `READ` permission on Process definition level
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response of GET `/process-definition/count?keyLike=Key&version=47`
                  value:
                    count: 1
        "400":
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}:
    get:
      tags:
      - Process Definition
      summary: Get
      description: Retrieves the latest version of the process definition which belongs
        to no tenant according to the `ProcessDefinition` interface in the engine.
      operationId: getProcessDefinitionByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response of GET `/process-definition/key/invoice`
                  value:
                    id: invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    name: Invoice Receipt
                    version: 1
                    resource: invoice.v1.bpmn
                    deploymentId: c398cd26-2046-11e7-8f94-34f39ab71d4e
                    suspended: false
                    historyTimeToLive: 5
                    startableInTasklist: true
        "400":
          description: |-
            Process definition with given `key` does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
    delete:
      tags:
      - Process Definition
      summary: Delete By Key
      description: Deletes process definitions by a given key which belong to no tenant
        id.
      operationId: deleteProcessDefinitionsByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definitions to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: cascade
        in: query
        description: |-
          `true`, if all process instances, historic process instances and jobs
          for this process definition should be deleted.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: skipCustomListeners
        in: query
        description: '`true`, if only the built-in ExecutionListeners should be notified
          with the end event.'
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: skipIoMappings
        in: query
        description: |-
          A boolean value to control whether input/output mappings should be executed during deletion.
          `true`, if input/output mappings should not be invoked.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: Request successful.
        "403":
          description: |-
            Forbidden
            The process definitions with the given `key` cannot be deleted due to missing permissions.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            Not found
            Process definition with given `key` does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/deployed-start-form:
    get:
      tags:
      - Process Definition
      summary: Get Deployed Start Form
      description: |-
        Retrieves the deployed form that can be referenced from a start event.
        For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
      operationId: getDeployedStartFormByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/xhtml+xml:
              schema:
                type: string
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                x-content-type: application/xhtml+xml
              examples:
                example-1:
                  summary: Status 200 Response
                  description: Resonse for GET `/process-definition/key/processDefinitionKey/deployed-start-form`
                  value: |-
                    <form role="form" name="invoiceForm"
                                                          class="form-horizontal">

                                                      <div class="form-group">
                                                        <label class="control-label col-md-4"
                                                               for="creditor">Creditor</label>
                                                        <div class="col-md-8">
                                                          <input cam-variable-name="creditor"
                                                                 cam-variable-type="String"
                                                                 id="creditor"
                                                                 class="form-control"
                                                                 type="text"
                                                                 required />
                                                          <div class="help">
                                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)
                                                          </div>
                                                        </div>
                                                      </div>

                                                    </form>
        "400":
          description: |-
            The form key has wrong format.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            The deployed start form cannot be retrieved due to missing permissions on process definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            No deployed start form for a given process definition exists. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/diagram:
    get:
      tags:
      - Process Definition
      summary: Get Diagram
      description: |-
        Retrieves the diagram for the latest version of the process definition which belongs to no tenant.

        If the process definition's deployment contains an image resource with the same file name
        as the process definition, the deployed image will be returned by the Get Diagram endpoint.
        Example: `someProcess.bpmn` and `someProcess.png`.
        Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
      operationId: getProcessDefinitionDiagramByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful. The image diagram of this process.
          content:
            application/octet-stream:
              schema:
                type: string
                description: defaults to `application/octet-stream` if the file suffix
                  is unknown
                format: binary
                x-content-type: application/octet-stream
            '*/*':
              schema:
                type: string
                description: 'Files with MIME type information image/png, image/gif,
                  ... '
                format: binary
        "204":
          description: The process definition doesn't have an associated diagram.
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/form-variables:
    get:
      tags:
      - Process Definition
      summary: Get Start Form Variables
      description: "Retrieves the start form variables for the latest process definition\
        \ which belongs to no tenant\n(only if they are defined via the \n[Generated\
        \ Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms)\
        \ approach).\nThe start form variables take form data specified on the start\
        \ event into account.\nIf form fields are defined, the variable types and\
        \ default values\nof the form fields are taken into account."
      operationId: getStartFormVariablesByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: variableNames
        in: query
        description: |-
          A comma-separated list of variable names. Allows restricting the list of requested
          variables to the variable names in the list. It is best practice to restrict the
          list of variables to the variables actually required by the form in order to
          minimize fetching of data. If the query parameter is ommitted all variables are
          fetched. If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deserializeValues
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store
          custom Java objects) should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and
          transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
          property introspection feature. Note that this requires the Java classes of the
          variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string
          containing XML.

          **Note**: While true is the default value for reasons of backward compatibility, we
          recommend setting this parameter to false when developing web applications that are
          independent of the Java process applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful. A JSON object containing a property for
            each variable returned.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response
                  description: GET `/task/anId/form-variables`
                  value:
                    amount:
                      type: integer
                      value: 5
                      valueInfo: {}
                    firstName:
                      type: String
                      value: Jonny
                      valueInfo: {}
        "404":
          description: |-
            The key is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/history-time-to-live:
    put:
      tags:
      - Process Definition
      summary: Update History Time to Live
      description: |-
        Updates history time to live for the latest version of the process definition which belongs to no tenant.
        The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
      operationId: updateHistoryTimeToLiveByProcessDefinitionKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition to change history time to live.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoryTimeToLiveDto'
            examples:
              example-1:
                summary: PUT `/process-definition/key/aProcessDefinitionKey/history-time-to-live`
                value:
                  historyTimeToLive: 5
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if some of the request parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/rendered-form:
    get:
      tags:
      - Process Definition
      summary: Get Rendered Start Form
      description: |-
        Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant.
        This method can be used to get the HTML rendering of a
        [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: getRenderedStartFormByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/xhtml+xml:
              schema:
                type: string
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                x-content-type: application/xhtml+xml
              examples:
                example-1:
                  summary: Status 200 Response
                  description: |-
                    A `/process-definition/key/anKey/rendered-form` HTML
                                                           GET response body providing the rendered (generated) form content.
                  value: |-
                    <form class="form-horizontal">
                                                      <div class="control-group">
                                                        <label class="control-label">Customer ID</label>
                                                        <div class="controls">
                                                          <input form-field type="string" name="customerId"></input>
                                                        </div>
                                                      </div>
                                                      <div class="control-group">
                                                        <label class="control-label">Amount</label>
                                                        <div class="controls">
                                                          <input form-field type="number" name="amount"></input>
                                                        </div>
                                                      </div>
                                                    </form>
        "400":
          description: |-
            Process definition has no form field metadata defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/start:
    post:
      tags:
      - Process Definition
      summary: Start Instance
      description: |-
        Instantiates a given process definition, starts the latest version of the process definition
        which belongs to no tenant.
        Process variables and business key may be supplied in the request body.
      operationId: startProcessInstanceByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessInstanceDto'
            examples:
              example-1:
                summary: Starting a process instance at its default initial activity
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
              example-2:
                summary: Starting a process instance with variables in return
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
                  withVariablesInReturn: true
              example-3:
                summary: Starting a process instance at two specific activities
                value:
                  variables:
                    aProcessVariable:
                      value: aStringValue
                      type: String
                  businessKey: myBusinessKey
                  skipCustomListeners: true
                  startInstructions:
                  - type: startBeforeActivity
                    activityId: activityId
                    variables:
                      var:
                        value: aVariableValue
                        local: false
                        type: String
                  - type: startAfterActivity
                    activityId: anotherActivityId
                    variables:
                      varLocal:
                        value: anotherVariableValue
                        local: true
                        type: String
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceWithVariablesDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  description: Response for starting a process instance at its default
                    initial activity
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
                example-2:
                  summary: Status 200 Response 2
                  description: Response for starting a process instance with variables
                    in return
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/aProcInstId
                      rel: self
                    id: aProcInstId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
                    variables:
                      anotherVariable:
                        type: Boolean
                        value: true
                        valueInfo:
                          transient: true
                      aVariable:
                        type: String
                        value: aStringValue
                        valueInfo: {}
                example-3:
                  summary: Status 200 Response 3
                  description: Response for starting a process instance at two specific
                    activities
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
        "400":
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/startForm:
    get:
      tags:
      - Process Definition
      summary: Get Start Form Key
      description: |-
        Retrieves the key of the start form for the latest version of the process definition
        which belongs to no tenant.
        The form key corresponds to the `FormData#formKey` property in the engine.
      operationId: getStartFormByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          for which the form key is to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  description: GET `process-definition/key/aKey/startForm`
                  value:
                    key: aFormKey
                    contextPath: http://localhost:8080/my-process-application/
        "400":
          description: |-
            Process definition has no start form defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/statistics:
    get:
      tags:
      - Process Definition
      summary: Get Activity Instance Statistics
      description: |-
        Retrieves runtime statistics of the latest version of the given process definition
        which belongs to no tenant, grouped by activities.
        These statistics include the number of running activity instances, optionally the number of failed jobs
        and also optionally the number of incidents either grouped by incident types or
        for a specific incident type.
        **Note**: This does not include historic data.
      operationId: getActivityStatisticsByProcessDefinitionKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: failedJobs
        in: query
        description: Whether to include the number of failed jobs in the result or
          not. Valid values are `true` or `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidents
        in: query
        description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of incidents
          for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidentsForType
        in: query
        description: |-
          If this property has been set with any incident type (i.e., a string value) the result
          will only include the number of incidents for the assigned incident type.
          Cannot be used in combination with `incidents`.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityStatisticsResultDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /process-definition/key/aProcessDefinitionKey/statistics?failedJobs=true
                  description: Request with Query Parameter `failedJobs=true`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 42
                    incidents: []
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 43
                    incidents: []
                example-2:
                  summary: GET /process-definition/key/aProcessDefinitionKey/statistics?incidents=true
                  description: Request with Query Parameter `incidents=true`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 42
                    - incidentType: anIncident
                      incidentCount: 20
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 43
                    - incidentType: anIncident
                      incidentCount: 22
                    - incidentType: anotherIncident
                      incidentCount: 15
                example-3:
                  summary: GET /process-definition/key/aProcessDefinitionKey/statistics?incidentsForType=anIncident
                  description: Request with Query Parameter `incidentsForType=anIncident`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: anIncident
                      incidentCount: 20
        "400":
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/submit-form:
    post:
      tags:
      - Process Definition
      summary: Submit Start Form
      description: |-
        Starts the latest version of the process definition which belongs to no tenant
        using a set of process variables and the business key.
        If the start event has Form Field Metadata defined, the process engine will perform backend validation
        for any form fields which have validators defined.
        See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: submitFormByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition to submit the form for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessInstanceFormDto'
            examples:
              example-1:
                summary: POST `/process-definition/key/aProcessDefinitionKey/submit-form`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  description: POST `/process-definition/key/aProcessDefinitionKey/submit-form`
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
        "400":
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/suspended:
    put:
      tags:
      - Process Definition
      summary: Activate/Suspend by Id
      description: |-
        Activates or suspends a given process definition by latest version of process definition key
        which belongs to no tenant.
      operationId: updateProcessDefinitionSuspensionStateByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be activated/suspended.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: '**Note**: Unallowed properties are `processDefinitionId` and
          `processDefinitionKey`.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessDefinitionSuspensionStateDto'
            examples:
              example-1:
                summary: PUT `/process-definition/key/aProcessDefinitionKey/suspended`
                value:
                  suspended: true
                  includeProcessInstances: true
                  executionDate: 2013-11-21T10:49:45T14:42:45
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if some of the query parameters are invalid,
            for example if the provided `executionDate` parameter doesn't have the expected format or
            if the `processDefinitionKey` parameter is `null`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}:
    get:
      tags:
      - Process Definition
      summary: Get
      description: |-
        Retrieves the latest version of the process definition for tenant according to
        the `ProcessDefinition` interface in the engine.
      operationId: getLatestProcessDefinitionByTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response of GET `/process-definition/key/invoice/tenant-id/tenantOne`
                  value:
                    id: invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    name: Invoice Receipt
                    version: 1
                    resource: invoice.v1.bpmn
                    deploymentId: c398cd26-2046-11e7-8f94-34f39ab71d4e
                    suspended: false
                    tenantId: tenantOne
                    historyTimeToLive: 5
                    startableInTasklist: true
        "400":
          description: |-
            Process definition with given `key` does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
    delete:
      tags:
      - Process Definition
      summary: Delete By Key
      description: Deletes process definitions by a given key and which belong to
        a tenant id.
      operationId: deleteProcessDefinitionsByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definitions to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definitions belong to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: cascade
        in: query
        description: |-
          `true`, if all process instances, historic process instances and jobs
          for this process definition should be deleted.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: skipCustomListeners
        in: query
        description: '`true`, if only the built-in ExecutionListeners should be notified
          with the end event.'
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: skipIoMappings
        in: query
        description: |-
          A boolean value to control whether input/output mappings should be executed during deletion.
          `true`, if input/output mappings should not be invoked.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: Request successful.
        "403":
          description: |-
            Forbidden
            The process definitions with the given `key` cannot be deleted due to missing permissions.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            Not found
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form:
    get:
      tags:
      - Process Definition
      summary: Get Deployed Start Form
      description: |-
        Retrieves the deployed form that can be referenced from a start event.
        For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
      operationId: getDeployedStartFormByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definitions belong to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/xhtml+xml:
              schema:
                type: string
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                x-content-type: application/xhtml+xml
              examples:
                example-1:
                  summary: Status 200 Response
                  description: |-
                    Resonse for GET
                                                           `/process-definition/key/processDefinitionKey/tenant-id/tenantId/deployed-start-form`
                  value: |-
                    <form role="form" name="invoiceForm"
                                                          class="form-horizontal">

                                                      <div class="form-group">
                                                        <label class="control-label col-md-4"
                                                               for="creditor">Creditor</label>
                                                        <div class="col-md-8">
                                                          <input cam-variable-name="creditor"
                                                                 cam-variable-type="String"
                                                                 id="creditor"
                                                                 class="form-control"
                                                                 type="text"
                                                                 required />
                                                          <div class="help">
                                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)
                                                          </div>
                                                        </div>
                                                      </div>

                                                    </form>
        "400":
          description: |-
            The form key has wrong format.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            The deployed start form cannot be retrieved due to missing permissions on process definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            No deployed start form for a given process definition exists. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/diagram:
    get:
      tags:
      - Process Definition
      summary: Get Diagram
      description: |-
        Retrieves the diagram for the latest version of the process definition for tenant.

        If the process definition's deployment contains an image resource with the same file name
        as the process definition, the deployed image will be returned by the Get Diagram endpoint.
        Example: `someProcess.bpmn` and `someProcess.png`.
        Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
      operationId: getProcessDefinitionDiagramByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful. The image diagram of this process.
          content:
            application/octet-stream:
              schema:
                type: string
                description: defaults to `application/octet-stream` if the file suffix
                  is unknown
                format: binary
                x-content-type: application/octet-stream
            '*/*':
              schema:
                type: string
                description: 'Files with MIME type information image/png, image/gif,
                  ... '
                format: binary
        "204":
          description: The process definition doesn't have an associated diagram.
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/form-variables:
    get:
      tags:
      - Process Definition
      summary: Get Start Form Variables
      description: "Retrieves the start form variables for the latest process definition\
        \ for a tenant\n(only if they are defined via the \n[Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms)\
        \ approach).\nThe start form variables take form data specified on the start\
        \ event into account.\nIf form fields are defined, the variable types and\
        \ default values\nof the form fields are taken into account."
      operationId: getStartFormVariablesByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: variableNames
        in: query
        description: |-
          A comma-separated list of variable names. Allows restricting the list of requested
          variables to the variable names in the list. It is best practice to restrict the
          list of variables to the variables actually required by the form in order to
          minimize fetching of data. If the query parameter is ommitted all variables are
          fetched. If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deserializeValues
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store
          custom Java objects) should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and
          transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
          property introspection feature. Note that this requires the Java classes of the
          variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string
          containing XML.

          **Note**: While true is the default value for reasons of backward compatibility, we
          recommend setting this parameter to false when developing web applications that are
          independent of the Java process applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful. A JSON object containing a property for
            each variable returned.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response
                  description: GET `/task/anId/form-variables`
                  value:
                    amount:
                      type: integer
                      value: 5
                      valueInfo: {}
                    firstName:
                      type: String
                      value: Jonny
                      valueInfo: {}
        "404":
          description: |-
            The key is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live:
    put:
      tags:
      - Process Definition
      summary: Update History Time to Live
      description: |-
        Updates history time to live for the latest version of the process definition for a tenant.
        The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
      operationId: updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition to change history time to live.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoryTimeToLiveDto'
            examples:
              example-1:
                summary: PUT `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/history-time-to-live`
                value:
                  historyTimeToLive: 5
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if some of the request parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form:
    get:
      tags:
      - Process Definition
      summary: Get Rendered Start Form
      description: |-
        Retrieves  the rendered form for the latest version of the process definition for a tenant.
        This method can be used to get the HTML rendering of a
        [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: getRenderedStartFormByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/xhtml+xml:
              schema:
                type: string
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                x-content-type: application/xhtml+xml
              examples:
                example-1:
                  summary: Status 200 Response
                  description: |-
                    A `/process-definition/key/anKey/tenand-id/aTenantId/rendered-form` HTML
                                                           GET response body providing the rendered (generated) form content.
                  value: |-
                    <form class="form-horizontal">
                                                      <div class="control-group">
                                                        <label class="control-label">Customer ID</label>
                                                        <div class="controls">
                                                          <input form-field type="string" name="customerId"></input>
                                                        </div>
                                                      </div>
                                                      <div class="control-group">
                                                        <label class="control-label">Amount</label>
                                                        <div class="controls">
                                                          <input form-field type="number" name="amount"></input>
                                                        </div>
                                                      </div>
                                                    </form>
        "400":
          description: |-
            Process definition has no form field metadata defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/start:
    post:
      tags:
      - Process Definition
      summary: Start Instance
      description: |-
        Instantiates a given process definition, starts the latest version of the process definition for tenant.
        Process variables and business key may be supplied in the request body.
      operationId: startProcessInstanceByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessInstanceDto'
            examples:
              example-1:
                summary: Starting a process instance at its default initial activity
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
              example-2:
                summary: Starting a process instance with variables in return
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
                  withVariablesInReturn: true
              example-3:
                summary: Starting a process instance at two specific activities
                value:
                  variables:
                    aProcessVariable:
                      value: aStringValue
                      type: String
                  businessKey: myBusinessKey
                  skipCustomListeners: true
                  startInstructions:
                  - type: startBeforeActivity
                    activityId: activityId
                    variables:
                      var:
                        value: aVariableValue
                        local: false
                        type: String
                  - type: startAfterActivity
                    activityId: anotherActivityId
                    variables:
                      varLocal:
                        value: anotherVariableValue
                        local: true
                        type: String
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceWithVariablesDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  description: Response for starting a process instance at its default
                    initial activity
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
                example-2:
                  summary: Status 200 Response 2
                  description: Response for starting a process instance with variables
                    in return
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/aProcInstId
                      rel: self
                    id: aProcInstId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
                    variables:
                      anotherVariable:
                        type: Boolean
                        value: true
                        valueInfo:
                          transient: true
                      aVariable:
                        type: String
                        value: aStringValue
                        valueInfo: {}
                example-3:
                  summary: Status 200 Response 3
                  description: Response for starting a process instance at two specific
                    activities
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
        "400":
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/startForm:
    get:
      tags:
      - Process Definition
      summary: Get Start Form Key
      description: |-
        Retrieves the key of the start form for the latest version of the process definition for a tenant.
        The form key corresponds to the `FormData#formKey` property in the engine.
      operationId: getStartFormByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          for which the form key is to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  description: GET `process-definition/key/aKey/tenant-id/aTenantId/startForm`
                  value:
                    key: aFormKey
                    contextPath: http://localhost:8080/my-process-application/
        "400":
          description: |-
            Process definition has no start form defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/statistics:
    get:
      tags:
      - Process Definition
      summary: Get Activity Instance Statistics
      description: |-
        Retrieves runtime statistics of the latest version of the given process definition for a tenant,
        grouped by activities.
        These statistics include the number of running activity instances, optionally the number of failed jobs
        and also optionally the number of incidents either grouped by incident types or
        for a specific incident type.
        **Note**: This does not include historic data.
      operationId: getActivityStatisticsByProcessDefinitionKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: failedJobs
        in: query
        description: Whether to include the number of failed jobs in the result or
          not. Valid values are `true` or `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidents
        in: query
        description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of incidents
          for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidentsForType
        in: query
        description: |-
          If this property has been set with any incident type (i.e., a string value) the result
          will only include the number of incidents for the assigned incident type.
          Cannot be used in combination with `incidents`.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityStatisticsResultDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?failedJobs=true
                  description: Request with Query Parameter `failedJobs=true`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 42
                    incidents: []
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 43
                    incidents: []
                example-2:
                  summary: GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?incidents=true
                  description: Request with Query Parameter `incidents=true`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 42
                    - incidentType: anIncident
                      incidentCount: 20
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 43
                    - incidentType: anIncident
                      incidentCount: 22
                    - incidentType: anotherIncident
                      incidentCount: 15
                example-3:
                  summary: GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?incidentsForType=anIncident
                  description: Request with Query Parameter `incidentsForType=anIncident`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: anIncident
                      incidentCount: 20
        "400":
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/submit-form:
    post:
      tags:
      - Process Definition
      summary: Submit Start Form
      description: |-
        Starts the latest version of the process definition for a tenant
        using a set of process variables and the business key.
        If the start event has Form Field Metadata defined, the process engine will perform backend validation
        for any form fields which have validators defined.
        See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: submitFormByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition to submit the form for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessInstanceFormDto'
            examples:
              example-1:
                summary: POST `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/submit-form`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  description: POST `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/submit-form`
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
        "400":
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/suspended:
    put:
      tags:
      - Process Definition
      summary: Activate/Suspend by Id
      description: |-
        Activates or suspends a given process definition by the latest version of
        the process definition for tenant.
      operationId: updateProcessDefinitionSuspensionStateByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          to be activated/suspended.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: '**Note**: Unallowed properties are `processDefinitionId` and
          `processDefinitionKey`.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessDefinitionSuspensionStateDto'
            examples:
              example-1:
                summary: PUT `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/suspended`
                value:
                  suspended: true
                  includeProcessInstances: true
                  executionDate: 2013-11-21T10:49:45T14:42:45
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if some of the query parameters are invalid,
            for example if the provided `executionDate` parameter doesn't have the expected format or
            if the `processDefinitionKey` parameter is `null`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/tenant-id/{tenant-id}/xml:
    get:
      tags:
      - Process Definition
      summary: Get XML
      description: |-
        Retrieves latest version the BPMN 2.0 XML of a process definition.
        Returns the XML for the latest version of the process definition for tenant.
      operationId: getProcessDefinitionBpmn20XmlByKeyAndTenantId
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          whose XML should be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant-id
        in: path
        description: The id of the tenant the process definition belongs to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDiagramDto'
              examples:
                example-1:
                  summary: GET `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/xml`
                  value:
                    id: anProcessDefinitionId
                    bpmn20Xml: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                      <definitions
                                               xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
                                               xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
                                               targetNamespace="Examples">
                                               <process id="oneTaskProcess" isExecutable="true">
                                                 <startEvent id="theStart" />
                                                 <sequenceFlow id="flow1" sourceRef="theStart" targetRef="theEnd" />
                                                 <endEvent id="theEnd" />
                                               </process>
                                             </definitions>
        "403":
          description: |-
            The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/key/{key}/xml:
    get:
      tags:
      - Process Definition
      summary: Get XML
      description: Retrieves latest version the BPMN 2.0 XML of a process definition.
      operationId: getProcessDefinitionBpmn20XmlByKey
      parameters:
      - name: key
        in: path
        description: The key of the process definition (the latest version thereof)
          whose XML should be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDiagramDto'
              examples:
                example-1:
                  summary: GET `/process-definition/key/aProcessDefinitionKey/xml`
                  value:
                    id: anProcessDefinitionId
                    bpmn20Xml: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                      <definitions
                                               xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
                                               xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
                                               targetNamespace="Examples">
                                               <process id="oneTaskProcess" isExecutable="true">
                                                 <startEvent id="theStart" />
                                                 <sequenceFlow id="flow1" sourceRef="theStart" targetRef="theEnd" />
                                                 <endEvent id="theEnd" />
                                               </process>
                                             </definitions>
        "403":
          description: |-
            The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/statistics:
    get:
      tags:
      - Process Definition
      summary: Get Process Instance Statistics
      description: |-
        Retrieves runtime statistics of the process engine, grouped by process definitions.
        These statistics include the number of running process instances, optionally the number of failed jobs
        and also optionally the number of incidents either grouped by incident types or
        for a specific incident type.
        **Note**: This does not include historic data.
      operationId: getProcessDefinitionStatistics
      parameters:
      - name: failedJobs
        in: query
        description: Whether to include the number of failed jobs in the result or
          not. Valid values are `true` or `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidents
        in: query
        description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of incidents
          for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidentsForType
        in: query
        description: |-
          If this property has been set with any incident type (i.e., a string value) the result
          will only include the number of incidents for the assigned incident type.
          Cannot be used in combination with `incidents`.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rootIncidents
        in: query
        description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of
          root incidents for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType` or `incidents`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessDefinitionStatisticsResultDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /process-definition/statistics?failedJobs=true
                  description: Request with Query Parameter `failedJobs=true`
                  value:
                  - id: aProcessDefinitionId
                    instances: 123
                    failedJobs: 42
                    definition:
                      id: aProcessDefinitionId
                      key: aKey
                      name: aName
                      version: 0
                      suspended: false
                      versionTag: 1.0.0
                      startableInTasklist: false
                    incidents: []
                  - id: aProcessDefinitionId:2
                    instances: 124
                    failedJobs: 43
                    definition:
                      id: aProcessDefinitionId:2
                      key: aKey
                      name: aName
                      version: 0
                      suspended: false
                      startableInTasklist: false
                    incidents: []
                example-2:
                  summary: GET /process-definition/statistics?incidents=true
                  description: Request with Query Parameter `incidents=true`
                  value:
                  - id: aProcessDefinitionId
                    instances: 123
                    failedJobs: 0
                    definition:
                      id: aProcessDefinitionId
                      key: aKey
                      name: aName
                      version: 0
                      suspended: false
                      versionTag: 1.0.0
                      startableInTasklist: false
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 42
                    - incidentType: anIncident
                      incidentCount: 20
                  - id: aProcessDefinitionId:2
                    instances: 124
                    failedJobs: 0
                    definition:
                      id: aProcessDefinitionId:2
                      key: aKey
                      name: aName
                      version: 0
                      suspended: false
                      startableInTasklist: false
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 43
                    - incidentType: anIncident
                      incidentCount: 22
                    - incidentType: anotherIncident
                      incidentCount: 15
                example-3:
                  summary: GET /process-definition/statistics?incidentsForType=anIncident
                  description: Request with Query Parameter `incidentsForType=anIncident`
                  value:
                  - id: aProcessDefinitionId
                    instances: 123
                    failedJobs: 0
                    definition:
                      id: aProcessDefinitionId
                      key: aKey
                      name: aName
                      version: 0
                      suspended: false
                      versionTag: 1.0.0
                      startableInTasklist: false
                    incidents:
                    - incidentType: anIncident
                      incidentCount: 20
                example-4:
                  summary: GET /process-definition/statistics?rootIncidents=true
                  description: Request with Query Parameter `rootIncidents=true`
                  value:
                  - id: aProcessDefinitionId
                    instances: 123
                    failedJobs: 0
                    definition:
                      id: aProcessDefinitionId
                      key: aKey
                      name: aName
                      version: 0
                      suspended: false
                      versionTag: 1.0.0
                      startableInTasklist: false
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 62
                    - incidentType: anIncident
                      incidentCount: 20
        "400":
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/suspended:
    put:
      tags:
      - Process Definition
      summary: Activate/Suspend By Key
      description: Activates or suspends process definitions with the given process
        definition key.
      operationId: updateProcessDefinitionSuspensionState
      requestBody:
        description: '**Note**: Unallowed property is `processDefinitionId`.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessDefinitionSuspensionStateDto'
            examples:
              example-1:
                summary: PUT `/process-definition/suspended`
                value:
                  processDefinitionKey: aProcessDefinitionKey
                  suspended: true
                  includeProcessInstances: true
                  executionDate: 2013-11-21T10:49:45T14:42:45
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if some of the query parameters are invalid,
            for example if the provided `executionDate` parameter doesn't have the expected format or
            if the `processDefinitionKey` parameter is `null`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}:
    get:
      tags:
      - Process Definition
      summary: Get
      description: Retrieves a process definition according to the `ProcessDefinition`
        interface in the engine.
      operationId: getProcessDefinition
      parameters:
      - name: id
        in: path
        description: The id of the process definition to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response of GET `/process-definition/invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e`
                  value:
                    id: invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e
                    key: invoice
                    category: http://www.omg.org/spec/BPMN/20100524/MODEL
                    name: Invoice Receipt
                    version: 1
                    resource: invoice.v1.bpmn
                    deploymentId: c398cd26-2046-11e7-8f94-34f39ab71d4e
                    suspended: false
                    historyTimeToLive: 5
                    startableInTasklist: true
        "400":
          description: |-
            Process definition with given `id` does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
    delete:
      tags:
      - Process Definition
      summary: Delete
      description: Deletes a running process instance by id.
      operationId: deleteProcessDefinition
      parameters:
      - name: id
        in: path
        description: The id of the process definition to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: cascade
        in: query
        description: |-
          `true`, if all process instances, historic process instances and jobs
          for this process definition should be deleted.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: skipCustomListeners
        in: query
        description: '`true`, if only the built-in ExecutionListeners should be notified
          with the end event.'
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: skipIoMappings
        in: query
        description: |-
          A boolean value to control whether input/output mappings should be executed during deletion.
          `true`, if input/output mappings should not be invoked.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: Request successful.
        "404":
          description: |-
            Not found
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/deployed-start-form:
    get:
      tags:
      - Process Definition
      summary: Get Deployed Start Form
      description: |-
        Retrieves the deployed form that can be referenced from a start event.
        For further information please refer to [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
      operationId: getDeployedStartForm
      parameters:
      - name: id
        in: path
        description: The id of the process definition to get the deployed start form
          for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/xhtml+xml:
              schema:
                type: string
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                x-content-type: application/xhtml+xml
              examples:
                example-1:
                  summary: Status 200 Response
                  description: Resonse for GET `/process-definition/processDefinitionId/deployed-start-form`
                  value: |-
                    <form role="form" name="invoiceForm"
                                                          class="form-horizontal">

                                                      <div class="form-group">
                                                        <label class="control-label col-md-4"
                                                               for="creditor">Creditor</label>
                                                        <div class="col-md-8">
                                                          <input cam-variable-name="creditor"
                                                                 cam-variable-type="String"
                                                                 id="creditor"
                                                                 class="form-control"
                                                                 type="text"
                                                                 required />
                                                          <div class="help">
                                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)
                                                          </div>
                                                        </div>
                                                      </div>

                                                    </form>
        "400":
          description: |-
            The form key has wrong format.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            The deployed start form cannot be retrieved due to missing permissions on process definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            No deployed start form for a given process definition exists. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/diagram:
    get:
      tags:
      - Process Definition
      summary: Get Diagram
      description: |-
        Retrieves the diagram of a process definition.

        If the process definition's deployment contains an image resource with the same file name
        as the process definition, the deployed image will be returned by the Get Diagram endpoint.
        Example: `someProcess.bpmn` and `someProcess.png`.
        Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
      operationId: getProcessDefinitionDiagram
      parameters:
      - name: id
        in: path
        description: The id of the process definition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful. The image diagram of this process.
          content:
            application/octet-stream:
              schema:
                type: string
                description: defaults to `application/octet-stream` if the file suffix
                  is unknown
                format: binary
                x-content-type: application/octet-stream
            '*/*':
              schema:
                type: string
                description: 'Files with MIME type information image/png, image/gif,
                  ... '
                format: binary
        "204":
          description: The process definition doesn't have an associated diagram.
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/form-variables:
    get:
      tags:
      - Process Definition
      summary: Get Start Form Variables
      description: "Retrieves the start form variables for a process definition\n\
        (only if they are defined via the \n[Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms)\
        \ approach).\nThe start form variables take form data specified on the start\
        \ event into account.\nIf form fields are defined, the variable types and\
        \ default values\nof the form fields are taken into account."
      operationId: getStartFormVariables
      parameters:
      - name: id
        in: path
        description: The id of the process definition to retrieve the variables for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: variableNames
        in: query
        description: |-
          A comma-separated list of variable names. Allows restricting the list of requested
          variables to the variable names in the list. It is best practice to restrict the
          list of variables to the variables actually required by the form in order to
          minimize fetching of data. If the query parameter is ommitted all variables are
          fetched. If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deserializeValues
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store
          custom Java objects) should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and
          transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
          property introspection feature. Note that this requires the Java classes of the
          variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string
          containing XML.

          **Note**: While true is the default value for reasons of backward compatibility, we
          recommend setting this parameter to false when developing web applications that are
          independent of the Java process applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful. A JSON object containing a property for
            each variable returned.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response
                  description: GET `/task/anId/form-variables`
                  value:
                    amount:
                      type: integer
                      value: 5
                      valueInfo: {}
                    firstName:
                      type: String
                      value: Jonny
                      valueInfo: {}
        "404":
          description: |-
            The id is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/history-time-to-live:
    put:
      tags:
      - Process Definition
      summary: Update History Time to Live
      description: |-
        Updates history time to live for process definition.
        The field is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
      operationId: updateHistoryTimeToLiveByProcessDefinitionId
      parameters:
      - name: id
        in: path
        description: The id of the process definition to change history time to live.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoryTimeToLiveDto'
            examples:
              example-1:
                summary: PUT `/process-definition/aProcessDefinitionId/history-time-to-live`
                value:
                  historyTimeToLive: 5
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if some of the request parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/rendered-form:
    get:
      tags:
      - Process Definition
      summary: Get Rendered Start Form
      description: |-
        Retrieves the rendered form for a process definition.
        This method can be used to get the HTML rendering of a
        [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: getRenderedStartForm
      parameters:
      - name: id
        in: path
        description: The id of the process definition to get the rendered start form
          for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/xhtml+xml:
              schema:
                type: string
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                x-content-type: application/xhtml+xml
              examples:
                example-1:
                  summary: Status 200 Response
                  description: |-
                    A `/process-definition/anId/rendered-form` HTML
                                                           GET response body providing the rendered (generated) form content.
                  value: |-
                    <form class="form-horizontal">
                                                      <div class="control-group">
                                                        <label class="control-label">Customer ID</label>
                                                        <div class="controls">
                                                          <input form-field type="string" name="customerId"></input>
                                                        </div>
                                                      </div>
                                                      <div class="control-group">
                                                        <label class="control-label">Amount</label>
                                                        <div class="controls">
                                                          <input form-field type="number" name="amount"></input>
                                                        </div>
                                                      </div>
                                                    </form>
        "400":
          description: |-
            Process definition has no form field metadata defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/restart:
    post:
      tags:
      - Process Definition
      summary: Restart Process Instance
      description: |-
        Restarts process instances that were canceled or terminated synchronously.
        Can also restart completed process instances.
        It will create a new instance using the original instance information.
        To execute the restart asynchronously, use the
        [Restart Process Instance Async](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/post-restart-process-instance-async/) method.

        For more information about the difference between synchronous and asynchronous execution,
        please refer to the related section of the
        [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-restart/#execution).
      operationId: restartProcessInstance
      parameters:
      - name: id
        in: path
        description: The id of the process definition of the process instances to
          restart.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestartProcessInstanceDto'
            examples:
              example-1:
                summary: Restarting one or more Process Instances with known processInstanceIds
                value:
                  instructions:
                  - type: startAfterActivity
                    activityId: aUserTask
                  processInstanceIds:
                  - aProcessInstance
                  - anotherProcessInstance
                  initialVariables: true
                  skipCustomListeners: true
                  withoutBusinessKey: true
              example-2:
                summary: Restarting one or more Process Instances using a historicProcessInstanceQuery
                value:
                  instructions:
                  - type: startAfterActivity
                    activityId: aUserTask
                  historicProcessInstanceQuery:
                    processDefinitionId: aProcessDefinitionId
                    processInstanceBusinessKey: businessKey
                  initialVariables: true
                  skipCustomListeners: true
                  withoutBusinessKey: true
      responses:
        "204":
          description: Request successful.
        "400":
          description: "In case following parameters are missing: `instructions`,\
            \ `activityId` or `transitionId`,\n`processInstanceIds` or `historicProcessInstanceQuery`,\
            \ an exception of type `InvalidRequestException` is returned. \nSee the\
            \ [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/restart-async:
    post:
      tags:
      - Process Definition
      summary: Restart Process Instance Async
      description: |-
        Restarts process instances that were canceled or terminated asynchronously.
        Can also restart completed process instances.
        It will create a new instance using the original instance information.
        To execute the restart asynchronously, use the
        [Restart Process Instance](https://docs.camunda.org/manual/7.14/reference/rest/process-definition/post-restart-process-instance-sync/) method.

        For more information about the difference between synchronous and asynchronous execution,
        please refer to the related section of the
        [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-restart/#execution).
      operationId: restartProcessInstanceAsyncOperation
      parameters:
      - name: id
        in: path
        description: The id of the process definition of the process instances to
          restart.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestartProcessInstanceDto'
            examples:
              example-1:
                summary: Restarting one or more Process Instances with known processInstanceIds
                value:
                  instructions:
                  - type: startAfterActivity
                    activityId: aUserTask
                  processInstanceIds:
                  - aProcessInstance
                  - anotherProcessInstance
                  initialVariables: true
                  skipCustomListeners: true
                  withoutBusinessKey: true
              example-2:
                summary: Restarting one or more Process Instances using a historicProcessInstanceQuery
                value:
                  instructions:
                  - type: startAfterActivity
                    activityId: aUserTask
                  historicProcessInstanceQuery:
                    processDefinitionId: aProcessDefinitionId
                    processInstanceBusinessKey: businessKey
                  initialVariables: true
                  skipCustomListeners: true
                  withoutBusinessKey: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
        "400":
          description: "In case following parameters are missing: `instructions`,\
            \ `activityId` or `transitionId`,\n`processInstanceIds` or `historicProcessInstanceQuery`,\n\
            an exception of type `InvalidRequestException` is returned. \nSee the\
            \ [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\n\
            for the error response format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/start:
    post:
      tags:
      - Process Definition
      summary: Start Instance
      description: |-
        Instantiates a given process definition.
        Process variables and business key may be supplied in the request body.
      operationId: startProcessInstance
      parameters:
      - name: id
        in: path
        description: The id of the process definition to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessInstanceDto'
            examples:
              example-1:
                summary: Starting a process instance at its default initial activity
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
              example-2:
                summary: Starting a process instance with variables in return
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
                  withVariablesInReturn: true
              example-3:
                summary: Starting a process instance at two specific activities
                value:
                  variables:
                    aProcessVariable:
                      value: aStringValue
                      type: String
                  businessKey: myBusinessKey
                  skipCustomListeners: true
                  startInstructions:
                  - type: startBeforeActivity
                    activityId: activityId
                    variables:
                      var:
                        value: aVariableValue
                        local: false
                        type: String
                  - type: startAfterActivity
                    activityId: anotherActivityId
                    variables:
                      varLocal:
                        value: anotherVariableValue
                        local: true
                        type: String
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceWithVariablesDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  description: Response for starting a process instance at its default
                    initial activity
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
                example-2:
                  summary: Status 200 Response 2
                  description: Response for starting a process instance with variables
                    in return
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/aProcInstId
                      rel: self
                    id: aProcInstId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
                    variables:
                      anotherVariable:
                        type: Boolean
                        value: true
                        valueInfo:
                          transient: true
                      aVariable:
                        type: String
                        value: aStringValue
                        valueInfo: {}
                example-3:
                  summary: Status 200 Response 3
                  description: Response for starting a process instance at two specific
                    activities
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
        "400":
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/startForm:
    get:
      tags:
      - Process Definition
      summary: Get Start Form Key
      description: |-
        Retrieves the key of the start form for a process definition.
        The form key corresponds to the `FormData#formKey` property in the engine.
      operationId: getStartForm
      parameters:
      - name: id
        in: path
        description: The id of the process definition to get the start form key for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  description: GET `process-definition/anId/startForm`
                  value:
                    key: aFormKey
                    contextPath: http://localhost:8080/my-process-application/
        "400":
          description: |-
            Process definition has no start form defined. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist.  See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/statistics:
    get:
      tags:
      - Process Definition
      summary: Get Activity Instance Statistics
      description: |-
        Retrieves runtime statistics of a given process definition, grouped by activities.
        These statistics include the number of running activity instances, optionally the number of failed jobs
        and also optionally the number of incidents either grouped by incident types or for a specific incident type.
        **Note**: This does not include historic data.
      operationId: getActivityStatistics
      parameters:
      - name: id
        in: path
        description: The id of the process definition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: failedJobs
        in: query
        description: Whether to include the number of failed jobs in the result or
          not. Valid values are `true` or `false`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidents
        in: query
        description: |-
          Valid values for this property are `true` or `false`.
          If this property has been set to `true` the result will include the corresponding number of incidents
          for each occurred incident type.
          If it is set to `false`, the incidents will not be included in the result.
          Cannot be used in combination with `incidentsForType`.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: incidentsForType
        in: query
        description: |-
          If this property has been set with any incident type (i.e., a string value) the result
          will only include the number of incidents for the assigned incident type.
          Cannot be used in combination with `incidents`.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityStatisticsResultDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /process-definition/aProcessDefinitionId/statistics?failedJobs=true
                  description: Request with Query Parameter `failedJobs=true`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 42
                    incidents: []
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 43
                    incidents: []
                example-2:
                  summary: GET /process-definition/aProcessDefinitionId/statistics?incidents=true
                  description: Request with Query Parameter `incidents=true`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 42
                    - incidentType: anIncident
                      incidentCount: 20
                  - id: anotherActivity
                    instances: 124
                    failedJobs: 0
                    incidents:
                    - incidentType: failedJob
                      incidentCount: 43
                    - incidentType: anIncident
                      incidentCount: 22
                    - incidentType: anotherIncident
                      incidentCount: 15
                example-3:
                  summary: GET /process-definition/aProcessDefinitionId/statistics?incidentsForType=anIncident
                  description: Request with Query Parameter `incidentsForType=anIncident`
                  value:
                  - id: anActivity
                    instances: 123
                    failedJobs: 0
                    incidents:
                    - incidentType: anIncident
                      incidentCount: 20
        "400":
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/submit-form:
    post:
      tags:
      - Process Definition
      summary: Submit Start Form
      description: |-
        Starts a process instance using a set of process variables and the business key.
        If the start event has Form Field Metadata defined, the process engine will perform backend validation
        for any form fields which have validators defined.
        See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: submitForm
      parameters:
      - name: id
        in: path
        description: The id of the process definition to submit the form for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessInstanceFormDto'
            examples:
              example-1:
                summary: POST `/process-definition/aProcessDefinitionId/submit-form`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
                  businessKey: myBusinessKey
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  description: POST `/process-definition/aProcessDefinitionId/submit-form`
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/rest-test/process-instance/anId
                      rel: self
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: myBusinessKey
                    ended: false
                    suspended: false
        "400":
          description: |-
            The instance could not be created due to an invalid variable value,
            for example if the value could not be parsed to an `Integer` value or
            the passed variable type is not supported.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The instance could not be created successfully.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/suspended:
    put:
      tags:
      - Process Definition
      summary: Activate/Suspend By Id
      description: Activates or suspends a given process definition by id.
      operationId: updateProcessDefinitionSuspensionStateById
      parameters:
      - name: id
        in: path
        description: The id of the process definition to activate or suspend.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: '**Note**: Unallowed properties are `processDefinitionId` and
          `processDefinitionKey`.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessDefinitionSuspensionStateDto'
            examples:
              example-1:
                summary: PUT `/process-definition/aProcessDefinitionId/suspended`
                value:
                  suspended: true
                  includeProcessInstances: true
                  executionDate: 2013-11-21T10:49:45T14:42:45
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if some of the query parameters are invalid,
            for example if the provided `executionDate` parameter doesn't have the expected format or
            if the `processDefinitionKey` parameter is `null`. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Process definition with given key does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-definition/{id}/xml:
    get:
      tags:
      - Process Definition
      summary: Get XML
      description: Retrieves the BPMN 2.0 XML of a process definition.
      operationId: getProcessDefinitionBpmn20Xml
      parameters:
      - name: id
        in: path
        description: The id of the process definition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDefinitionDiagramDto'
              examples:
                example-1:
                  summary: GET `/process-definition/id/aProcessDefinitionId/xml`
                  value:
                    id: anProcessDefinitionId
                    bpmn20Xml: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                      <definitions
                                               xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
                                               xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
                                               targetNamespace="Examples">
                                               <process id="oneTaskProcess" isExecutable="true">
                                                 <startEvent id="theStart" />
                                                 <sequenceFlow id="flow1" sourceRef="theStart" targetRef="theEnd" />
                                                 <endEvent id="theEnd" />
                                               </process>
                                             </definitions>
        "400":
          description: |-
            Returned if some of the query parameters are invalid.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            Process definition with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessDefinition
  /process-instance:
    get:
      tags:
      - Process Instance
      description: |-
        Queries for process instances that fulfill given parameters.
        Parameters may be static as well as dynamic runtime properties of process instances.
        The size of the result set can be retrieved by using the Get Instance Count method.
      operationId: getProcessInstances
      parameters:
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - instanceId
          - definitionKey
          - definitionId
          - tenantId
          - businessKey
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: processInstanceIds
        in: query
        description: Filter by a comma-separated list of process instance ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: businessKey
        in: query
        description: Filter by process instance business key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: businessKeyLike
        in: query
        description: Filter by process instance business key that the parameter is
          a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceId
        in: query
        description: Filter by case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Filter by the deployment the id belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKey
        in: query
        description: Filter by the key of the process definition the instances run
          on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: |-
          Filter by a comma-separated list of process definition keys.
          A process instance must have one of the given process definition keys.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyNotIn
        in: query
        description: |-
          Exclude instances by a comma-separated list of process definition keys.
          A process instance must not have one of the given process definition keys.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deploymentId
        in: query
        description: Filter by the deployment the id belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superProcessInstance
        in: query
        description: |-
          Restrict query to all process instances that are sub process instances of the given process instance.
          Takes a process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subProcessInstance
        in: query
        description: |-
          Restrict query to all process instances that have the given process instance as a sub process instance.
          Takes a process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superCaseInstance
        in: query
        description: |-
          Restrict query to all process instances that are sub process instances of the given case instance.
          Takes a case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subCaseInstance
        in: query
        description: |-
          Restrict query to all process instances that have the given case instance as a sub case instance.
          Takes a case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: |-
          Only include active process instances. Value may only be true,
          as false is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: suspended
        in: query
        description: |-
          Only include suspended process instances. Value may only be true,
          as false is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: withIncident
        in: query
        description: Filter by presence of incidents. Selects only process instances
          that have an incident.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: incidentId
        in: query
        description: Filter by the incident id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentType
        in: query
        description: |-
          Filter by the incident type.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessage
        in: query
        description: Filter by the incident message. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessageLike
        in: query
        description: Filter by the incident message that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: Filter by a comma-separated list of tenant ids. A process instance
          must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: Only include process instances which belong to no tenant.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: processDefinitionWithoutTenantId
        in: query
        description: Only include process instances which process definition has no
          tenant id.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: activityIdIn
        in: query
        description: |-
          Filter by a comma-separated list of activity ids.
          A process instance must currently wait in a leaf activity with one of the given activity ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rootProcessInstances
        in: query
        description: Restrict the query to all process instances that are top level
          process instances.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: leafProcessInstances
        in: query
        description: Restrict the query to all process instances that are leaf instances.
          (i.e. don't have any sub instances).
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: variables
        in: query
        description: |-
          Only include process instances that have variables with certain values.
          Variable filtering expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variableNamesIgnoreCase
        in: query
        description: |-
          Match all variable names in this query case-insensitively.
          If set to true variableName and variablename are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: variableValuesIgnoreCase
        in: query
        description: |-
          Match all variable values in this query case-insensitively.
          If set to true variableValue and variablevalue are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessInstanceDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for GET `/process-instance?variables=myVariable_eq_camunda,mySecondVariable_neq_aBadValue`
                  value:
                  - links: []
                    id: anId
                    definitionId: aProcDefId
                    businessKey: aKey
                    caseInstanceId: aCaseInstanceId
                    ended: false
                    suspended: false
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
    post:
      tags:
      - Process Instance
      description: |-
        Queries for process instances that fulfill given parameters through a JSON object.
        This method is slightly more powerful than the Get Instances method because
        it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
      operationId: queryProcessInstances
      parameters:
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceQueryDto'
            examples:
              example-1:
                summary: POST `/process-instance` Request Body 1
                value:
                  variables:
                  - name: myVariable
                    operator: eq
                    value: camunda
                  - name: mySecondVariable
                    operator: neq
                    value: 124
                  processDefinitionId: aProcessDefinitionId
                  sorting:
                  - sortBy: definitionKey
                    sortOrder: asc
                  - sortBy: instanceId
                    sortOrder: desc
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessInstanceDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                  - links: []
                    id: anId
                    definitionId: aProcessDefinitionId
                    businessKey: aKey
                    caseInstanceId: aCaseInstanceId
                    ended: false
                    suspended: false
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid,
            for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/count:
    get:
      tags:
      - Process Instance
      description: Queries for the number of process instances that fulfill given
        parameters.
      operationId: getProcessInstancesCount
      parameters:
      - name: processInstanceIds
        in: query
        description: Filter by a comma-separated list of process instance ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: businessKey
        in: query
        description: Filter by process instance business key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: businessKeyLike
        in: query
        description: Filter by process instance business key that the parameter is
          a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceId
        in: query
        description: Filter by case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Filter by the deployment the id belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKey
        in: query
        description: Filter by the key of the process definition the instances run
          on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: |-
          Filter by a comma-separated list of process definition keys.
          A process instance must have one of the given process definition keys.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyNotIn
        in: query
        description: |-
          Exclude instances by a comma-separated list of process definition keys.
          A process instance must not have one of the given process definition keys.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deploymentId
        in: query
        description: Filter by the deployment the id belongs to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superProcessInstance
        in: query
        description: |-
          Restrict query to all process instances that are sub process instances of the given process instance.
          Takes a process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subProcessInstance
        in: query
        description: |-
          Restrict query to all process instances that have the given process instance as a sub process instance.
          Takes a process instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superCaseInstance
        in: query
        description: |-
          Restrict query to all process instances that are sub process instances of the given case instance.
          Takes a case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subCaseInstance
        in: query
        description: |-
          Restrict query to all process instances that have the given case instance as a sub case instance.
          Takes a case instance id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: active
        in: query
        description: |-
          Only include active process instances. Value may only be true,
          as false is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: suspended
        in: query
        description: |-
          Only include suspended process instances. Value may only be true,
          as false is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: withIncident
        in: query
        description: Filter by presence of incidents. Selects only process instances
          that have an incident.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: incidentId
        in: query
        description: Filter by the incident id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentType
        in: query
        description: |-
          Filter by the incident type.
          See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
          for a list of incident types.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessage
        in: query
        description: Filter by the incident message. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: incidentMessageLike
        in: query
        description: Filter by the incident message that the parameter is a substring
          of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: Filter by a comma-separated list of tenant ids. A process instance
          must have one of the given tenant ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: Only include process instances which belong to no tenant.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: processDefinitionWithoutTenantId
        in: query
        description: Only include process instances which process definition has no
          tenant id.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: activityIdIn
        in: query
        description: |-
          Filter by a comma-separated list of activity ids.
          A process instance must currently wait in a leaf activity with one of the given activity ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rootProcessInstances
        in: query
        description: Restrict the query to all process instances that are top level
          process instances.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: leafProcessInstances
        in: query
        description: Restrict the query to all process instances that are leaf instances.
          (i.e. don't have any sub instances).
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: variables
        in: query
        description: |-
          Only include process instances that have variables with certain values.
          Variable filtering expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variableNamesIgnoreCase
        in: query
        description: |-
          Match all variable names in this query case-insensitively.
          If set to true variableName and variablename are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: variableValuesIgnoreCase
        in: query
        description: |-
          Match all variable values in this query case-insensitively.
          If set to true variableValue and variablevalue are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for GET `/process-instance/count?variables=myVariable_eq_camunda`
                  value:
                    count: 1
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example an invalid operator for variable comparison is used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
    post:
      tags:
      - Process Instance
      description: |-
        Queries for the number of process instances that fulfill the given parameters.
        This method takes the same message body as the Get Instances (POST) method and
        therefore it is slightly more powerful than the Get Instance Count method.
      operationId: queryProcessInstancesCount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceQueryDto'
            examples:
              example-1:
                summary: POST `/process-instance/count` Request Body 1
                value:
                  variables:
                  - name: myVariable
                    operator: eq
                    value: camunda
                  - name: mySecondVariable
                    operator: neq
                    value: 124
                  processDefinitionId: aProcessDefinitionId
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    count: 1
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/delete:
    post:
      tags:
      - Process Instance
      description: Deletes multiple process instances asynchronously (batch).
      operationId: deleteProcessInstancesAsyncOperation
      requestBody:
        description: '**Unallowed property**: `historicProcessInstanceQuery`'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProcessInstancesDto'
            examples:
              example-1:
                summary: POST `/process-instance/delete` Request Body 1
                value:
                  deleteReason: aReason
                  processInstanceIds:
                  - aProcess
                  - secondProcess
                  skipCustomListeners: true
                  skipSubprocesses: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor processInstanceQuery is present
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/delete-historic-query-based:
    post:
      tags:
      - Process Instance
      description: Deletes a set of process instances asynchronously (batch) based
        on a historic process instance query.
      operationId: deleteAsyncHistoricQueryBased
      requestBody:
        description: '**Unallowed property**: `processInstanceQuery`'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProcessInstancesDto'
            examples:
              example-1:
                summary: POST `/process-instance/delete-historic-query-based` Request
                  Body 1
                value:
                  deleteReason: aReason
                  historicProcessInstanceQuery:
                    startedBefore: 2017-04-28T11:24:37.765+0200
                  skipCustomListeners: true
                  skipSubprocesses: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 Response 1
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor historicProcessInstanceQuery is present
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/job-retries:
    post:
      tags:
      - Process Instance
      description: Create a batch to set retries of jobs associated with given processes
        asynchronously.
      operationId: setRetriesByProcess
      requestBody:
        description: |-
          Please note that if both processInstances and processInstanceQuery are provided,
          then the resulting execution will be performed on the union of these sets.
          **Unallowed property**: `historicProcessInstanceQuery`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetJobRetriesByProcessDto'
            examples:
              example-1:
                summary: POST `/process-instance/job-retries` Request Body 1
                value:
                  retries: 5
                  processInstances:
                  - aProcess
                  - secondProcess
                  processInstanceQuery:
                    processDefinitionId: aProcessDefinitionId
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    batchJobsPerSeed: 100
                    jobsCreated: 10
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    suspended: false
                    tenantId: aTenantId
                    createUserId: demo
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor processInstanceQuery is present.
            Or if the retry count is not specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/job-retries-historic-query-based:
    post:
      tags:
      - Process Instance
      description: Create a batch to set retries of jobs asynchronously based on a
        historic process instance query.
      operationId: setRetriesByProcessHistoricQueryBased
      requestBody:
        description: |-
          Please note that if both processInstances and historicProcessInstanceQuery are provided,
          then the resulting execution will be performed on the union of these sets.
          **Unallowed property**: `processInstanceQuery`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetJobRetriesByProcessDto'
            examples:
              example-1:
                summary: POST `/process-instance/job-retries-historic-query-based`
                  Request Body 1
                value:
                  retries: 5
                  historicProcessInstanceQuery:
                    startedBefore: 2017-04-28T11:24:37.769+0200
                  processInstances:
                  - aProcess
                  - secondProcess
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
        "400":
          description: |-
            Bad Request
            Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor historicProcessInstanceQuery is present.
            Or if the retry count is not specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/suspended:
    put:
      tags:
      - Process Instance
      description: |-
        Activates or suspends process instances by providing certain criteria:

        # Activate/Suspend Process Instance By Process Definition Id
        * `suspend`
        * `processDefinitionId`

        # Activate/Suspend Process Instance By Process Definition Key

        * `suspend`
        * `processDefinitionKey`
        * `processDefinitionTenantId`
        * `processDefinitionWithoutTenantId`

        # Activate/Suspend Process Instance In Group
        * `suspend`
        * `processInstanceIds`
        * `processInstanceQuery`
        * `historicProcessInstanceQuery`
      operationId: updateSuspensionState
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceSuspensionStateDto'
            examples:
              example-1:
                summary: PUT `/process-instance/suspended`
                description: Suspend Process Instance By Process Definition Id
                value:
                  processDefinitionId: aProcDefId
                  suspended: true
              example-2:
                summary: PUT `/process-instance/suspended`
                description: Suspend Process Instance By Process Definition Key
                value:
                  processDefinitionKey: aProcDefKey
                  suspended: true
              example-3:
                summary: PUT `/process-instance/suspended`
                description: Suspend Process Instance In Group
                value:
                  processInstanceIds:
                  - processInstanceId1
                  - processInstanceIdN
                  suspended: true
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Bad Request
            Returned if some of the request parameters are invalid,
            for example if the provided processDefinitionId or processDefinitionKey parameter is null.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/suspended-async:
    post:
      tags:
      - Process Instance
      description: |-
        Activates or suspends process instances asynchronously with a list of process instance ids,
        a process instance query, and/or a historical process instance query.
      operationId: updateSuspensionStateAsyncOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceSuspensionStateAsyncDto'
            examples:
              example-1:
                summary: POST `/process-instance/suspended-async`
                description: Suspend Process Instance In Batch
                value:
                  processInstanceIds:
                  - processInstanceId1
                  - processInstanceIdN
                  suspended: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
        "400":
          description: |-
            Bad Request
            Returned if some of the request parameters are invalid,
            for example if the provided processDefinitionId or processDefinitionKey parameter is null.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/variables-async:
    post:
      tags:
      - Process Instance
      description: Update or create runtime process variables in the root scope of
        process instances.
      operationId: setVariablesAsyncOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetVariablesAsyncDto'
            examples:
              example-1:
                summary: POST /process-instance/variables-async
                description: Set variables to process instances in a batch
                value:
                  processInstanceIds:
                  - b4d2ad98-7240-11e9-98b7-be5e0f7575b7
                  processInstanceQuery:
                    processDefinitionKey: my-process-definition-key
                  variables:
                    myVariableName:
                      value: myStringValue
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: 120b568d-724a-11e9-98b7-be5e0f7575b7
                    type: set-variables
                    totalJobs: 12
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: 120b5690-724a-11e9-98b7-be5e0f7575b7
                    monitorJobDefinitionId: 120b568f-724a-11e9-98b7-be5e0f7575b7
                    batchJobDefinitionId: 120b568e-724a-11e9-98b7-be5e0f7575b7
                    tenantId: accounting
                    suspended: false
        "400":
          description: |-
            Bad Request
            * The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
            the passed variable type is not supported
            * If none of `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery` is given
            * If no or an empty array of `variables` is given
            * If no process instance ids where found
            * If a transient variable is set
            * If the engine config flag `javaSerializationFormatEnabled` is `false` and a Java serialized variable is given
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            Returned if the user is not allowed to create the batch.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the
            error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/{id}:
    get:
      tags:
      - Process Instance
      summary: Get Process Instance
      description: Retrieves a process instance by id, according to the `ProcessInstance`
        interface in the engine.
      operationId: getProcessInstance
      parameters:
      - name: id
        in: path
        description: The id of the process instance to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInstanceDto'
              examples:
                example-1:
                  summary: GET `/process-instance/aProcessInstanceId`
                  value:
                    id: aProcessInstanceId
                    definitionId: aProcDefId
                    businessKey: aKey
                    caseInstanceId: aCaseInstanceId
                    ended: false
                    suspended: false
        "404":
          description: "Process instance with given id does not exist. See the \n\
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)\
            \ for the error response format. "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
    delete:
      tags:
      - Process Instance
      description: Deletes a running process instance by id.
      operationId: deleteProcessInstance
      parameters:
      - name: id
        in: path
        description: The id of the process instance to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: skipCustomListeners
        in: query
        description: If set to true, the custom listeners will be skipped.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: skipIoMappings
        in: query
        description: If set to true, the input/output mappings will be skipped.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: skipSubprocesses
        in: query
        description: If set to true, subprocesses related to deleted processes will
          be skipped.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: failIfNotExists
        in: query
        description: If set to false, the request will still be successful if the
          process id is not found.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "204":
          description: Request successful.
        "404":
          description: "Not found\nProcess instance with given id does not exist. "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/{id}/activity-instances:
    get:
      tags:
      - Process Instance
      description: Retrieves an Activity Instance (Tree) for a given process instance
        by id.
      operationId: getActivityInstanceTree
      parameters:
      - name: id
        in: path
        description: The id of the process instance for which the activity instance
          should be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityInstanceDto'
              examples:
                example-1:
                  summary: GET `/process-instance/aProcessInstanceId/activity-instances`
                  value:
                    id: eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                    activityId: invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6
                    activityType: processDefinition
                    processInstanceId: eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                    processDefinitionId: invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6
                    childActivityInstances:
                    - id: approveInvoice:eca89509-f70c-11e9-8777-e4a7a094a9d6
                      parentActivityInstanceId: eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                      activityId: approveInvoice
                      activityType: userTask
                      processInstanceId: eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                      processDefinitionId: invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6
                      childActivityInstances: []
                      childTransitionInstances: []
                      executionIds:
                      - eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                      activityName: Approve Invoice
                      incidentIds:
                      - 648d7e21-f71c-11e9-a725-e4a7a094a9d6
                      incidents:
                      - id: 648d7e21-f71c-11e9-a725-e4a7a094a9d6
                        activityId: AttachedTimerBoundaryEvent
                    childTransitionInstances: []
                    executionIds:
                    - eca75c6b-f70c-11e9-8777-e4a7a094a9d6
                    activityName: Invoice Receipt
        "500":
          description: Process instance with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/{id}/modification:
    post:
      tags:
      - Process Instance
      description: |-
        Submits a list of modification instructions to change a process instance's execution state.
        A modification instruction is one of the following:

        * Starting execution before an activity
        * Starting execution after an activity on its single outgoing sequence flow
        * Starting execution on a specific sequence flow
        * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity

        Instructions are executed immediately and in the order they are provided in this request's body.
        Variables can be provided with every starting instruction.

        The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
      operationId: modifyProcessInstance
      parameters:
      - name: id
        in: path
        description: The id of the process instance to modify.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceModificationDto'
            examples:
              example-1:
                summary: POST `/process-instance/aProcessInstanceId/modification`
                value:
                  skipCustomListeners: true
                  skipIoMappings: true
                  instructions:
                  - type: startBeforeActivity
                    activityId: activityId
                    variables:
                      var:
                        value: aVariableValue
                        local: false
                        type: String
                      varLocal:
                        value: anotherVariableValue
                        local: true
                        type: String
                  - type: cancel
                    activityInstanceId: anActivityInstanceId
                  annotation: Modified to resolve an error.
      responses:
        "204":
          description: Request successful.
        "400":
          description: At least one modification instruction misses required parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: The modification cannot be performed, for example because it
            starts a failing activity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/{id}/modification-async:
    post:
      tags:
      - Process Instance
      description: |-
        Submits a list of modification instructions to change a process instance's execution state async.
        A modification instruction is one of the following:

        * Starting execution before an activity
        * Starting execution after an activity on its single outgoing sequence flow
        * Starting execution on a specific sequence flow
        * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity

        Instructions are executed asynchronous and in the order they are provided in this request's body.
        Variables can be provided with every starting instruction.

        The exact semantics of modification can be read about in the
        [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-instance-modification/).
      operationId: modifyProcessInstanceAsyncOperation
      parameters:
      - name: id
        in: path
        description: The id of the process instance to modify.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInstanceModificationDto'
            examples:
              example-1:
                summary: POST `/process-instance/aProcessInstanceId/modification-async`
                value:
                  skipCustomListeners: true
                  skipIoMappings: true
                  instructions:
                  - type: startBeforeActivity
                    activityId: activityId
                  - type: cancel
                    activityInstanceId: anActivityInstanceId
                  annotation: Modified to resolve an error.
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: aBatchId
                    type: aBatchType
                    totalJobs: 10
                    jobsCreated: 10
                    batchJobsPerSeed: 100
                    invocationsPerBatchJob: 1
                    seedJobDefinitionId: aSeedJobDefinitionId
                    monitorJobDefinitionId: aMonitorJobDefinitionId
                    batchJobDefinitionId: aBatchJobDefinitionId
                    tenantId: aTenantId
                    suspended: false
                    createUserId: demo
        "400":
          description: |-
            Bad Request
            At least one modification instruction misses required parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            Forbidden
            If the user is not allowed to execute batches. See the Introduction for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "500":
          description: The modification cannot be performed, for example because it
            starts a failing activity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/{id}/suspended:
    put:
      tags:
      - Process Instance
      description: Activates or suspends a given process instance by id.
      operationId: updateSuspensionStateById
      parameters:
      - name: id
        in: path
        description: The id of the process instance to activate or suspend.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspensionStateDto'
            examples:
              example-1:
                summary: PUT `/process-instance/aProcessInstanceId/suspended`
                value:
                  suspended: true
      responses:
        "204":
          description: Request successful.
      x-swagger-router-controller: ProcessInstance
  /process-instance/{id}/variables:
    get:
      tags:
      - Process Instance
      description: Retrieves all variables of a given process instance by id.
      operationId: getProcessInstanceVariables
      parameters:
      - name: id
        in: path
        description: The id of the process instance to retrieve the variables from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: deserializeValue
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false
          when developing web applications that are independent of the Java process applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/process-instance/aProcessInstanceId/variables`
                  value:
                    aVariableKey:
                      value:
                        prop1: a
                        prop2: b
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
                example-2:
                  summary: GET `/process-instance/aProcessInstanceId/variables?deserializeValue=false`
                  value:
                    aVariableKey:
                      value: ab
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
        "500":
          description: Process instance with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
    post:
      tags:
      - Process Instance
      description: |-
        Updates or deletes the variables of a process instance by id. Updates precede deletions.
        So, if a variable is updated AND deleted, the deletion overrides the update.
      operationId: modifyProcessInstanceVariables
      parameters:
      - name: id
        in: path
        description: The id of the process instance to set variables for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchVariablesDto'
            examples:
              example-1:
                summary: POST `/process-instance/aProcessInstanceId/variables`
                description: 'Status 204 Response: No content.'
                value:
                  modifications:
                    aVariable:
                      value: aValue
                      type: String
                    anotherVariable:
                      value: 42
                      type: Integer
                  deletions:
                  - aThirdVariable
                  - FourthVariable
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Bad Request
            The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
            the passed variable type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: Update or delete could not be executed, for example because
            the process instance does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /process-instance/{id}/variables/{varName}:
    get:
      tags:
      - Process Instance
      description: Retrieves a variable of a given process instance by id.
      operationId: getProcessInstanceVariable
      parameters:
      - name: id
        in: path
        description: The id of the process instance to retrieve the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: deserializeValue
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false
          when developing web applications that are independent of the Java process applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableValueDto'
              examples:
                example-1:
                  summary: GET `/process-instance/aProcessInstanceId/variables/myObject123`
                  value:
                    value:
                      prop1: a
                      prop2: b
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
                example-2:
                  summary: GET `/process-instance/aProcessInstanceId/variables/myObject123?deserializeValue=false`
                  value:
                    value: ab
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
        "400":
          description: |-
            Bad Request
            Variable with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
    put:
      tags:
      - Process Instance
      description: Sets a variable of a given process instance by id.
      operationId: setProcessInstanceVariable
      parameters:
      - name: id
        in: path
        description: The id of the process instance to set the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to set.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableValueDto'
            examples:
              example-1:
                summary: PUT /process-instance/aProcessInstanceId/variables/aVarName
                description: Status 204. No content.
                value:
                  value: someValue
                  type: String
              example-2:
                summary: PUT /process-instance/aProcessInstanceId/variables/aVarName
                description: Status 204. No content.
                value:
                  value: ab
                  type: Object
                  valueInfo:
                    objectTypeName: com.example.MyObject
                    serializationDataFormat: application/xml
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Bad Request
            The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
            the passed variable type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
    delete:
      tags:
      - Process Instance
      description: Deletes a variable of a process instance by id.
      operationId: deleteProcessInstanceVariable
      parameters:
      - name: id
        in: path
        description: The id of the process instance to delete the variable from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
      x-swagger-router-controller: ProcessInstance
  /process-instance/{id}/variables/{varName}/data:
    get:
      tags:
      - Process Instance
      description: |-
        Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name.
        Applicable for byte array or file Process Variables.
      operationId: getProcessInstanceVariableBinary
      parameters:
      - name: id
        in: path
        description: The id of the process instance to retrieve the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |-
            Request successful.
                    For binary variables or files without any MIME type information, a byte stream is returned.
                    File variables with MIME type information are returned as the saved type.
                    Additionally, for file variables the Content-Disposition header will be set.
          content:
            application/octet-stream:
              schema:
                type: string
                description: For binary variables or files without any MIME type information,
                  a byte stream is returned.
                format: binary
                x-content-type: application/octet-stream
              examples:
                example-1:
                  summary: 'binary variable: Status 200'
                  value: 'Content-Type: application/octet-stream'
            text/plain:
              schema:
                type: string
                description: |-
                  File variables with MIME type information are returned as the saved type.
                              Additionally, for file variables the Content-Disposition header will be set.
                format: binary
              examples:
                example-1:
                  summary: 'file variable: Status 200'
                  value: 'Content-Type: text/plain; charset=UTF-8. Content-Disposition:
                    attachment; filename="someFile.txt"'
        "400":
          description: |-
            Bad Request
            A Process Variable with the given id exists but does not serialize as binary data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: "Not Found\nA Process Variable with the given id does not exist. "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
    post:
      tags:
      - Process Instance
      description: Sets the serialized value for a binary variable or the binary value
        for a file variable.
      operationId: setProcessInstanceVariableBinary
      parameters:
      - name: id
        in: path
        description: The id of the process instance to retrieve the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: 'For binary variables a multipart form submit with the following
          parts:'
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiFormVariableBinaryDto'
            examples:
              example-1:
                summary: POST `/process-instance/aProcessInstanceId/variables/aVarName/data`
                  (1)
                description: Post binary content of a byte array variable.
                value: "\n                        ```\n                        ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"image.png\"\n                        Content-Type:\
                  \ application/octet-stream\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     Bytes\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
              example-2:
                summary: POST `/process-instance/aProcessInstanceId/variables/aVarName/data`
                  (2)
                description: Post the JSON serialization of a Java Class (**deprecated**).
                value: "\n                        ```\n                        ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  type\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     java.util.ArrayList<java.lang.Object>\n  \
                  \                      ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"\n                        Content-Type: application/json;\
                  \ charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ 8bit\n\n                        [\"foo\",\"bar\"]\n          \
                  \              ------------------------------1e838f8f632a--\n  \
                  \                      ```\n                      "
              example-3:
                summary: POST `/process-instance/aProcessInstanceId/variables/aVarName/data`
                  (3)
                description: Post a text file.
                value: "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"myFile.txt\"\n                        Content-Type:\
                  \ text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     File\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Bad Request
            The variable value or type is invalid, for example if no filename is set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: ProcessInstance
  /schema/log:
    get:
      tags:
      - Schema Log
      description: Queries for schema log entries that fulfill given parameters.
      operationId: getSchemaLog
      parameters:
      - name: version
        in: query
        description: Only return schema log entries with a specific version.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: |-
            Request successful.
            **Note**: In order to get any results a user of group `camunda-admin` must
            be authenticated.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaLogEntryDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response
                  description: The Response content of a status 200
                  value:
                  - id: "0"
                    version: 7.11.0
                    timestamp: 2019-05-13T09:07:11.751+0200
                  - id: "1"
                    version: 7.11.1
                    timestamp: 2019-06-1T17:22:05.123+0200
      x-swagger-router-controller: SchemaLog
    post:
      tags:
      - Schema Log
      description: Queries for schema log entries that fulfill given parameters.
      operationId: querySchemaLog
      parameters:
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaLogQueryDto'
            examples:
              example-1:
                summary: POST /schema/log
                description: The content of the Request Body
                value:
                  version: 7.11.0
                  sortBy: timestamp
                  sortOrder: asc
      responses:
        "200":
          description: |-
            Request successful.
            **Note**: In order to get any results a user of group camunda-admin must be
            authenticated.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaLogEntryDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response
                  description: The Response content of a status 200
                  value:
                  - id: "0"
                    version: 7.11.0
                    timestamp: 2019-05-13T09:07:11.751+0200
      x-swagger-router-controller: SchemaLog
  /signal:
    post:
      tags:
      - Signal
      description: |-
        A signal is an event of global scope (broadcast semantics) and is delivered to all
        active handlers. Internally this maps to the engine's signal event received builder
        method `RuntimeService#createSignalEvent()`. For more information about the signal
        behavior, see the [Signal Events](https://docs.camunda.org/manual/7.14/reference/bpmn20/events/signal-events/)
        section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.14/reference/bpmn20/).
      operationId: throwSignal
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignalDto'
            examples:
              examle-1:
                summary: POST /signal
                description: The content of the Request Body
                value:
                  name: policy_conditions_changed
                  variables:
                    newTimePeriodInMonth:
                      value: 24
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if:

            * no name was given
            * the variable value or type is invalid, for example if the value could not be
            parsed to an integer value or the passed variable type is not supported
            * a tenant id and an execution id is specified.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the
            error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            Returned if the user is not allowed to throw a signal event.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the
            error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "500":
          description: |-
            Returned if a single execution is specified and no such execution exists or has not
            subscribed to the signal.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the
            error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Signal
  /task:
    get:
      tags:
      - Task
      description: |-
        Queries for tasks that fulfill a given filter. The size of the result set can be
        retrieved by using the Get Task Count method.

        **Security Consideration:** There are several query parameters (such as
        assigneeExpression) for specifying an EL expression. These are disabled by default to
        prevent remote code execution. See the section on
        [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/)
        for custom code in the user guide for details.
      operationId: getTasks
      parameters:
      - name: processInstanceId
        in: query
        description: Restrict to tasks that belong to process instances with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceIdIn
        in: query
        description: Restrict to tasks that belong to process instances with the given
          ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKey
        in: query
        description: Restrict to tasks that belong to process instances with the given
          business key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyExpression
        in: query
        description: "Restrict to tasks that belong to process instances with the\
          \ given business key which \nis described by an expression. See the \n[user\
          \ guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\n\
          for more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyIn
        in: query
        description: "Restrict to tasks that belong to process instances with one\
          \ of the give business keys. \nThe keys need to be in a comma-separated\
          \ list."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyLike
        in: query
        description: "Restrict to tasks that have a process instance business key\
          \ that has the parameter \nvalue as a substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyLikeExpression
        in: query
        description: "Restrict to tasks that have a process instance business key\
          \ that has the parameter \nvalue as a substring and is described by an expression.\
          \ See the\n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Restrict to tasks that belong to a process definition with the
          given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKey
        in: query
        description: Restrict to tasks that belong to a process definition with the
          given key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: "Restrict to tasks that belong to a process definition with one\
          \ of the given keys. The \nkeys need to be in a comma-separated list."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionName
        in: query
        description: Restrict to tasks that belong to a process definition with the
          given name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionNameLike
        in: query
        description: "Restrict to tasks that have a process definition name that has\
          \ the parameter value as \na substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: executionId
        in: query
        description: Restrict to tasks that belong to an execution with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceId
        in: query
        description: Restrict to tasks that belong to case instances with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceBusinessKey
        in: query
        description: Restrict to tasks that belong to case instances with the given
          business key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceBusinessKeyLike
        in: query
        description: "Restrict to tasks that have a case instance business key that\
          \ has the parameter value \nas a substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseDefinitionId
        in: query
        description: Restrict to tasks that belong to a case definition with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseDefinitionKey
        in: query
        description: Restrict to tasks that belong to a case definition with the given
          key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseDefinitionName
        in: query
        description: Restrict to tasks that belong to a case definition with the given
          name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseDefinitionNameLike
        in: query
        description: "Restrict to tasks that have a case definition name that has\
          \ the parameter value as a \nsubstring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseExecutionId
        in: query
        description: Restrict to tasks that belong to a case execution with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityInstanceIdIn
        in: query
        description: "Only include tasks which belong to one of the passed and comma-separated\
          \ activity \ninstance ids."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: "Only include tasks which belong to one of the passed and comma-separated\
          \ \ntenant ids."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: "Only include tasks which belong to no tenant. Value may only\
          \ be `true`, \nas `false` is the default behavior."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: assignee
        in: query
        description: Restrict to tasks that the given user is assigned to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigneeExpression
        in: query
        description: "Restrict to tasks that the user described by the given expression\
          \ is assigned to. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigneeLike
        in: query
        description: "Restrict to tasks that have an assignee that has the parameter\
          \ \nvalue as a substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigneeLikeExpression
        in: query
        description: "Restrict to tasks that have an assignee that has the parameter\
          \ value described by the \ngiven expression as a substring. See the \n[user\
          \ guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigneeIn
        in: query
        description: "Only include tasks which are assigned to one of the passed and\
          \ \ncomma-separated user ids."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: owner
        in: query
        description: Restrict to tasks that the given user owns.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ownerExpression
        in: query
        description: "Restrict to tasks that the user described by the given expression\
          \ owns. See the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateGroup
        in: query
        description: Only include tasks that are offered to the given group.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateGroupExpression
        in: query
        description: "Only include tasks that are offered to the group described by\
          \ the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateUser
        in: query
        description: Only include tasks that are offered to the given user or to one
          of his groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateUserExpression
        in: query
        description: "Only include tasks that are offered to the user described by\
          \ the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: includeAssignedTasks
        in: query
        description: "Also include tasks that are assigned to users in candidate queries.\
          \ Default is to only \ninclude tasks that are not assigned to any user if\
          \ you query by candidate user or\ngroup(s)."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: involvedUser
        in: query
        description: "Only include tasks that the given user is involved in. A user\
          \ is involved in a task if \nan identity link exists between task and user\
          \ (e.g., the user is the assignee)."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: involvedUserExpression
        in: query
        description: |-
          Only include tasks that the user described by the given expression is involved in.
          A user is involved in a task if an identity link exists between task and user
          (e.g., the user is the assignee). See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigned
        in: query
        description: If set to `true`, restricts the query to all tasks that are assigned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: unassigned
        in: query
        description: If set to `true`, restricts the query to all tasks that are unassigned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: taskDefinitionKey
        in: query
        description: Restrict to tasks that have the given key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: taskDefinitionKeyIn
        in: query
        description: |-
          Restrict to tasks that have one of the given keys. The keys need to be in a
          comma-separated list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: taskDefinitionKeyLike
        in: query
        description: Restrict to tasks that have a key that has the parameter value
          as a substring.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Restrict to tasks that have the given name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameNotEqual
        in: query
        description: Restrict to tasks that do not have the given name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameLike
        in: query
        description: Restrict to tasks that have a name with the given parameter value
          as substring.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameNotLike
        in: query
        description: |-
          Restrict to tasks that do not have a name with the given parameter
          value as substring.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: description
        in: query
        description: Restrict to tasks that have the given description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: descriptionLike
        in: query
        description: |-
          Restrict to tasks that have a description that has the parameter
          value as a substring.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: priority
        in: query
        description: Restrict to tasks that have the given priority.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxPriority
        in: query
        description: Restrict to tasks that have a lower or equal priority.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: minPriority
        in: query
        description: Restrict to tasks that have a higher or equal priority.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: dueDate
        in: query
        description: |-
          Restrict to tasks that are due on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueDateExpression
        in: query
        description: |-
          Restrict to tasks that are due on the date described by the given expression. See the
          [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueAfter
        in: query
        description: |-
          Restrict to tasks that are due after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.435+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueAfterExpression
        in: query
        description: |-
          Restrict to tasks that are due after the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueBefore
        in: query
        description: |-
          Restrict to tasks that are due before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.243+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueBeforeExpression
        in: query
        description: |-
          Restrict to tasks that are due before the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpDate
        in: query
        description: |-
          Restrict to tasks that have a followUp date on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.342+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpDateExpression
        in: query
        description: |-
          Restrict to tasks that have a followUp date on the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpAfter
        in: query
        description: |-
          Restrict to tasks that have a followUp date after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the
          date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.542+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpAfterExpression
        in: query
        description: |-
          Restrict to tasks that have a followUp date after the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpBefore
        in: query
        description: |-
          Restrict to tasks that have a followUp date before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the
          date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.234+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpBeforeExpression
        in: query
        description: |-
          Restrict to tasks that have a followUp date before the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpBeforeOrNotExistent
        in: query
        description: |-
          Restrict to tasks that have no followUp date or a followUp date before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The
          typical use case is to query all `active` tasks for a user for a given date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpBeforeOrNotExistentExpression
        in: query
        description: |-
          Restrict to tasks that have no followUp date or a followUp date before the date
          described by the given expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdOn
        in: query
        description: |-
          Restrict to tasks that were created on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdOnExpression
        in: query
        description: |-
          Restrict to tasks that were created on the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdAfter
        in: query
        description: |-
          Restrict to tasks that were created after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdAfterExpression
        in: query
        description: |-
          Restrict to tasks that were created after the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdBefore
        in: query
        description: |-
          Restrict to tasks that were created before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdBeforeExpression
        in: query
        description: |-
          Restrict to tasks that were created before the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: delegationState
        in: query
        description: |-
          Restrict to tasks that are in the given delegation state. Valid values are
          `PENDING` and `RESOLVED`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - PENDING
          - RESOLVED
      - name: candidateGroups
        in: query
        description: |-
          Restrict to tasks that are offered to any of the given candidate groups. Takes a
          comma-separated list of group names, so for example `developers,support,sales`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateGroupsExpression
        in: query
        description: |-
          Restrict to tasks that are offered to any of the candidate groups described by the
          given expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to
          `java.util.List` of Strings.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withCandidateGroups
        in: query
        description: |-
          Only include tasks which have a candidate group. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: withoutCandidateGroups
        in: query
        description: |-
          Only include tasks which have no candidate group. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: withCandidateUsers
        in: query
        description: |-
          Only include tasks which have a candidate user. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: withoutCandidateUsers
        in: query
        description: |-
          Only include tasks which have no candidate users. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: active
        in: query
        description: |-
          Only include active tasks. Value may only be `true`, as `false`
          is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: suspended
        in: query
        description: |-
          Only include suspended tasks. Value may only be `true`, as
          `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: taskVariables
        in: query
        description: |-
          Only include tasks that have variables with certain values. Variable filtering
          expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processVariables
        in: query
        description: "Only include tasks that belong to process instances that have\
          \ variables with certain \nvalues. Variable filtering expressions are comma-separated\
          \ and are structured as\nfollows:\n\nA valid parameter value has the form\
          \ `key_operator_value`. `key` is the variable name,\n`operator` is the comparison\
          \ operator to be used and `value` the variable value.\n\n**Note**: Values\
          \ are always treated as String objects on server side.\n\nValid `operator`\
          \ values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n\
          `gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than\
          \ or equal to;\n`like`.\n`key` and `value` may not contain underscore or\
          \ comma characters."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceVariables
        in: query
        description: |-
          Only include tasks that belong to case instances that have variables with certain
          values. Variable filtering expressions are comma-separated and are structured as
          follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variableNamesIgnoreCase
        in: query
        description: |-
          Match all variable names in this query case-insensitively. If set
          `variableName` and `variablename` are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: variableValuesIgnoreCase
        in: query
        description: |-
          Match all variable values in this query case-insensitively. If set
          `variableValue` and `variablevalue` are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: parentTaskId
        in: query
        description: Restrict query to all tasks that are sub tasks of the given task.
          Takes a task id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - instanceId
          - caseInstanceId
          - dueDate
          - executionId
          - caseExecutionId
          - assignee
          - created
          - description
          - id
          - name
          - nameCaseInsensitive
          - priority
          - processVariable
          - executionVariable
          - taskVariable
          - caseExecutionVariable
          - caseInstanceVariable
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 response
                  description: Response for GET `/task?assignee=anAssignee&delegationState=RESOLVED&maxPriority=50`
                  value:
                  - id: anId
                    name: aName
                    assignee: anAssignee
                    created: 2013-01-23T13:42:42.657+0200
                    due: 2013-01-23T13:49:42.323+0200
                    'followUp:': 2013-01-23T13:44:42.987+0200
                    delegationState: RESOLVED
                    description: aDescription
                    executionId: anExecution
                    owner: anOwner
                    parentTaskId: aParentId
                    priority: 42
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    caseDefinitionId: aCaseDefId
                    caseInstanceId: aCaseInstId
                    caseExecutionId: aCaseExecution
                    taskDefinitionKey: aTaskDefinitionKey
                    suspended: false
                    formKey: aFormKey
                    tenantId: aTenantId
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder`
            parameter is supplied, but no `sortBy`, or if an invalid operator for variable
            comparison is used. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
    post:
      tags:
      - Task
      description: |-
        Queries for tasks that fulfill a given filter. This method is slightly more powerful
        than the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/get-query/) method because it
        allows filtering by multiple process or task variables of types `String`, `Number`
        or `Boolean`. The size of the result set can be retrieved by using the
        [Get Task Count (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query-count/) method.

        **Security Consideration**:
        There are several parameters (such as `assigneeExpression`) for specifying an EL
        expression. These are disabled by default to prevent remote code execution. See the
        section on
        [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/)
        in the user guide for details.
      operationId: queryTasks
      parameters:
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskQueryDto'
            examples:
              example-1:
                summary: POST `/task` Request Body 1
                value:
                  taskVariables:
                  - name: varName
                    value: varValue
                    operator: eq
                  - name: anotherVarName
                    value: 30
                    operator: neq
                  processInstanceBusinessKeyIn: aBusinessKey,anotherBusinessKey
                  assigneeIn: anAssignee,anotherAssignee
                  priority: 10
                  sorting:
                  - sortBy: dueDate
                    sortOrder: asc
                  - sortBy: processVariable
                    sortOrder: desc
                    parameters:
                      variable: orderId
                      type: String
              example-2:
                summary: POST `/task` Request Body 2
                description: 'Logical query: assignee = "John Munda" AND (name = "Approve
                  Invoice" OR priority = 5) AND (suspended = false OR taskDefinitionKey
                  = "approveInvoice")'
                value:
                  assignee: John Munda
                  orQueries:
                  - name: Approve Invoice
                    priority: 5
                  - suspended: false
                    taskDefinitionKey: approveInvoice
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 response 1
                  value:
                  - id: anId
                    name: aName
                    assignee: anAssignee
                    created: 2013-01-23T13:42:42.453+0200
                    due: 2013-01-23T13:49:42.342+0200
                    'followUp:': 2013-01-23T13:44:42.546+0200
                    delegationState: RESOLVED
                    description: aDescription
                    executionId: anExecution
                    owner: anOwner
                    parentTaskId: aParentId
                    priority: 10
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    caseDefinitionId: aCaseDefId
                    caseInstanceId: aCaseInstId
                    caseExecutionId: aCaseExecution
                    taskDefinitionKey: aTaskDefinitionKey
                    suspended: false
                    formKey: aFormKey
                    tenantId: aTenantId
                example-2:
                  summary: Status 200 response 2
                  value:
                  - id: 349fffa8-6571-11e7-9a44-d6940f5ef88d
                    name: Approve Invoice
                    assignee: John Munda
                    created: 2017-07-10T15:10:54.670+0200
                    due: 2017-07-17T15:10:54.670+0200
                    description: Approve the invoice (or not).
                    executionId: 349f8a5c-6571-11e7-9a44-d6940f5ef88d
                    priority: 50
                    processDefinitionId: invoice:1:2c8d8057-6571-11e7-9a44-d6940f5ef88d
                    processInstanceId: 349f8a5c-6571-11e7-9a44-d6940f5ef88d
                    taskDefinitionKey: approveInvoice
                    suspended: false
                    formKey: embedded:app:develop/invoice-forms/approve-invoice.html
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder`
            parameter is supplied, but no `sortBy`, or if an invalid operator for variable
            comparison is used. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/count:
    get:
      tags:
      - Task
      description: |-
        Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size
        of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.14/reference/rest/task/) method.

        **Security Consideration:** There are several query parameters (such as
        assigneeExpression) for specifying an EL expression. These are disabled by default to
        prevent remote code execution. See the section on
        [security considerations](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/)
        for custom code in the user guide for details.
      operationId: getTasksCount
      parameters:
      - name: processInstanceId
        in: query
        description: Restrict to tasks that belong to process instances with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceIdIn
        in: query
        description: Restrict to tasks that belong to process instances with the given
          ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKey
        in: query
        description: Restrict to tasks that belong to process instances with the given
          business key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyExpression
        in: query
        description: "Restrict to tasks that belong to process instances with the\
          \ given business key which \nis described by an expression. See the \n[user\
          \ guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\n\
          for more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyIn
        in: query
        description: "Restrict to tasks that belong to process instances with one\
          \ of the give business keys. \nThe keys need to be in a comma-separated\
          \ list."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyLike
        in: query
        description: "Restrict to tasks that have a process instance business key\
          \ that has the parameter \nvalue as a substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processInstanceBusinessKeyLikeExpression
        in: query
        description: "Restrict to tasks that have a process instance business key\
          \ that has the parameter \nvalue as a substring and is described by an expression.\
          \ See the\n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionId
        in: query
        description: Restrict to tasks that belong to a process definition with the
          given id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKey
        in: query
        description: Restrict to tasks that belong to a process definition with the
          given key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionKeyIn
        in: query
        description: "Restrict to tasks that belong to a process definition with one\
          \ of the given keys. The \nkeys need to be in a comma-separated list."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionName
        in: query
        description: Restrict to tasks that belong to a process definition with the
          given name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processDefinitionNameLike
        in: query
        description: "Restrict to tasks that have a process definition name that has\
          \ the parameter value as \na substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: executionId
        in: query
        description: Restrict to tasks that belong to an execution with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceId
        in: query
        description: Restrict to tasks that belong to case instances with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceBusinessKey
        in: query
        description: Restrict to tasks that belong to case instances with the given
          business key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceBusinessKeyLike
        in: query
        description: "Restrict to tasks that have a case instance business key that\
          \ has the parameter value \nas a substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseDefinitionId
        in: query
        description: Restrict to tasks that belong to a case definition with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseDefinitionKey
        in: query
        description: Restrict to tasks that belong to a case definition with the given
          key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseDefinitionName
        in: query
        description: Restrict to tasks that belong to a case definition with the given
          name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseDefinitionNameLike
        in: query
        description: "Restrict to tasks that have a case definition name that has\
          \ the parameter value as a \nsubstring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseExecutionId
        in: query
        description: Restrict to tasks that belong to a case execution with the given
          id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: activityInstanceIdIn
        in: query
        description: "Only include tasks which belong to one of the passed and comma-separated\
          \ activity \ninstance ids."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantIdIn
        in: query
        description: "Only include tasks which belong to one of the passed and comma-separated\
          \ \ntenant ids."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withoutTenantId
        in: query
        description: "Only include tasks which belong to no tenant. Value may only\
          \ be `true`, \nas `false` is the default behavior."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: assignee
        in: query
        description: Restrict to tasks that the given user is assigned to.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigneeExpression
        in: query
        description: "Restrict to tasks that the user described by the given expression\
          \ is assigned to. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigneeLike
        in: query
        description: "Restrict to tasks that have an assignee that has the parameter\
          \ \nvalue as a substring."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigneeLikeExpression
        in: query
        description: "Restrict to tasks that have an assignee that has the parameter\
          \ value described by the \ngiven expression as a substring. See the \n[user\
          \ guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigneeIn
        in: query
        description: "Only include tasks which are assigned to one of the passed and\
          \ \ncomma-separated user ids."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: owner
        in: query
        description: Restrict to tasks that the given user owns.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ownerExpression
        in: query
        description: "Restrict to tasks that the user described by the given expression\
          \ owns. See the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateGroup
        in: query
        description: Only include tasks that are offered to the given group.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateGroupExpression
        in: query
        description: "Only include tasks that are offered to the group described by\
          \ the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateUser
        in: query
        description: Only include tasks that are offered to the given user or to one
          of his groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateUserExpression
        in: query
        description: "Only include tasks that are offered to the user described by\
          \ the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
          \ \nfor more information on available functions."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: includeAssignedTasks
        in: query
        description: "Also include tasks that are assigned to users in candidate queries.\
          \ Default is to only \ninclude tasks that are not assigned to any user if\
          \ you query by candidate user or\ngroup(s)."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: involvedUser
        in: query
        description: "Only include tasks that the given user is involved in. A user\
          \ is involved in a task if \nan identity link exists between task and user\
          \ (e.g., the user is the assignee)."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: involvedUserExpression
        in: query
        description: |-
          Only include tasks that the user described by the given expression is involved in.
          A user is involved in a task if an identity link exists between task and user
          (e.g., the user is the assignee). See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: assigned
        in: query
        description: If set to `true`, restricts the query to all tasks that are assigned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: unassigned
        in: query
        description: If set to `true`, restricts the query to all tasks that are unassigned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: taskDefinitionKey
        in: query
        description: Restrict to tasks that have the given key.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: taskDefinitionKeyIn
        in: query
        description: |-
          Restrict to tasks that have one of the given keys. The keys need to be in a
          comma-separated list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: taskDefinitionKeyLike
        in: query
        description: Restrict to tasks that have a key that has the parameter value
          as a substring.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Restrict to tasks that have the given name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameNotEqual
        in: query
        description: Restrict to tasks that do not have the given name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameLike
        in: query
        description: Restrict to tasks that have a name with the given parameter value
          as substring.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nameNotLike
        in: query
        description: |-
          Restrict to tasks that do not have a name with the given parameter
          value as substring.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: description
        in: query
        description: Restrict to tasks that have the given description.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: descriptionLike
        in: query
        description: |-
          Restrict to tasks that have a description that has the parameter
          value as a substring.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: priority
        in: query
        description: Restrict to tasks that have the given priority.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxPriority
        in: query
        description: Restrict to tasks that have a lower or equal priority.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: minPriority
        in: query
        description: Restrict to tasks that have a higher or equal priority.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: dueDate
        in: query
        description: |-
          Restrict to tasks that are due on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.546+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueDateExpression
        in: query
        description: |-
          Restrict to tasks that are due on the date described by the given expression. See the
          [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueAfter
        in: query
        description: |-
          Restrict to tasks that are due after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.435+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueAfterExpression
        in: query
        description: |-
          Restrict to tasks that are due after the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueBefore
        in: query
        description: |-
          Restrict to tasks that are due before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.243+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: dueBeforeExpression
        in: query
        description: |-
          Restrict to tasks that are due before the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpDate
        in: query
        description: |-
          Restrict to tasks that have a followUp date on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date
          must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.342+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpDateExpression
        in: query
        description: |-
          Restrict to tasks that have a followUp date on the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpAfter
        in: query
        description: |-
          Restrict to tasks that have a followUp date after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the
          date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.542+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpAfterExpression
        in: query
        description: |-
          Restrict to tasks that have a followUp date after the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpBefore
        in: query
        description: |-
          Restrict to tasks that have a followUp date before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the
          date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
          `2013-01-23T14:42:45.234+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpBeforeExpression
        in: query
        description: |-
          Restrict to tasks that have a followUp date before the date described by the given
          expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpBeforeOrNotExistent
        in: query
        description: |-
          Restrict to tasks that have no followUp date or a followUp date before the given date.
          By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The
          typical use case is to query all `active` tasks for a user for a given date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: followUpBeforeOrNotExistentExpression
        in: query
        description: |-
          Restrict to tasks that have no followUp date or a followUp date before the date
          described by the given expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdOn
        in: query
        description: |-
          Restrict to tasks that were created on the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
          the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdOnExpression
        in: query
        description: |-
          Restrict to tasks that were created on the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdAfter
        in: query
        description: |-
          Restrict to tasks that were created after the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdAfterExpression
        in: query
        description: |-
          Restrict to tasks that were created after the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdBefore
        in: query
        description: |-
          Restrict to tasks that were created before the given date. By
          [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the
          format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: createdBeforeExpression
        in: query
        description: |-
          Restrict to tasks that were created before the date described by the given expression.
          See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to a
          `java.util.Date` or `org.joda.time.DateTime` object.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: delegationState
        in: query
        description: |-
          Restrict to tasks that are in the given delegation state. Valid values are
          `PENDING` and `RESOLVED`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - PENDING
          - RESOLVED
      - name: candidateGroups
        in: query
        description: |-
          Restrict to tasks that are offered to any of the given candidate groups. Takes a
          comma-separated list of group names, so for example `developers,support,sales`.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: candidateGroupsExpression
        in: query
        description: |-
          Restrict to tasks that are offered to any of the candidate groups described by the
          given expression. See the
          [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
          for more information on available functions. The expression must evaluate to
          `java.util.List` of Strings.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withCandidateGroups
        in: query
        description: |-
          Only include tasks which have a candidate group. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: withoutCandidateGroups
        in: query
        description: |-
          Only include tasks which have no candidate group. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: withCandidateUsers
        in: query
        description: |-
          Only include tasks which have a candidate user. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: withoutCandidateUsers
        in: query
        description: |-
          Only include tasks which have no candidate users. Value may only be `true`,
          as `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: active
        in: query
        description: |-
          Only include active tasks. Value may only be `true`, as `false`
          is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: suspended
        in: query
        description: |-
          Only include suspended tasks. Value may only be `true`, as
          `false` is the default behavior.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: taskVariables
        in: query
        description: |-
          Only include tasks that have variables with certain values. Variable filtering
          expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: processVariables
        in: query
        description: "Only include tasks that belong to process instances that have\
          \ variables with certain \nvalues. Variable filtering expressions are comma-separated\
          \ and are structured as\nfollows:\n\nA valid parameter value has the form\
          \ `key_operator_value`. `key` is the variable name,\n`operator` is the comparison\
          \ operator to be used and `value` the variable value.\n\n**Note**: Values\
          \ are always treated as String objects on server side.\n\nValid `operator`\
          \ values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n\
          `gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than\
          \ or equal to;\n`like`.\n`key` and `value` may not contain underscore or\
          \ comma characters."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: caseInstanceVariables
        in: query
        description: |-
          Only include tasks that belong to case instances that have variables with certain
          values. Variable filtering expressions are comma-separated and are structured as
          follows:

          A valid parameter value has the form `key_operator_value`. `key` is the variable name,
          `operator` is the comparison operator to be used and `value` the variable value.

          **Note**: Values are always treated as String objects on server side.

          Valid `operator` values are:
          `eq` - equal to;
          `neq` - not equal to;
          `gt` - greater than;
          `gteq` - greater than or equal to;
          `lt` - lower than;
          `lteq` - lower than or equal to;
          `like`.
          `key` and `value` may not contain underscore or comma characters.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: variableNamesIgnoreCase
        in: query
        description: |-
          Match all variable names in this query case-insensitively. If set
          `variableName` and `variablename` are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: variableValuesIgnoreCase
        in: query
        description: |-
          Match all variable values in this query case-insensitively. If set
          `variableValue` and `variablevalue` are treated as equal.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: parentTaskId
        in: query
        description: Restrict query to all tasks that are sub tasks of the given task.
          Takes a task id.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 response
                  value:
                    count: 1
        "400":
          description: |-
            Returned if some of the query parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
    post:
      tags:
      - Task
      description: |-
        Retrieves the number of tasks that fulfill the given filter. Corresponds to the size
        of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.14/reference/rest/task/post-query/)
        method and takes the same parameters.

        **Security Consideration**:
        There are several parameters (such as `assigneeExpression`) for specifying an EL
        expression. These are disabled by default to prevent remote code execution. See the
        section on
        [security considerations for custom code](https://docs.camunda.org/manual/7.14/user-guide/process-engine/securing-custom-code/)
        in the user guide for details.
      operationId: queryTasksCount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskQueryDto'
            examples:
              example-1:
                summary: POST `/task` Request Body 1
                value:
                  taskVariables:
                  - name: varName
                    value: varValue
                    operator: eq
                  - name: anotherVarName
                    value: 30
                    operator: neq
                  processInstanceBusinessKeyIn: aBusinessKey,anotherBusinessKey
                  assigneeIn: anAssignee,anotherAssignee
                  priority: 10
                  sorting:
                  - sortBy: dueDate
                    sortOrder: asc
                  - sortBy: processVariable
                    sortOrder: desc
                    parameters:
                      variable: orderId
                      type: String
              example-2:
                summary: POST `/task` Request Body 2
                description: 'Logical query: assignee = "John Munda" AND (name = "Approve
                  Invoice" OR priority = 5) AND (suspended = false OR taskDefinitionKey
                  = "approveInvoice")'
                value:
                  assignee: John Munda
                  orQueries:
                  - name: Approve Invoice
                    priority: 5
                  - suspended: false
                    taskDefinitionKey: approveInvoice
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: Status 200 response
                  value:
                    count: 1
        "400":
          description: |-
            Returned if some of the query parameters are invalid. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/create:
    post:
      tags:
      - Task
      description: Creates a new task.
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDto'
            examples:
              example-1:
                summary: POST /task/create
                value:
                  id: aTaskId
                  name: My Task
                  description: This have to be done very urgent
                  priority: 30
                  assignee: peter
                  owner: mary
                  delegationState: PENDING
                  due: 2014-08-30T10:00:00.000+0200
                  followUp: 2014-08-25T10:00:00.000+0200
                  parentTaskId: aParentTaskId
                  caseInstanceId: aCaseInstanceId
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if a not valid `delegationState` is supplied. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}:
    get:
      tags:
      - Task
      description: Retrieves a task by id.
      operationId: getTask
      parameters:
      - name: id
        in: path
        description: The id of the task to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
              examples:
                example-1:
                  summary: GET /task/anId Response
                  value:
                    id: anId
                    name: aName
                    assignee: anAssignee
                    created: 2013-01-23T13:42:42.000+0200
                    due: 2013-01-23T13:49:42.576+0200
                    followUp: 2013-01-23T13:44:42.437+0200
                    delegationState: RESOLVED
                    description: aDescription
                    executionId: anExecution
                    owner: anOwner
                    parentTaskId: aParentId
                    priority: 42
                    processDefinitionId: aProcDefId
                    processInstanceId: aProcInstId
                    caseDefinitionId: aCaseDefId
                    caseInstanceId: aCaseInstId
                    caseExecutionId: aCaseExecution
                    taskDefinitionKey: aTaskDefinitionKey
                    suspended: false
                    formKey: aFormKey
                    tenantId: aTenantId
        "404":
          description: |-
            Task with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
    put:
      tags:
      - Task
      description: Updates a task.
      operationId: updateTask
      parameters:
      - name: id
        in: path
        description: The id of the task to be updated.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDto'
            examples:
              example-1:
                summary: PUT /task/aTaskId/ Response
                value:
                  name: My Task
                  description: This have to be done very urgent
                  priority: 30
                  assignee: peter
                  owner: mary
                  delegationState: PENDING
                  due: 2014-08-30T10:00:00.000+0200
                  followUp: 2014-08-25T10:00:00.000+0200
                  parentTaskId: aParentTaskId
                  caseInstanceId: aCaseInstanceId
                  tenantId: tenantId
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Returned if a not valid `delegationState` is supplied. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: If the corresponding task cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
    delete:
      tags:
      - Task
      description: Removes a task by id.
      operationId: deleteTask
      parameters:
      - name: id
        in: path
        description: The id of the task to be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Bad Request. The Task with the given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The Task with the given id cannot be deleted because it is part of a running process or case instance.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for
            the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/assignee:
    post:
      tags:
      - Task
      description: |-
        Changes the assignee of a task to a specific user.

        **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.14/reference/rest/task/post-claim/)
        method is that this method does not check if the task already has a user
        assigned to it.
      operationId: setAssignee
      parameters:
      - name: id
        in: path
        description: The id of the task to set the assignee for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Provide the id of the user that will be the assignee of the task.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdDto'
            examples:
              example-1:
                summary: Request Body
                description: POST `/task/anId/assignee`
                value:
                  userId: aUserId
      responses:
        "204":
          description: Request successful.
        "500":
          description: |-
            Task with given id does not exist or setting the assignee was not successful.
            See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/attachment:
    get:
      tags:
      - Task Attachment
      description: Gets the attachments for a task.
      operationId: getAttachments
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the attachments for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttachmentDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /task/aTaskId/attachment
                  value:
                  - id: attachmentId
                    name: attachmentName
                    taskId: aTaskId
                    description: attachmentDescription
                    type: attachmentType
                    url: http://my-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                  - id: anotherAttachmentId
                    name: anotherAttachmentName
                    taskId: aTaskId
                    description: anotherAttachmentDescription
                    type: anotherAttachmentType
                    url: http://my-another-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                  - id: yetAnotherAttachmentId
                    name: yetAnotherAttachmentName
                    taskId: aTaskId
                    description: yetAnotherAttachmentDescription
                    type: yetAnotherAttachmentType
                    url: http://yet-another-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
        "404":
          description: |-
            No task exists for the given task id. See the [Introduction](/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskAttachment
  /task/{id}/attachment/create:
    post:
      tags:
      - Task Attachment
      description: Creates an attachment for a task.
      operationId: addAttachment
      parameters:
      - name: id
        in: path
        description: The id of the task to add the attachment to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiFormAttachmentDto'
            examples:
              example-1:
                summary: POST /task/aTaskId/attachment/create
                description: Post data for a new task attachment.
                value: |-
                  ------------------------------925df49a954b
                                          Content-Disposition: form-data; name="url"

                                          http://my-attachment-content-url.de
                                          ------------------------------925df49a954b
                                          Content-Disposition: form-data; name="attachment-name"

                                          attachmentName
                                          ------------------------------925df49a954b
                                          Content-Disposition: form-data; name="attachment-description"

                                          attachmentDescription
                                          ------------------------------925df49a954b
                                          Content-Disposition: form-data; name="attachment-type"

                                          attachmentType
                                          ------------------------------925df49a954b--
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    id: attachmentId
                    name: attachmentName
                    taskId: aTaskId
                    description: attachmentDescription
                    type: attachmentType
                    url: http://my-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                    links:
                    - method: GET
                      href: http://localhost:38080/rest-test/task/aTaskId/attachment/aTaskAttachmentId
                      rel: self
        "400":
          description: |-
            The task does not exists or task id is null. No content or url to remote content exists. See the
            [Introduction](/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
      x-swagger-router-controller: TaskAttachment
  /task/{id}/attachment/{attachmentId}:
    get:
      tags:
      - Task Attachment
      description: Retrieves a task attachment by task id and attachment id.
      operationId: getAttachment
      parameters:
      - name: id
        in: path
        description: The id of the task.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: attachmentId
        in: path
        description: The id of the attachment to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentDto'
              examples:
                example-1:
                  summary: GET /task/aTaskId/attachment/aTaskAttachmentId
                  value:
                    id: attachmentId
                    name: attachmentName
                    taskId: aTaskId
                    description: attachmentDescription
                    type: attachmentType
                    url: http://my-attachment-content-url.de
                    createTime: 2017-02-10T14:33:19.000+0200
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                    links:
                    - method: GET
                      href: http://localhost:38080/rest-test/task/aTaskId/attachment/aTaskAttachmentId
                      rel: self
        "404":
          description: |-
            The attachment for the given task and attachment id does not exist or the history of the engine is
            disabled.

            See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskAttachment
    delete:
      tags:
      - Task Attachment
      description: Removes an attachment from a task by id.
      operationId: deleteAttachment
      parameters:
      - name: id
        in: path
        description: The id of the task.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: attachmentId
        in: path
        description: The id of the attachment to be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "403":
          description: |-
            The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            A Task Attachment for the given task id and attachment id does not exist. See the
            [Introduction](/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskAttachment
  /task/{id}/attachment/{attachmentId}/data:
    get:
      tags:
      - Task Attachment
      description: Retrieves the binary content of a task attachment by task id and
        attachment id.
      operationId: getAttachmentData
      parameters:
      - name: id
        in: path
        description: The id of the task.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: attachmentId
        in: path
        description: The id of the attachment to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/octet-stream:
              schema:
                type: string
                description: For files without any MIME type information, a byte stream
                  is returned.
                format: binary
                x-content-type: application/octet-stream
            text/plain:
              schema:
                type: string
                description: |-
                  Files with MIME type information are returned as the saved type. Additionally, for file
                                              responses, the Content-Disposition header will be set.
                format: binary
        "404":
          description: |-
            The attachment content for the given task id and attachment id does not exist, or the history of the
            engine is disabled.

            See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskAttachment
  /task/{id}/bpmnError:
    post:
      tags:
      - Task
      description: |-
        Reports a business error in the context of a running task by id. The error code must
        be specified to identify the BPMN error handler. See the documentation for
        [Reporting Bpmn Error](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-error)
        in User Tasks.
      operationId: handleBpmnError
      parameters:
      - name: id
        in: path
        description: The id of the task a BPMN error is reported for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskBpmnErrorDto'
            examples:
              example-1:
                summary: Request Body
                description: POST `/task/aTaskId/bpmnError`
                value:
                  errorCode: bpmn-error-543
                  errorMessage: anErrorMessage
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
      responses:
        "204":
          description: Request successful.
        "403":
          description: |-
            If the authenticated user is unauthorized to update the process instance. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            Returned if the task does not exist or <code>errorCode</code> is not presented in
            the request. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/bpmnEscalation:
    post:
      tags:
      - Task
      description: |-
        Reports an escalation in the context of a running task by id. The escalation code must
        be specified to identify the escalation handler. See the documentation for
        [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.14/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation)
        in User Tasks.
      operationId: handleEscalation
      parameters:
      - name: id
        in: path
        description: The id of the task in which context a BPMN escalation is reported.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskEscalationDto'
            examples:
              example-1:
                summary: Request Body
                description: POST `/task/aTaskId/bpmnEscalation`
                value:
                  escalationCode: bpmn-escalation-432
                  variables:
                    aVariable:
                      value: aStringValue
                      type: String
                    anotherVariable:
                      value: true
                      type: Boolean
      responses:
        "204":
          description: Request successful.
        "403":
          description: |-
            If the authenticated user is unauthorized to update the process instance. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            Returned if the task does not exist or <code>errorCode</code> is not presented in
            the request. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/claim:
    post:
      tags:
      - Task
      description: |-
        Claims a task for a specific user.

        **Note:** The difference with the
        [Set Assignee](https://docs.camunda.org/manual/7.14/reference/rest/task/post-assignee/)
        method is that here a check is performed to see if the task already has a user
        assigned to it.
      operationId: claim
      parameters:
      - name: id
        in: path
        description: The id of the task to claim.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Provide the id of the user that claims the task.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdDto'
            examples:
              example-1:
                summary: Request Body
                description: POST `/task/anId/claim`
                value:
                  userId: aUserId
      responses:
        "204":
          description: Request successful.
        "500":
          description: |-
            Task with given id does not exist or claiming was not successful. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/comment:
    get:
      tags:
      - Task Comment
      description: Gets the comments for a task by id.
      operationId: getComments
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the comments for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /task/aTaskId/comment
                  value:
                  - id: commentId
                    userId: userId
                    taskId: aTaskId
                    time: 2013-01-02T21:37:03.764+0200
                    message: message
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                  - id: anotherCommentId
                    userId: anotherUserId
                    taskId: aTaskId
                    time: 2013-02-23T20:37:43.975+0200
                    message: anotherMessage
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
                  - id: yetAnotherCommentId
                    userId: yetAnotherUserId
                    taskId: aTaskId
                    time: 2013-04-21T10:15:23.764+0200
                    message: yetAnotherMessage
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
        "404":
          description: |-
            No task exists for the given task id. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskComment
  /task/{id}/comment/create:
    post:
      tags:
      - Task Comment
      description: Creates a comment for a task by id.
      operationId: createComment
      parameters:
      - name: id
        in: path
        description: The id of the task to add the comment to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: '**Note:** Only the `message` property will be used. Every other
          property passed to this endpoint will be ignored.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
            examples:
              example-1:
                summary: POST /task/aTaskId/comment/create
                value:
                  message: a task comment
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  value:
                    links:
                    - method: GET
                      href: http://localhost:38080/rest-test/task/aTaskId/comment/aTaskCommentId
                      rel: self
                    id: aTaskCommentId
                    userId: userId
                    taskId: aTaskId
                    time: 2013-01-02T21:37:03.887+0200
                    message: comment message
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
        "400":
          description: |-
            The task does not exist or no comment message was submitted. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            The history of the engine is disabled. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
      x-swagger-router-controller: TaskComment
  /task/{id}/comment/{commentId}:
    get:
      tags:
      - Task Comment
      description: Retrieves a task comment by task id and comment id.
      operationId: getComment
      parameters:
      - name: id
        in: path
        description: The id of the task.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commentId
        in: path
        description: The id of the comment to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
              examples:
                example-1:
                  summary: GET /task/aTaskId/comment
                  value:
                    id: aTaskCommentId
                    userId: userId
                    taskId: aTaskId
                    time: 2013-01-02T21:37:03.664+0200
                    message: comment content
                    removalTime: 2018-02-10T14:33:19.000+0200
                    rootProcessInstanceId: aRootProcessInstanceId
        "404":
          description: |-
            The task or comment with given task and comment id does not exist, or the history of
            the engine is disabled. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskComment
  /task/{id}/complete:
    post:
      tags:
      - Task
      description: Completes a task and updates process variables.
      operationId: complete
      parameters:
      - name: id
        in: path
        description: The id of the task to complete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskDto'
            examples:
              example-1:
                summary: POST `/task/anId/complete`
                description: Complete Task with variables in return
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
                  withVariablesInReturn: true
              example-2:
                summary: POST `/task/anId/complete`
                description: Complete Task without variables in return
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
      responses:
        "200":
          description: Request successful. The response contains the process variables.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: POST `/task/anId/complete`
                  description: Response Body
                  value:
                    variables:
                      aVariable:
                        value: aStringValue
                      anotherVariable:
                        value: 42
                      aThirdVariable:
                        value: true
        "204":
          description: Request successful. The response contains no variables.
        "400":
          description: |-
            The variable value or type is invalid, for example if the value could not be parsed
            to an Integer value or the passed variable type is not supported. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            If the task does not exist or the corresponding process instance could not be
            resumed successfully. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/delegate:
    post:
      tags:
      - Task
      description: Delegates a task to another user.
      operationId: delegateTask
      parameters:
      - name: id
        in: path
        description: The id of the task to delegate.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Provide the id of the user that the task should be delegated
          to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdDto'
            examples:
              example-1:
                summary: Request Body
                description: POST `/task/anId/delegate`
                value:
                  userId: aUserId
      responses:
        "204":
          description: Request successful.
        "500":
          description: |-
            If the task does not exist or delegation was not successful. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/deployed-form:
    get:
      tags:
      - Task
      description: |-
        Retrieves the deployed form that is referenced from a given task. For further
        information please refer to the
        [User Guide](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#embedded-task-forms).
      operationId: getDeployedForm
      parameters:
      - name: id
        in: path
        description: The id of the task to get the deployed form for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/xhtml+xml:
              schema:
                type: string
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                x-content-type: application/xhtml+xml
              examples:
                example-1:
                  summary: Status 200 Response
                  description: Resonse for GET `/task/taskId/deployed-form`
                  value: |-
                    <form role="form" name="invoiceForm"
                                                          class="form-horizontal">

                                                      <div class="form-group">
                                                        <label class="control-label col-md-4"
                                                               for="creditor">Creditor</label>
                                                        <div class="col-md-8">
                                                          <input cam-variable-name="creditor"
                                                                 cam-variable-type="String"
                                                                 id="creditor"
                                                                 class="form-control"
                                                                 type="text"
                                                                 required />
                                                          <div class="help">
                                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)
                                                          </div>
                                                        </div>
                                                      </div>

                                                    </form>
        "400":
          description: |-
            The form key has wrong format. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "403":
          description: |-
            The deployed form cannot be retrieved due to missing permissions on task resource.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationExceptionDto'
        "404":
          description: |-
            No deployed form for a given task exists. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/form:
    get:
      tags:
      - Task
      description: |-
        Retrieves the form key for a task. The form key corresponds to the `FormData#formKey`
        property in the engine. This key can be used to do task-specific form rendering in
        client applications. Additionally, the context path of the containing process
        application is returned.
      operationId: getForm
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the form for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  description: GET `/task/anId/form`
                  value:
                    key: aFormKey
                    contextPath: http://localhost:8080/my-process-application/
        "400":
          description: |-
            Task with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/form-variables:
    get:
      tags:
      - Task
      description: |-
        Retrieves the form variables for a task. The form variables take form data specified
        on the task into account. If form fields are defined, the variable types and default
        values of the form fields are taken into account.
      operationId: getFormVariables
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variables for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: variableNames
        in: query
        description: |-
          A comma-separated list of variable names. Allows restricting the list of requested
          variables to the variable names in the list. It is best practice to restrict the
          list of variables to the variables actually required by the form in order to
          minimize fetching of data. If the query parameter is ommitted all variables are
          fetched. If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deserializeValues
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store
          custom Java objects) should be deserialized on server side (default true).

          If set to true, a serializable variable will be deserialized on server side and
          transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
          property introspection feature. Note that this requires the Java classes of the
          variable value to be on the REST API's classpath.

          If set to false, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string
          containing XML.

          Note: While true is the default value for reasons of backward compatibility, we
          recommend setting this parameter to false when developing web applications that are
          independent of the Java process applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful. A JSON object containing a property for
            each variable returned.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Status 200 Response
                  description: GET `/task/anId/form-variables`
                  value:
                    amount:
                      type: integer
                      value: 5
                      valueInfo: {}
                    firstName:
                      type: String
                      value: Jonny
                      valueInfo: {}
        "404":
          description: |2-
             id is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/identity-links:
    get:
      tags:
      - Task Identity Link
      description: |-
        Gets the identity links for a task by id, which are the users and groups that are in
        *some* relation to it (including assignee and owner).
      operationId: getIdentityLinks
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the identity links for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: type
        in: query
        description: Filter by the type of links to include.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityLinkDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET /task/anId/identityLinks
                  value:
                  - userId: userId
                    type: assignee
                  - groupId: groupId1
                    type: candidate
                  - groupId: groupId2
                    type: candidate
        "400":
          description: |-
            Task with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskIdentityLink
    post:
      tags:
      - Task Identity Link
      description: |-
        Adds an identity link to a task by id. Can be used to link any user or group to a task
        and specify a relation.
      operationId: addIdentityLink
      parameters:
      - name: id
        in: path
        description: The id of the task to add a link to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityLinkDto'
            examples:
              example-1:
                summary: POST `/task/anId/identity-links`
                value:
                  groupId: aNewGroupId
                  type: candidate
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Task with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskIdentityLink
  /task/{id}/identity-links/delete:
    post:
      tags:
      - Task Identity Link
      description: Removes an identity link from a task by id
      operationId: deleteIdentityLink
      parameters:
      - name: id
        in: path
        description: The id of the task to remove a link from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityLinkDto'
            examples:
              example-1:
                summary: POST `/task/anId/identityLinks/delete`
                value:
                  groupId: theOldGroupId
                  type: candidate
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            Task with given id does not exist.
            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for
            the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskIdentityLink
  /task/{id}/localVariables:
    get:
      tags:
      - Task Local Variable
      description: Retrieves all variables of a given task by id.
      operationId: getTaskLocalVariables
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variables from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: deserializeValues
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on the server side (default `true`).

          If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to `false`, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this
          parameter to `false` when developing web applications that are independent of the Java process
          applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/task/aTaskId/variables`
                  value:
                    aVariableKey:
                      value:
                        prop1: a
                        prop2: b
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
                example-2:
                  summary: GET `/task/aTaskId/variables?deserializeValue=false`
                  value:
                    aVariableKey:
                      value: ab
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
        "500":
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskLocalVariable
    post:
      tags:
      - Task Local Variable
      description: |-
        Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is
        updated AND deleted, the deletion overrides the update.
      operationId: modifyTaskLocalVariables
      parameters:
      - name: id
        in: path
        description: The id of the task to set variables for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchVariablesDto'
            examples:
              example-1:
                summary: POST `/task/aTaskId/variables`
                description: 'Status 204 Response: No content.'
                value:
                  modifications:
                    aVariable:
                      value: aValue
                      type: String
                    anotherVariable:
                      value: 42
                      type: Integer
                  deletions:
                  - aThirdVariable
                  - FourthVariable
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            The variable value or type is invalid. For example the value could not be parsed to an `Integer` value
            or the passed variable type is not supported. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Update or delete could not be executed because the task is `null` or does not exist.. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskLocalVariable
  /task/{id}/localVariables/{varName}:
    get:
      tags:
      - Task Local Variable
      description: Retrieves a variable from the context of a given task by id.
      operationId: getTaskLocalVariable
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variable from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: deserializeValue
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on the server side (default `true`).

          If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to `false`, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
          parameter to `false` when developing web applications that are independent of the Java process
          applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableValueDto'
              examples:
                example-1:
                  summary: GET `/task/aTaskId/variables/myObject123`
                  value:
                    value:
                      prop1: a
                      prop2: b
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
                example-2:
                  summary: GET `/task/aTaskId/variables/myObject123?deserializeValue=false`
                  value:
                    value: ab
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
        "404":
          description: |-
            Variable with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskLocalVariable
    put:
      tags:
      - Task Local Variable
      description: Sets a variable in the context of a given task.
      operationId: putTaskLocalVariable
      parameters:
      - name: id
        in: path
        description: The id of the task to set the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to set.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableValueDto'
            examples:
              example-1:
                summary: PUT /task/aTaskId/variables/aVarName
                description: Status 204. No content.
                value:
                  value: someValue
                  type: String
              example-2:
                summary: PUT /task/aTaskId/variables/aVarName
                description: An Object Variable PUT Request. Status 204. No content.
                value:
                  value: ab
                  type: Object
                  valueInfo:
                    objectTypeName: com.example.MyObject
                    serializationDataFormat: application/xml
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            The variable name, value or type is invalid, for example if the value could not be parsed to an `Integer`
            value or the passed variable type is not supported or a new transient variable has the name that is
            already persisted. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The variable name is `null`, or the Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskLocalVariable
    delete:
      tags:
      - Task Local Variable
      description: Removes a local variable from a task by id.
      operationId: deleteTaskLocalVariable
      parameters:
      - name: id
        in: path
        description: The id of the task to delete the variable from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "500":
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskLocalVariable
  /task/{id}/localVariables/{varName}/data:
    get:
      tags:
      - Task Local Variable
      description: |-
        Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file
        variables.
      operationId: getTaskLocalVariableBinary
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |-
            Request successful.
                    For binary variables or files without any MIME type information, a byte stream is returned.
                    File variables with MIME type information are returned as the saved type.
                    Additionally, for file variables the Content-Disposition header will be set.
          content:
            application/octet-stream:
              schema:
                type: string
                description: For binary variables or files without any MIME type information,
                  a byte stream is returned.
                format: binary
                x-content-type: application/octet-stream
              examples:
                example-1:
                  summary: GET /task/aTaskId/variables/aVarName/data
                  value: 'binary variable: Status 200. Content-Type: application/octet-stream'
            text/plain:
              schema:
                type: string
                description: |-
                  File variables with MIME type information are returned as the saved type.
                              Additionally, for file variables the Content-Disposition header will be set.
                format: binary
              examples:
                example-1:
                  summary: GET /task/aTaskId/variables/aVarName/data
                  value: 'file variable: Status 200. Content-Type: text/plain; charset=UTF-8.
                    Content-Disposition: attachment; filename="someFile.txt"'
        "400":
          description: |-
            Variable with given id exists but is not a binary variable.See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Variable with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskLocalVariable
    post:
      tags:
      - Task Local Variable
      description: Sets the serialized value for a binary variable or the binary value
        for a file variable.
      operationId: setBinaryTaskLocalVariable
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: 'For binary variables a multipart form submit with the following
          parts:'
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiFormVariableBinaryDto'
            examples:
              example-1:
                summary: POST `/task/aTaskId/variables/aVarName/data` (1)
                description: Post binary content of a byte array variable.
                value: "\n                        ```\n                        ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"image.png\"\n                        Content-Type:\
                  \ application/octet-stream\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     Bytes\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
              example-2:
                summary: POST `/task/aTaskId/variables/aVarName/data` (2)
                description: Post the JSON serialization of a Java Class (**deprecated**).
                value: "\n                        ```\n                        ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  type\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     java.util.ArrayList<java.lang.Object>\n  \
                  \                      ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"\n                        Content-Type: application/json;\
                  \ charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ 8bit\n\n                        [\"foo\",\"bar\"]\n          \
                  \              ------------------------------1e838f8f632a--\n  \
                  \                      ```\n                      "
              example-3:
                summary: POST `/task/aTaskId/variables/aVarName/data` (3)
                description: Post a text file.
                value: "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"myFile.txt\"\n                        Content-Type:\
                  \ text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     File\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            The variable value or type is invalid, for example if no filename is set. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Variable name is `null`, or the Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskLocalVariable
  /task/{id}/rendered-form:
    get:
      tags:
      - Task
      description: |-
        Retrieves the rendered form for a task. This method can be used to get the HTML
        rendering of a
        [Generated Task Form](https://docs.camunda.org/manual/7.14/user-guide/task-forms/#generated-task-forms).
      operationId: getRenderedForm
      parameters:
      - name: id
        in: path
        description: The id of the task to get the rendered form for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/xhtml+xml:
              schema:
                type: string
                description: For `application/xhtml+xml` Responses, a byte stream
                  is returned.
                format: binary
                x-content-type: application/xhtml+xml
              examples:
                example-1:
                  summary: Status 200 Response
                  description: A `/task/anId/rendered-form` HTML GET response body
                    providing the rendered (generated) form content.
                  value: |-
                    <form class="form-horizontal">
                                                      <div class="control-group">
                                                        <label class="control-label">Customer ID</label>
                                                        <div class="controls">
                                                          <input form-field type="string" name="customerId"></input>
                                                        </div>
                                                      </div>
                                                      <div class="control-group">
                                                        <label class="control-label">Amount</label>
                                                        <div class="controls">
                                                          <input form-field type="number" name="amount"></input>
                                                        </div>
                                                      </div>
                                                    </form>
        "400":
          description: |-
            The task with the given id does not exist or has no form field metadata defined for
            this task. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/resolve:
    post:
      tags:
      - Task
      description: |-
        Resolves a task and updates execution variables.

        Resolving a task marks that the assignee is done with the task delegated to them, and
        that it can be sent back to the owner. Can only be executed when the task has been
        delegated. The assignee will be set to the owner, who performed the delegation.
      operationId: resolve
      parameters:
      - name: id
        in: path
        description: The id of the task to resolve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskDto'
            examples:
              example-1:
                summary: Request Body
                description: POST `/task/anId/resolve`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            The variable value or type is invalid, for example if the value could not be parsed
            to an Integer value or the passed variable type is not supported. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            If the task does not exist or the corresponding process instance could not be
            resumed successfully. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/submit-form:
    post:
      tags:
      - Task
      description: |-
        Completes a task and updates process variables using a form submit. There are two
        difference between this method and the `complete` method:

        * If the task is in state `PENDING` - i.e., has been delegated before, it is not
        completed but resolved. Otherwise it will be completed.
        * If the task has Form Field Metadata defined, the process engine will perform backend
        validation for any form fields which have validators defined.
        See the
        [Generated Task Forms](https://docs.camunda.org/manual/7.14/user-guide/task-forms/_index/#generated-task-forms)
        section of the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/) for more information.
      operationId: submit
      parameters:
      - name: id
        in: path
        description: The id of the task to submit the form for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskDto'
            examples:
              example-1:
                summary: Request Body 1
                description: POST `/task/anId/submit-form`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
                    aFileVariable:
                      value: TG9yZW0gaXBzdW0=
                      type: File
                      valueInfo:
                        filename: myFile.txt
              example-2:
                summary: Request Body 2
                description: POST `/task/anId/complete`
                value:
                  variables:
                    aVariable:
                      value: aStringValue
                    anotherVariable:
                      value: 42
                    aThirdVariable:
                      value: true
                  withVariablesInReturn: true
      responses:
        "200":
          description: Request successful. The response contains the process variables.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: Response Body
                  description: Response of a submitted task form with variables in
                    return
                  value:
                    aVariable:
                      value: aStringValue
                      type: String
                      valueInfo: {}
                    anotherVariable:
                      value: 42
                      type: Integer
                      valueInfo: {}
                    aThirdVariable:
                      value: true
                      type: Boolean
                      valueInfo: {}
        "204":
          description: Request successful. The response contains no variables.
        "400":
          description: |-
            The variable value or type is invalid, for example if the value could not be parsed to an Integer value
            or the passed variable type is not supported.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for
            the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            If the task does not exist or the corresponding process instance could not be resumed successfully.

            See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling) for
            the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/unclaim:
    post:
      tags:
      - Task
      description: Resets a task's assignee. If successful, the task is not assigned
        to a user.
      operationId: unclaim
      parameters:
      - name: id
        in: path
        description: The id of the task to unclaim.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "500":
          description: |-
            The Task with the given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Task
  /task/{id}/variables:
    get:
      tags:
      - Task Variable
      description: |-
        Retrieves all variables visible from the task. A variable is visible from the task if it is a local task
        variable or declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: getTaskVariables
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variables from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: deserializeValue
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on the server side (default `true`).
          If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to `false`, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
          parameter to `false` when developing web applications that are independent of the Java process
          applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VariableValueDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/task/aTaskId/variables`
                  value:
                    aVariableKey:
                      value:
                        prop1: a
                        prop2: b
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
                example-2:
                  summary: GET `/task/aTaskId/variables?deserializeValue=false`
                  value:
                    aVariableKey:
                      value: ab
                      type: Object
                      valueInfo:
                        objectTypeName: com.example.MyObject
                        serializationDataFormat: application/xml
        "500":
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskVariable
    post:
      tags:
      - Task Variable
      description: |-
        Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is
        updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a
        local task variable or declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: modifyTaskVariables
      parameters:
      - name: id
        in: path
        description: The id of the task to set variables for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchVariablesDto'
            examples:
              example-1:
                summary: POST `/task/aTaskId/variables`
                description: 'Status 204 Response: No content.'
                value:
                  modifications:
                    aVariable:
                      value: aValue
                      type: String
                    anotherVariable:
                      value: 42
                      type: Integer
                  deletions:
                  - aThirdVariable
                  - FourthVariable
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            The variable value or type is invalid. For example the value could not be parsed to an `Integer` value
            or the passed variable type is not supported. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Update or delete could not be executed because the task is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskVariable
  /task/{id}/variables/{varName}:
    get:
      tags:
      - Task Variable
      description: |-
        Retrieves a variable from the context of a given task.
        The variable must be visible from the task. It is visible from the task if it is a local task variable or
        declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: getTaskVariable
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variable from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to get.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: deserializeValue
        in: query
        description: |-
          Determines whether serializable variable values (typically variables that store custom Java objects)
          should be deserialized on the server side (default `true`).

          If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
          using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
          Note that this requires the Java classes of the variable value to be on the REST API's classpath.

          If set to `false`, a serializable variable will be returned in its serialized format.
          For example, a variable that is serialized as XML will be returned as a JSON string containing XML.

          Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
          parameter to `false` when developing web applications that are independent of the Java process
          applications deployed to the engine.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableValueDto'
              examples:
                example-1:
                  summary: GET `/task/aTaskId/variables/myObject123`
                  value:
                    value:
                      prop1: a
                      prop2: b
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
                example-2:
                  summary: GET `/task/aTaskId/variables/myObject123?deserializeValue=false`
                  value:
                    value: ab
                    type: Object
                    valueInfo:
                      objectTypeName: com.example.MyObject
                      serializationDataFormat: application/xml
        "404":
          description: |-
            Variable with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskVariable
    put:
      tags:
      - Task Variable
      description: |-
        Updates a process variable that is visible from the Task scope. A variable is visible from the task if it
        is a local task variable, or declared in a parent scope of the task. See the documentation on
        [variable scopes and visibility](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).

        **Note**: If a variable doesn't exist, the variable is created in the top-most scope
        visible from the task.
      operationId: putTaskVariable
      parameters:
      - name: id
        in: path
        description: The id of the task to set the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to set.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableValueDto'
            examples:
              example-1:
                summary: PUT /task/aTaskId/variables/aVarName
                description: Status 204. No content.
                value:
                  value: someValue
                  type: String
              example-2:
                summary: PUT /task/aTaskId/variables/aVarName
                description: Status 204. No content.
                value:
                  value: ab
                  type: Object
                  valueInfo:
                    objectTypeName: com.example.MyObject
                    serializationDataFormat: application/xml
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            The variable name, value or type is invalid, for example if the value could not be parsed to an `Integer`
            value or the passed variable type is not supported or a new transient variable has the name that is
            already persisted. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            The variable name is `null`, or the Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskVariable
    delete:
      tags:
      - Task Variable
      description: |-
        Removes a variable that is visible to a task. A variable is visible to a task if it is a local task
        variable or declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: deleteTaskVariable
      parameters:
      - name: id
        in: path
        description: The id of the task to delete the variable from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "500":
          description: |-
            Task id is null or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskVariable
  /task/{id}/variables/{varName}/data:
    get:
      tags:
      - Task Variable
      description: |-
        Retrieves a binary variable from the context of a given task. Applicable for byte array and file
        variables. The variable must be visible from the task. It is visible from the task if it is a local task
        variable or declared in a parent scope of the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: getTaskVariableBinary
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |-
            Request successful.
                    For binary variables or files without any MIME type information, a byte stream is returned.
                    File variables with MIME type information are returned as the saved type.
                    Additionally, for file variables the Content-Disposition header will be set.
          content:
            application/octet-stream:
              schema:
                type: string
                description: For binary variables or files without any MIME type information,
                  a byte stream is returned.
                format: binary
                x-content-type: application/octet-stream
              examples:
                example-1:
                  summary: GET /task/aTaskId/variables/aVarName/data
                  value: 'binary variable: Status 200. Content-Type: application/octet-stream'
            text/plain:
              schema:
                type: string
                description: |-
                  File variables with MIME type information are returned as the saved type.
                              Additionally, for file variables the Content-Disposition header will be set.
                format: binary
              examples:
                example-1:
                  summary: GET /task/aTaskId/variables/aVarName/data
                  value: 'file variable: Status 200. Content-Type: text/plain; charset=UTF-8.
                    Content-Disposition: attachment; filename="someFile.txt"'
        "400":
          description: |-
            Variable with given id exists but is not a binary variable.See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "404":
          description: |-
            Variable with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskVariable
    post:
      tags:
      - Task Variable
      description: |-
        Sets the serialized value for a binary variable or the binary value for a file variable visible from the
        task. A variable is visible from the task if it is a local task variable or declared in a parent scope of
        the task. See documentation on
        [visiblity of variables](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/).
      operationId: setBinaryTaskVariable
      parameters:
      - name: id
        in: path
        description: The id of the task to retrieve the variable for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: varName
        in: path
        description: The name of the variable to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: 'For binary variables a multipart form submit with the following
          parts:'
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiFormVariableBinaryDto'
            examples:
              example-1:
                summary: POST `/task/aTaskId/variables/aVarName/data` (1)
                description: Post binary content of a byte array variable.
                value: "\n                        ```\n                        ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"image.png\"\n                        Content-Type:\
                  \ application/octet-stream\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ------------------------------354ddb6baeff\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     Bytes\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
              example-2:
                summary: POST `/task/aTaskId/variables/aVarName/data` (2)
                description: Post the JSON serialization of a Java Class (**deprecated**).
                value: "\n                        ```\n                        ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  type\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     java.util.ArrayList<java.lang.Object>\n  \
                  \                      ------------------------------1e838f8f632a\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"\n                        Content-Type: application/json;\
                  \ charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ 8bit\n\n                        [\"foo\",\"bar\"]\n          \
                  \              ------------------------------1e838f8f632a--\n  \
                  \                      ```\n                      "
              example-3:
                summary: POST `/task/aTaskId/variables/aVarName/data` (3)
                description: Post a text file.
                value: "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  data\"; filename=\"myFile.txt\"\n                        Content-Type:\
                  \ text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding:\
                  \ binary\n\n                        <<Byte Stream ommitted>>\n \
                  \                       ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n\
                  \                        Content-Disposition: form-data; name=\"\
                  valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n\
                  \                        Content-Transfer-Encoding: 8bit\n\n   \
                  \                     File\n                        ------------------------------1e838f8f632a--\n\
                  \                        ```\n                      "
      responses:
        "204":
          description: Request successful.
        "400":
          description: |-
            The variable value or type is invalid, for example if no filename is set. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
        "500":
          description: |-
            Variable name is `null`, or the Task id is `null` or does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: TaskVariable
  /telemetry/configuration:
    get:
      tags:
      - Telemetry
      summary: Fetch Telemetry Configuration
      description: Fetches Telemetry Configuration.
      operationId: getTelemetryConfiguration
      parameters: []
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryConfigurationDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  description: The Response content of a status 200
                  value:
                    enableTelemetry: true
        "401":
          description: If the user who perform the operation is not a <b>camunda-admin</b>
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Telemetry
    post:
      tags:
      - Telemetry
      summary: Configure Telemetry
      description: Configures whether Camunda receives data collection of the process
        engine setup and usage.
      operationId: configureTelemetry
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryConfigurationDto'
            examples:
              examle-1:
                summary: POST /telemetry/configuration
                description: The content of the Request Body
                value:
                  enableTelemetry: true
      responses:
        "204":
          description: Request successful.
        "401":
          description: If the user who perform the operation is not a <b>camunda-admin</b>
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: Telemetry
  /user:
    get:
      tags:
      - User
      summary: Get List
      description: |-
        Query for a list of users using a list of parameters.
        The size of the result set can be retrieved by using the Get User Count method.
        [Get User Count](https://docs.camunda.org/manual/7.14/reference/rest/user/get-query-count/) method.
      operationId: getUsers
      parameters:
      - name: id
        in: query
        description: Filter by user id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: idIn
        in: query
        description: Filter by a comma-separated list of user ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstName
        in: query
        description: Filter by the first name of the user. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstNameLike
        in: query
        description: Filter by the first name that the parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastName
        in: query
        description: Filter by the last name of the user. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastNameLike
        in: query
        description: Filter by the last name that the parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: email
        in: query
        description: Filter by the email of the user. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: emailLike
        in: query
        description: Filter by the email that the parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: memberOfGroup
        in: query
        description: Filter for users which are members of the given group.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: memberOfTenant
        in: query
        description: Filter for users which are members of the given tenant.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: potentialStarter
        in: query
        description: Only select Users that are potential starter for the given process
          definition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortBy
        in: query
        description: |-
          Sort the results lexicographically by a given criterion.
          Must be used in conjunction with the sortOrder parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - instanceId
          - caseInstanceId
          - dueDate
          - executionId
          - caseExecutionId
          - assignee
          - created
          - description
          - id
          - name
          - nameCaseInsensitive
          - priority
          - processVariable
          - executionVariable
          - taskVariable
          - caseExecutionVariable
          - caseInstanceVariable
      - name: sortOrder
        in: query
        description: |-
          Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
          Must be used in conjunction with the sortBy parameter.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: firstResult
        in: query
        description: Pagination of results. Specifies the index of the first result
          to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: maxResults
        in: query
        description: |-
          Pagination of results. Specifies the maximum number of results to return.
          Will return less results if there are no more results left.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/user?firstName=John`
                  value:
                  - id: jonny1
                    firstName: John
                    lastName: Doe
                    email: anEmailAddress
                  - id: jonny2
                    firstName: John
                    lastName: Smoe
                    email: anotherEmailAddress
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
            but no `sortBy`, or if an invalid operator for variable comparison is used. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: User
    options:
      tags:
      - User
      summary: Options
      description: |-
        The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such
        and one for individual user instances. The `OPTIONS` request allows checking for the set of
        available operations that the currently authenticated user can perform on the /user resource.
        If the user can perform an operation or not may depend on various things, including the user's
        authorizations to interact with this resource and the internal configuration of the process
        engine.
      operationId: availableOperations
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOptionsDto'
              examples:
                example-1:
                  summary: GET `/user/aUserId`
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter/profile
                      rel: self
                    - method: DELETE
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter
                      rel: delete
                    - method: PUT
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter/profile
                      rel: update
      x-swagger-router-controller: User
  /user/count:
    get:
      tags:
      - User
      summary: Get List Count
      description: |-
        Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the
        [Get Users](https://docs.camunda.org/manual/7.14/reference/rest/user/get-query/) method.
      operationId: getUserCount
      parameters:
      - name: id
        in: query
        description: Filter by user id
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: idIn
        in: query
        description: Filter by a comma-separated list of user ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstName
        in: query
        description: Filter by the first name of the user. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: firstNameLike
        in: query
        description: Filter by the first name that the parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastName
        in: query
        description: Filter by the last name of the user. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastNameLike
        in: query
        description: Filter by the last name that the parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: email
        in: query
        description: Filter by the email of the user. Exact match.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: emailLike
        in: query
        description: Filter by the email that the parameter is a substring of.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: memberOfGroup
        in: query
        description: Filter for users which are members of the given group.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: memberOfTenant
        in: query
        description: Filter for users which are members of the given tenant.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: potentialStarter
        in: query
        description: Only select Users that are potential starter for the given process
          definition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResultDto'
              examples:
                example-1:
                  summary: GET `/user/count?firstName=John`
                  value:
                    count: 2
        "400":
          description: |-
            Returned if some of the query parameters are invalid, for example, if an invalid operator for variable
            comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: User
  /user/create:
    post:
      tags:
      - User
      summary: Create
      description: Create a new user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
            examples:
              example-1:
                summary: POST /user/create
                value:
                  profile:
                    id: jonny1
                    firstName: John
                    lastName: Doe
                    email: anEmailAddress
                  credentials:
                    password: s3cret
      responses:
        "204":
          description: Request successful.
      x-swagger-router-controller: User
  /user/{id}:
    delete:
      tags:
      - User
      summary: Delete
      description: Deletes a user by id.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The id of the user to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "403":
          description: Identity service is read-only (Cannot modify users / groups
            / memberships).
          content:
            application/json:
              schema:
                x-content-type: application/json
        "404":
          description: |-
            A Deployment with the provided id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: User
    options:
      tags:
      - User
      summary: Options
      description: |-
        The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such
        and one for individual user instances. The `OPTIONS` request allows checking for the set of
        available operations that the currently authenticated user can perform on the /user resource.
        If the user can perform an operation or not may depend on various things, including the user's
        authorizations to interact with this resource and the internal configuration of the process
        engine.
      operationId: availableUserOperations
      parameters:
      - name: id
        in: path
        description: The id of the user to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOptionsDto'
              examples:
                example-1:
                  summary: GET `/user`
                  value:
                    links:
                    - method: GET
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter/profile
                      rel: self
                    - method: DELETE
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter
                      rel: delete
                    - method: PUT
                      href: http://localhost:8080/camunda/api/engine/engine/default/user/peter/profile
                      rel: update
      x-swagger-router-controller: User
  /user/{id}/credentials:
    put:
      tags:
      - User
      summary: Update Credentials
      description: Updates a user's credentials (password)
      operationId: updateCredentials
      parameters:
      - name: id
        in: path
        description: The id of the user to be updated.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: password
        in: query
        description: The users new password.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: authenticatedUserPassword
        in: query
        description: |-
          The password of the authenticated user who changes the password of the user
          (i.e., the user with passed id as path parameter).
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsDto'
            examples:
              example-1:
                summary: PUT /user/jonny1/credentials
                value:
                  password: s3cr3t
                  authenticatedUserPassword: demo
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                x-content-type: application/json
        "400":
          description: The authenticated user password does not match
          content:
            application/json:
              schema:
                x-content-type: application/json
        "403":
          description: Identity service is read-only (Cannot modify users / groups
            / memberships).
          content:
            application/json:
              schema:
                x-content-type: application/json
        "404":
          description: If the corresponding user cannot be found
          content:
            application/json:
              schema:
                x-content-type: application/json
        "500":
          description: |-
            The user could not be updated due to an internal server error. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: User
  /user/{id}/profile:
    get:
      tags:
      - User
      summary: Get Profile
      description: Retrieves a user's profile.
      operationId: getUserProfile
      parameters:
      - name: id
        in: path
        description: The id of the user to retrieve.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileDto'
                x-content-type: application/json
              examples:
                example-1:
                  summary: GET `/user/jonny1/profile
                  value:
                  - id: jonny1
                    firstName: John
                    lastName: Doe
                    email: anEmailAddress
        "404":
          description: |-
            Execution with given id does not exist. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: User
  /user/{id}/unlock:
    post:
      tags:
      - User
      summary: Unlock User
      description: Unlocks a user by id.
      operationId: unlockUser
      parameters:
      - name: id
        in: path
        description: The id of the user to be unlocked.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Request successful.
        "403":
          description: The user who performed the operation is not a Camunda admin
            user.
          content:
            application/json:
              schema:
                x-content-type: application/json
        "404":
          description: |-
            User cannot be found. See the
            [Introduction](https://docs.camunda.org/manual/7.14/reference/rest/overview/#error-handling)
            for the error response format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionDto'
      x-swagger-router-controller: User
  /version:
    get:
      tags:
      - Version
      description: Retrieves the version of the Rest API.
      operationId: getRestAPIVersion
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionDto'
              examples:
                example-1:
                  summary: Status 200 Response
                  description: The Response content of a status 200
                  value:
                    version: 7.13.0
      x-swagger-router-controller: Version
components:
  schemas:
    AbstractSetRemovalTimeDto:
      type: object
      properties:
        absoluteRemovalTime:
          type: string
          description: |-
            The date for which the instances shall be removed. Value may not be `null`.

            **Note:** Cannot be set in conjunction with `clearedRemovalTime` or `calculatedRemovalTime`.
          format: date-time
          nullable: true
        clearedRemovalTime:
          type: boolean
          description: |-
            Sets the removal time to `null`. Value may only be `true`, as `false` is the default behavior.

            **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `calculatedRemovalTime`.
          nullable: true
        calculatedRemovalTime:
          type: boolean
          description: |-
            The removal time is calculated based on the engine's configuration settings. Value may only be `true`, as `false` is the default behavior.

            **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `clearedRemovalTime`.
          nullable: true
    ActivityInstanceDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the activity instance.
        parentActivityInstanceId:
          type: string
          description: The id of the parent activity instance, for example a sub process
            instance.
        activityId:
          type: string
          description: The id of the activity.
        activityName:
          type: string
          description: The name of the activity
        activityType:
          type: string
          description: The type of activity (corresponds to the XML element name in
            the BPMN 2.0, e.g., 'userTask')
        processInstanceId:
          type: string
          description: The id of the process instance this activity instance is part
            of.
        processDefinitionId:
          type: string
          description: The id of the process definition.
        childActivityInstances:
          type: array
          description: A list of child activity instances.
          items:
            $ref: '#/components/schemas/ActivityInstanceDto'
        childTransitionInstances:
          type: array
          description: |-
            A list of child transition instances.
            A transition instance represents an execution waiting in an asynchronous continuation.
          items:
            $ref: '#/components/schemas/TransitionInstanceDto'
        executionIds:
          type: array
          description: A list of execution ids.
          items:
            type: string
        incidentIds:
          type: array
          description: A list of incident ids.
          items:
            type: string
        incidents:
          type: array
          description: |-
            A list of JSON objects containing incident specific properties:
            * `id`: the id of the incident
            * `activityId`: the activity id in which the incident occurred
          items:
            $ref: '#/components/schemas/ActivityInstanceIncidentDto'
      description: A JSON object corresponding to the Activity Instance tree of the
        given process instance.
      example:
        childTransitionInstances:
        - activityId: activityId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          executionId: executionId
          activityName: activityName
          incidents:
          - id: id
            parentActivityInstanceId: parentActivityInstanceId
          - id: id
            parentActivityInstanceId: parentActivityInstanceId
          id: id
          activityType: activityType
          incidentIds:
          - incidentIds
          - incidentIds
          parentActivityInstanceId: parentActivityInstanceId
        - activityId: activityId
          processInstanceId: processInstanceId
          processDefinitionId: processDefinitionId
          executionId: executionId
          activityName: activityName
          incidents:
          - id: id
            parentActivityInstanceId: parentActivityInstanceId
          - id: id
            parentActivityInstanceId: parentActivityInstanceId
          id: id
          activityType: activityType
          incidentIds:
          - incidentIds
          - incidentIds
          parentActivityInstanceId: parentActivityInstanceId
        activityId: activityId
        processInstanceId: processInstanceId
        processDefinitionId: processDefinitionId
        executionIds:
        - executionIds
        - executionIds
        activityName: activityName
        incidents:
        - null
        - null
        id: id
        activityType: activityType
        incidentIds:
        - incidentIds
        - incidentIds
        childActivityInstances:
        - null
        - null
        parentActivityInstanceId: parentActivityInstanceId
    ActivityInstanceIncidentDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the incident.
        parentActivityInstanceId:
          type: string
          description: The activity id in which the incident happened.
      description: An activity instance, incident pair.
      example:
        id: id
        parentActivityInstanceId: parentActivityInstanceId
    ActivityStatisticsResultDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the activity the results are aggregated for.
        instances:
          type: integer
          description: The total number of running process instances of this activity.
          format: int32
        failedJobs:
          type: integer
          description: |-
            The total number of failed jobs for the running instances.
            **Note**: Will be `0` (not `null`), if failed jobs were excluded.
          format: int32
        incidents:
          type: array
          description: |-
            Each item in the resulting array is an object which contains `incidentType` and `incidentCount`.
            **Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded.
            Furthermore, the array will be also empty if no incidents were found.
          items:
            $ref: '#/components/schemas/IncidentStatisticsResultDto'
      example:
        instances: 0
        failedJobs: 6
        incidents:
        - incidentCount: 1
          incidentType: incidentType
        - incidentCount: 1
          incidentType: incidentType
        id: id
    AtomLink:
      type: object
      properties:
        rel:
          type: string
          description: The relation of the link to the object that belongs to.
        href:
          type: string
          description: The url of the link.
        method:
          type: string
          description: The http method.
    AttachmentDto:
      allOf:
      - type: object
        properties:
          id:
            type: string
            description: The id of the task attachment.
          name:
            type: string
            description: The name of the task attachment.
          description:
            type: string
            description: The description of the task attachment.
          taskId:
            type: string
            description: The id of the task to which the attachment belongs.
          type:
            type: string
            description: |-
              Indication of the type of content that this attachment refers to.
              Can be MIME type or any other indication.
          url:
            type: string
            description: The url to the remote content of the task attachment.
          createTime:
            type: string
            description: |-
              The time the variable was inserted.
              [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
              `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
            format: date-time
          removalTime:
            type: string
            description: |-
              The time after which the attachment should be removed by the History Cleanup job.
              [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
              `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
            format: date-time
            nullable: true
          rootProcessInstanceId:
            type: string
            description: The process instance id of the root process instance that
              initiated the process containing the task.
      - $ref: '#/components/schemas/LinkableDto'
    AuthorizationExceptionDto:
      allOf:
      - type: object
        properties:
          userId:
            type: string
            description: The id of the user that does not have expected permissions
          missingAuthorizations:
            type: array
            items:
              $ref: '#/components/schemas/MissingAuthorizationDto'
      - $ref: '#/components/schemas/ExceptionDto'
    BatchDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the batch.
        type:
          type: string
          description: The type of the batch.
        totalJobs:
          type: integer
          description: The total jobs of a batch is the number of batch execution
            jobs required to complete the batch.
          format: int32
        jobsCreated:
          type: integer
          description: The number of batch execution jobs already created by the seed
            job.
          format: int32
        batchJobsPerSeed:
          type: integer
          description: |-
            The number of batch execution jobs created per seed job invocation.
            The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property).
          format: int32
        invocationsPerBatchJob:
          type: integer
          description: |-
            Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times.
            E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job.
          format: int32
        seedJobDefinitionId:
          type: string
          description: The job definition id for the seed jobs of this batch.
        monitorJobDefinitionId:
          type: string
          description: The job definition id for the monitor jobs of this batch.
        batchJobDefinitionId:
          type: string
          description: The job definition id for the batch execution jobs of this
            batch.
        suspended:
          type: boolean
          description: Indicates whether this batch is suspended or not.
        tenantId:
          type: string
          description: The tenant id of the batch.
        createUserId:
          type: string
          description: The id of the user that created the batch.
      example:
        monitorJobDefinitionId: monitorJobDefinitionId
        createUserId: createUserId
        invocationsPerBatchJob: 5
        totalJobs: 0
        jobsCreated: 6
        tenantId: tenantId
        batchJobsPerSeed: 1
        seedJobDefinitionId: seedJobDefinitionId
        id: id
        type: type
        batchJobDefinitionId: batchJobDefinitionId
        suspended: true
    CaseDefinitionDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the case definition
        key:
          type: string
          description: The key of the case definition, i.e., the id of the CMMN 2.0
            XML case definition.
        category:
          type: string
          description: The category of the case definition.
        name:
          type: string
          description: The name of the case definition.
        version:
          type: integer
          description: The version of the case definition that the engine assigned
            to it.
          format: int32
        resource:
          type: string
          description: The file name of the case definition.
        deploymentId:
          type: string
          description: The deployment id of the case definition.
        tenantId:
          type: string
          description: The tenant id of the case definition.
        historyTimeToLive:
          minimum: 0
          type: integer
          description: |-
            History time to live value of the case definition.
            Is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
          format: int32
          nullable: true
    CommentDto:
      allOf:
      - type: object
        properties:
          id:
            type: string
            description: The id of the task comment.
          userId:
            type: string
            description: The id of the user who created the comment.
          taskId:
            type: string
            description: The id of the task to which the comment belongs.
          time:
            type: string
            description: |-
              The time when the comment was created.
              [Default format]($(docsUrl)/reference/rest/overview/date-format/)
              `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
            format: date-time
          message:
            type: string
            description: The content of the comment.
          removalTime:
            type: string
            description: |-
              The time after which the comment should be removed by the History Cleanup job.
              [Default format]($(docsUrl)/reference/rest/overview/date-format/)
              `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
            format: date-time
            nullable: true
          rootProcessInstanceId:
            type: string
            description: |-
              The process instance id of the root process instance that initiated the process
              containing the task.
      - $ref: '#/components/schemas/LinkableDto'
    CompleteExternalTaskDto:
      type: object
      properties:
        workerId:
          type: string
          description: The id of the worker that completes the task. Must match the
            id of the worker who has most recently locked the task.
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: 'A JSON object containing variable key-value pairs. Each key
            is a variable name and each value a JSON variable value object with the
            following properties:'
        localVariables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: 'A JSON object containing local variable key-value pairs. Local
            variables are set only in the scope of external task. Each key is a variable
            name and each value a JSON variable value object with the following properties:'
    CompleteTaskDto:
      type: object
      properties:
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A JSON object containing variable key-value pairs.
        withVariablesInReturn:
          type: boolean
          description: |-
            Indicates whether the response should contain the process variables or not. The
            default is `false` with a response code of `204`. If set to `true` the response
            contains the process variables and has a response code of `200`. If the task is not
            associated with a process instance (e.g. if it's part of a case instance) no
            variables will be returned.
          nullable: true
          default: false
    CorrelationMessageDto:
      type: object
      properties:
        messageName:
          type: string
          description: The name of the message to deliver.
        businessKey:
          type: string
          description: |-
            Used for correlation of process instances that wait for incoming messages.
            Will only correlate to executions that belong to a process instance with the provided business key.
        tenantId:
          type: string
          description: |-
            Used to correlate the message for a tenant with the given id.
            Will only correlate to executions and process definitions which belong to the tenant.
            Must not be supplied in conjunction with a `withoutTenantId`.
        withoutTenantId:
          type: boolean
          description: |-
            A Boolean value that indicates whether the message should only be correlated to executions
            and process definitions which belong to no tenant or not. Value may only be `true`, as `false`
            is the default behavior.
            Must not be supplied in conjunction with a `tenantId`.
          nullable: true
          default: false
        processInstanceId:
          type: string
          description: Used to correlate the message to the process instance with
            the given id.
        correlationKeys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            Used for correlation of process instances that wait for incoming messages.
            Has to be a JSON object containing key-value pairs that are matched against process instance variables
            during correlation. Each key is a variable name and each value a JSON variable value object with the
            following properties.
        localCorrelationKeys:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            Local variables used for correlation of executions (process instances) that wait for incoming messages.
            Has to be a JSON object containing key-value pairs that are matched against local variables during correlation.
            Each key is a variable name and each value a JSON variable value object with the following properties.
        processVariables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A map of variables that is injected into the triggered execution or process instance after the message
            has been delivered. Each key is a variable name and each value a JSON variable value object with
            the following properties.
        processVariablesLocal:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A map of local variables that is injected into the triggered execution or process instance after the
            message has been delivered. Each key is a variable name and each value a JSON variable value object
            with the following properties.
        all:
          type: boolean
          description: |-
            A Boolean value that indicates whether the message should be correlated to exactly one entity or multiple entities.
            If the value is set to `false`, the message will be correlated to exactly one entity (execution or process definition).
            If the value is set to `true`, the message will be correlated to multiple executions and a process definition that
            can be instantiated by this message in one go.
          nullable: true
          default: false
        resultEnabled:
          type: boolean
          description: |-
            A Boolean value that indicates whether the result of the correlation should be returned or not.
            If this property is set to `true`, there will be returned a list of message correlation result objects. Depending on the
            all property, there will be either one ore more returned results in the list.

            The default value is `false`, which means no result will be returned.
          nullable: true
          default: false
        variablesInResultEnabled:
          type: boolean
          description: |-
            A Boolean value that indicates whether the result of the correlation should contain process variables or not.
            The parameter resultEnabled should be set to `true` in order to use this it.

            The default value is `false`, which means the variables will not be returned.
          nullable: true
          default: false
    CountResultDto:
      type: object
      properties:
        count:
          type: integer
          description: The number of matching instances.
          format: int64
      example:
        count: 0
    DecisionDefinitionDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the decision definition
        key:
          type: string
          description: The key of the decision definition, i.e., the id of the DMN
            1.0 XML decision definition.
        category:
          type: string
          description: The category of the decision definition.
        name:
          type: string
          description: The name of the decision definition.
        version:
          type: integer
          description: The version of the decision definition that the engine assigned
            to it.
          format: int32
        resource:
          type: string
          description: The file name of the decision definition.
        deploymentId:
          type: string
          description: The deployment id of the decision definition.
        tenantId:
          type: string
          description: The tenant id of the decision definition.
        decisionRequirementsDefinitionId:
          type: string
          description: The id of the decision requirements definition this decision
            definition belongs to.
        decisionRequirementsDefinitionKey:
          type: string
          description: The key of the decision requirements definition this decision
            definition belongs to.
        historyTimeToLive:
          minimum: 0
          type: integer
          description: |-
            History time to live value of the decision definition.
            Is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
          format: int32
          nullable: true
        versionTag:
          type: string
          description: The version tag of the decision definition.
    DecisionRequirementsDefinitionDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the decision requirements definition
        key:
          type: string
          description: The key of the decision requirements definition, i.e., the
            id of the DMN 1.0 XML decision definition.
        name:
          type: string
          description: The name of the decision requirements definition.
        category:
          type: string
          description: The category of the decision requirements definition.
        version:
          type: integer
          description: The version of the decision requirements definition that the
            engine assigned to it.
          format: int32
        resource:
          type: string
          description: The file name of the decision requirements definition.
        deploymentId:
          type: string
          description: The deployment id of the decision requirements definition.
        tenantId:
          type: string
          description: The tenant id of the decisionrequirements definition.
    DeleteHistoricProcessInstancesDto:
      type: object
      properties:
        historicProcessInstanceIds:
          type: array
          description: A list historic process instance ids to delete.
          items:
            type: string
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
        deleteReason:
          type: string
          description: A string with delete reason.
        failIfNotExists:
          type: boolean
          description: If set to `false`, the request will still be successful if
            one ore more of the process ids are not found.
          nullable: true
    DeleteProcessInstancesDto:
      type: object
      properties:
        processInstanceIds:
          type: array
          description: A list process instance ids to delete.
          items:
            type: string
        deleteReason:
          type: string
          description: A string with delete reason.
        skipCustomListeners:
          type: boolean
          description: Skip execution listener invocation for activities that are
            started or ended as part of this request.
          nullable: true
        skipSubprocesses:
          type: boolean
          description: Skip deletion of the subprocesses related to deleted processes
            as part of this request.
          nullable: true
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
    DeploymentDto:
      allOf:
      - type: object
        properties:
          id:
            type: string
            description: The id of the deployment.
          tenantId:
            type: string
            description: The tenant id of the deployment.
          deploymentTime:
            type: string
            description: The time when the deployment was created.
            format: date-time
          source:
            type: string
            description: The source of the deployment.
          name:
            type: string
            description: The name of the deployment.
      - $ref: '#/components/schemas/LinkableDto'
    DeploymentResourceDto:
      title: DeploymentResourceDto
      type: object
      properties:
        id:
          type: string
          description: The id of the deployment resource.
        name:
          type: string
          description: The name of the deployment resource
        deploymentId:
          type: string
          description: The id of the deployment.
      description: |-
        A JSON object corresponding to the `Resource` interface in the engine.
        Its properties are as follows:
      example:
        deploymentId: deploymentId
        name: name
        id: id
    DeploymentWithDefinitionsDto:
      allOf:
      - type: object
        properties:
          deployedProcessDefinitions:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/ProcessDefinitionDto'
            description: |-
              A JSON Object containing a property for each of the process definitions,
              which are successfully deployed with that deployment.
              The key is the process definition id, the value is a JSON Object corresponding to the process definition.
          deployedDecisionDefinitions:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/DecisionDefinitionDto'
            description: |-
              A JSON Object containing a property for each of the decision definitions,
              which are successfully deployed with that deployment.
              The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
          deployedDecisionRequirementsDefinitions:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/DecisionRequirementsDefinitionDto'
            description: |-
              A JSON Object containing a property for each of the decision requirements definitions,
              which are successfully deployed with that deployment.
              The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
          deployedCaseDefinitions:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/CaseDefinitionDto'
            description: |-
              A JSON Object containing a property for each of the case definitions,
              which are successfully deployed with that deployment.
              The key is the case definition id, the value is a JSON Object corresponding to the case definition.
      - $ref: '#/components/schemas/DeploymentDto'
    DurationReportResultDto:
      type: object
      properties:
        period:
          type: integer
          description: |-
            Specifies a timespan within a year.
            **Note:** The period must be interpreted in conjunction with the returned `periodUnit`.
          format: int32
        periodUnit:
          type: string
          description: The unit of the given period. Possible values are `MONTH` and
            `QUARTER`.
          enum:
          - MONTH
          - QUARTER
        minimum:
          type: integer
          description: The smallest duration in milliseconds of all completed process
            instances which were started in the given period.
          format: int64
        maximum:
          type: integer
          description: The greatest duration in milliseconds of all completed process
            instances which were started in the given period.
          format: int64
        average:
          type: integer
          description: The average duration in milliseconds of all completed process
            instances which were started in the given period.
          format: int64
    EvaluationConditionDto:
      type: object
      properties:
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A map of variables which are used for evaluation of the conditions and are injected into the process instances which have been triggered.
            Each key is a variable name and each value a JSON variable value object with the following properties.
        businessKey:
          type: string
          description: Used for the process instances that have been triggered after
            the evaluation.
        tenantId:
          type: string
          description: |-
            Used to evaluate a condition for a tenant with the given id.
            Will only evaluate conditions of process definitions which belong to the tenant.
        withoutTenantId:
          type: boolean
          description: |-
            A Boolean value that indicates whether the conditions should only be evaluated of process definitions which belong to no tenant or not.
            Value may only be true, as false is the default behavior.
          nullable: true
        processDefinitionId:
          type: string
          description: Used to evaluate conditions of the process definition with
            the given id.
    EventSubscriptionDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the event subscription.
        eventType:
          type: string
          description: The type of the event subscription.
        eventName:
          type: string
          description: The name of the event this subscription belongs to as defined
            in the process model.
        executionId:
          type: string
          description: The execution that is subscribed on the referenced event.
        processInstanceId:
          type: string
          description: The process instance this subscription belongs to.
        activityId:
          type: string
          description: |-
            The identifier of the activity that this event subscription belongs to.
            This could for example be the id of a receive task.
        createdDate:
          type: string
          description: The time this event subscription was created.
          format: date-time
          nullable: true
        tenantId:
          type: string
          description: |-
            The id of the tenant this event subscription belongs to.
            Can be `null` if the subscription belongs to no single tenant.
      example:
        executionId: executionId
        processInstanceId: processInstanceId
        activityId: activityId
        createdDate: 2000-01-23T04:56:07.000+00:00
        tenantId: tenantId
        eventName: eventName
        id: id
        eventType: eventType
    EventSubscriptionQueryDto:
      type: object
      properties:
        eventSubscriptionId:
          type: string
          description: The id of the event subscription.
        eventName:
          type: string
          description: The name of the event this subscription belongs to as defined
            in the process model.
        eventType:
          type: string
          description: The type of the event subscription.
          enum:
          - message
          - signal
          - compensate
          - conditional
        executionId:
          type: string
          description: The execution that is subscribed on the referenced event.
        processInstanceId:
          type: string
          description: The process instance this subscription belongs to.
        activityId:
          type: string
          description: |-
            The identifier of the activity that this event subscription belongs to.
            This could for example be the id of a receive task.
        tenantIdIn:
          type: array
          description: |-
            Filter by a comma-separated list of tenant ids.
            Only select subscriptions that belong to one of the given tenant ids.
          items:
            type: string
        withoutTenantId:
          type: boolean
          description: |-
            Only select subscriptions which have no tenant id.
            Value may only be `true`, as `false` is the default behavior.
          nullable: true
        includeEventSubscriptionsWithoutTenantId:
          type: boolean
          description: |-
            Select event subscriptions which have no tenant id.
            Can be used in combination with tenantIdIn parameter.
            Value may only be `true`, as `false` is the default behavior.
          nullable: true
        sorting:
          type: array
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/EventSubscriptionQueryDto_sorting'
      description: A event subscription query which retrieves a list of event subscriptions
    ExceptionDto:
      title: ExceptionDto
      type: object
      properties:
        type:
          type: string
          description: An exception class indicating the occurred error.
        message:
          type: string
          description: A detailed message of the error.
    ExecutionDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the Execution.
        processInstanceId:
          type: string
          description: The id of the root of the execution tree representing the process
            instance.
        ended:
          type: boolean
          description: Indicates if the execution is ended.
        tenantId:
          type: string
          description: |-
            The id of the tenant this execution belongs to. Can be `null`
            if the execution belongs to no single tenant.
      example:
        processInstanceId: processInstanceId
        ended: true
        tenantId: tenantId
        id: id
    ExtendLockOnExternalTaskDto:
      type: object
      properties:
        workerId:
          type: string
          description: The ID of a worker who is locking the external task.
        newDuration:
          type: integer
          description: An amount of time (in milliseconds). This is the new lock duration
            starting from the current moment.
          format: int64
    ExternalTaskBpmnError:
      allOf:
      - type: object
        properties:
          workerId:
            type: string
            description: |-
              The id of the worker that reports the failure. Must match the id of the worker who has most recently
              locked the task.
      - $ref: '#/components/schemas/TaskBpmnErrorDto'
    ExternalTaskDto:
      title: ExternalTaskDto
      type: object
      properties:
        activityId:
          type: string
          description: The id of the activity that this external task belongs to.
        activityInstanceId:
          type: string
          description: The id of the activity instance that the external task belongs
            to.
        errorMessage:
          type: string
          description: |-
            The full error message submitted with the latest reported failure executing this task; `null` if no
            failure was reported previously or if no error message was submitted
        executionId:
          type: string
          description: The id of the execution that the external task belongs to.
        id:
          type: string
          description: The id of the external task.
        lockExpirationTime:
          type: string
          description: The date that the task's most recent lock expires or has expired.
          format: date-time
          nullable: true
        processDefinitionId:
          type: string
          description: The id of the process definition the external task is defined
            in.
        processDefinitionKey:
          type: string
          description: The key of the process definition the external task is defined
            in.
        processDefinitionVersionTag:
          type: string
          description: The version tag of the process definition the external task
            is defined in.
        processInstanceId:
          type: string
          description: The id of the process instance the external task belongs to.
        tenantId:
          type: string
          description: The id of the tenant the external task belongs to.
        retries:
          type: integer
          description: The number of retries the task currently has left.
          format: int32
          nullable: true
        suspended:
          type: boolean
          description: A flag indicating whether the external task is suspended or
            not.
          nullable: true
        workerId:
          type: string
          description: The id of the worker that posesses or posessed the most recent
            lock.
        topicName:
          type: string
          description: The topic name of the external task.
        priority:
          type: integer
          description: The priority of the external task.
          format: int64
          nullable: true
        businessKey:
          type: string
          description: The business key of the process instance the external task
            belongs to.
      description: An External Task object with the following properties
      example:
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        workerId: workerId
        lockExpirationTime: 2000-01-23T04:56:07.000+00:00
        errorMessage: errorMessage
        activityInstanceId: activityInstanceId
        priority: 6
        suspended: true
        processDefinitionKey: processDefinitionKey
        activityId: activityId
        executionId: executionId
        processDefinitionVersionTag: processDefinitionVersionTag
        retries: 0
        tenantId: tenantId
        businessKey: businessKey
        topicName: topicName
        id: id
    ExternalTaskFailureDto:
      type: object
      properties:
        workerId:
          type: string
          description: |-
            The id of the worker that reports the failure. Must match the id of the worker who has most recently
            locked the task.
        errorMessage:
          type: string
          description: An message indicating the reason of the failure.
        errorDetails:
          type: string
          description: A detailed error description.
        retries:
          type: integer
          description: |-
            A number of how often the task should be retried. Must be >= 0. If this is 0, an incident is created and
            the task cannot be fetched anymore unless the retries are increased again. The incident's message is set
            to the `errorMessage` parameter.
          format: int32
        retryTimeout:
          type: integer
          description: A timeout in milliseconds before the external task becomes
            available again for fetching. Must be >= 0.
          format: int64
    ExternalTaskQueryDto:
      title: ExternalTaskQueryDto
      type: object
      properties:
        externalTaskId:
          type: string
          description: Filter by an external task's id.
        externalTaskIdIn:
          type: array
          description: Filter by the comma-separated list of external task ids.
          items:
            type: string
        topicName:
          type: string
          description: Filter by an external task topic.
        workerId:
          type: string
          description: Filter by the id of the worker that the task was most recently
            locked by.
        locked:
          type: boolean
          description: |-
            Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
            Value may only be `true`, as `false` matches any external task.
          nullable: true
        notLocked:
          type: boolean
          description: |-
            Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
            Value may only be `true`, as `false` matches any external task.
          nullable: true
        withRetriesLeft:
          type: boolean
          description: |-
            Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
            `true`, as `false` matches any external task.
          nullable: true
        noRetriesLeft:
          type: boolean
          description: |-
            Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
            external task.
          nullable: true
        lockExpirationAfter:
          type: string
          description: |-
            Restrict to external tasks that have a lock that expires after a given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        lockExpirationBefore:
          type: string
          description: |-
            Restrict to external tasks that have a lock that expires before a given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        activityId:
          type: string
          description: Filter by the id of the activity that an external task is created
            for.
        activityIdIn:
          type: array
          description: Filter by the comma-separated list of ids of the activities
            that an external task is created for.
          items:
            type: string
        executionId:
          type: string
          description: Filter by the id of the execution that an external task belongs
            to.
        processInstanceId:
          type: string
          description: Filter by the id of the process instance that an external task
            belongs to.
        processInstanceIdIn:
          type: array
          description: Filter by a comma-separated list of process instance ids that
            an external task may belong to.
          items:
            type: string
        processDefinitionId:
          type: string
          description: Filter by the id of the process definition that an external
            task belongs to.
        tenantIdIn:
          type: array
          description: |-
            Filter by a comma-separated list of tenant ids.
            An external task must have one of the given tenant ids.
          items:
            type: string
        active:
          type: boolean
          description: Only include active tasks. Value may only be `true`, as `false`
            matches any external task.
          nullable: true
        suspended:
          type: boolean
          description: Only include suspended tasks. Value may only be `true`, as
            `false` matches any external task.
          nullable: true
        priorityHigherThanOrEquals:
          type: integer
          description: |-
            Only include jobs with a priority higher than or equal to the given value.
            Value must be a valid `long` value.
          format: int64
          nullable: true
        priorityLowerThanOrEquals:
          type: integer
          description: |-
            Only include jobs with a priority lower than or equal to the given value.
            Value must be a valid `long` value.
          format: int64
          nullable: true
        sorting:
          type: array
          description: |-
            A JSON array of criteria to sort the result by. Each element of the array is a JSON object that
                                specifies one ordering. The position in the array identifies the rank of an ordering, i.e., whether
                                it is primary, secondary, etc. The ordering objects have the following properties:

                                **Note:** The `sorting` properties will not be applied to the External Task count query.
          items:
            $ref: '#/components/schemas/ExternalTaskQueryDto_sorting'
      description: 'A JSON object with the following properties:'
    FetchExternalTaskTopicDto:
      required:
      - lockDuration
      - topicName
      type: object
      properties:
        topicName:
          type: string
          description: '**Mandatory.** The topic''s name.'
        lockDuration:
          type: integer
          description: '**Mandatory.** The duration to lock the external tasks for
            in milliseconds.'
          format: int64
          nullable: true
        variables:
          type: array
          description: |-
            A JSON array of `String` values that represent variable names. For each result task belonging to this
            topic, the given variables are returned as well if they are accessible from the external task's
            execution. If not provided - all variables will be fetched.
          items:
            type: string
        localVariables:
          type: boolean
          description: If `true` only local variables will be fetched.
          nullable: true
          default: false
        businessKey:
          type: string
          description: A `String` value which enables the filtering of tasks based
            on process instance business key.
        processDefinitionId:
          type: string
          description: Filter tasks based on process definition id.
        processDefinitionIdIn:
          type: array
          description: Filter tasks based on process definition ids.
          items:
            type: string
        processDefinitionKey:
          type: string
          description: Filter tasks based on process definition key.
        processDefinitionKeyIn:
          type: array
          description: Filter tasks based on process definition keys.
          items:
            type: string
        processDefinitionVersionTag:
          type: string
          description: Filter tasks based on process definition version tag.
        withoutTenantId:
          type: boolean
          description: Filter tasks without tenant id.
          nullable: true
          default: false
        tenantIdIn:
          type: array
          description: Filter tasks based on tenant ids.
          items:
            type: string
        processVariables:
          type: object
          additionalProperties: true
          description: |-
            A `JSON` object used for filtering tasks based on process instance variable values. A property name of
            the object represents a process variable name, while the property value represents the process variable
            value to filter tasks by.
        deserializeValues:
          type: boolean
          description: |-
            Determines whether serializable variable values (typically variables that store custom Java objects)
            should be deserialized on server side (default `false`).

            If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
            using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note
            that this requires the Java classes of the variable value to be on the REST API's classpath.

            If set to `false`, a serializable variable will be returned in its serialized format. For example, a
            variable that is serialized as XML will be returned as a JSON string containing XML.
          nullable: true
          default: false
        includeExtensionProperties:
          type: boolean
          description: |-
            Determines whether custom extension properties defined in the BPMN activity of the external task (e.g.
            via the Extensions tab in the Camunda modeler) should be included in the response. Default: false
          nullable: true
          default: false
    FetchExternalTasksDto:
      required:
      - maxTasks
      - workerId
      type: object
      properties:
        workerId:
          type: string
          description: |-
            **Mandatory.** The id of the worker on which behalf tasks are fetched. The returned tasks are locked for
            that worker and can only be completed when providing the same worker id.
        maxTasks:
          type: integer
          description: '**Mandatory.** The maximum number of tasks to return.'
          format: int32
          nullable: true
        usePriority:
          type: boolean
          description: |-
            A `boolean` value, which indicates whether the task should be fetched based on its priority
            or arbitrarily.
          nullable: true
        asyncResponseTimeout:
          type: integer
          description: |-
            The [Long Polling](https://docs.camunda.org/manual/7.14/user-guide/process-engine/external-tasks/#long-polling-to-fetch-and-lock-external-tasks)
            timeout in milliseconds.

            **Note:** The value cannot be set larger than 1.800.000 milliseconds (corresponds to 30 minutes).
          format: int64
          nullable: true
        topics:
          type: array
          description: |-
            A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be
            arbitrarily distributed among these topics. Each topic object has the following properties:
          items:
            $ref: '#/components/schemas/FetchExternalTaskTopicDto'
    FormDto:
      title: FormDto
      type: object
      properties:
        key:
          type: string
          description: The form key.
        contextPath:
          type: string
          description: |-
            The context path of the process application. If the task (or the process definition) does not
            belong to a process application deployment or a process definition at all, this
            property is not set.
      example:
        contextPath: contextPath
        key: key
    HistoricActivityInstanceDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the activity instance.
        parentActivityInstanceId:
          type: string
          description: The id of the parent activity instance, for example a sub process
            instance.
        activityId:
          type: string
          description: The id of the activity that this object is an instance of.
        activityName:
          type: string
          description: The name of the activity that this object is an instance of.
        activityType:
          type: string
          description: The type of the activity that this object is an instance of.
        processDefinitionKey:
          type: string
          description: The key of the process definition that this activity instance
            belongs to.
        processDefinitionId:
          type: string
          description: The id of the process definition that this activity instance
            belongs to.
        processInstanceId:
          type: string
          description: The id of the process instance that this activity instance
            belongs to.
        executionId:
          type: string
          description: The id of the execution that executed this activity instance.
        taskId:
          type: string
          description: The id of the task that is associated to this activity instance.
            Is only set if the activity is a user task.
        assignee:
          type: string
          description: The assignee of the task that is associated to this activity
            instance. Is only set if the activity is a user task.
        calledProcessInstanceId:
          type: string
          description: The id of the called process instance. Is only set if the activity
            is a call activity and the called instance a process instance.
        calledCaseInstanceId:
          type: string
          description: The id of the called case instance. Is only set if the activity
            is a call activity and the called instance a case instance.
        startTime:
          type: string
          description: |-
            The time the instance was started. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        endTime:
          type: string
          description: |-
            The time the instance ended. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        durationInMillis:
          type: integer
          description: The time the instance took to finish (in milliseconds).
          format: int32
        canceled:
          type: boolean
          description: If `true`, this activity instance is canceled.
          nullable: true
        completeScope:
          type: boolean
          description: If `true`, this activity instance did complete a BPMN 2.0 scope.
          nullable: true
        tenantId:
          type: string
          description: The tenant id of the activity instance.
        removalTime:
          type: string
          description: |-
            The time after which the activity instance should be removed by the History Cleanup job. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        rootProcessInstanceId:
          type: string
          description: The process instance id of the root process instance that initiated
            the process containing this activity instance.
      example:
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        durationInMillis: 0
        activityName: activityName
        completeScope: true
        processDefinitionKey: processDefinitionKey
        removalTime: 2000-01-23T04:56:07.000+00:00
        activityId: activityId
        executionId: executionId
        canceled: true
        calledCaseInstanceId: calledCaseInstanceId
        tenantId: tenantId
        startTime: 2000-01-23T04:56:07.000+00:00
        rootProcessInstanceId: rootProcessInstanceId
        id: id
        assignee: assignee
        endTime: 2000-01-23T04:56:07.000+00:00
        activityType: activityType
        calledProcessInstanceId: calledProcessInstanceId
        taskId: taskId
        parentActivityInstanceId: parentActivityInstanceId
    HistoricActivityInstanceQueryDto:
      type: object
      properties:
        activityInstanceId:
          type: string
          description: Filter by activity instance id.
        processInstanceId:
          type: string
          description: Filter by process instance id.
        processDefinitionId:
          type: string
          description: Filter by process definition id.
        executionId:
          type: string
          description: Filter by the id of the execution that executed the activity
            instance.
        activityId:
          type: string
          description: Filter by the activity id (according to BPMN 2.0 XML).
        activityName:
          type: string
          description: Filter by the activity name (according to BPMN 2.0 XML).
        activityType:
          type: string
          description: Filter by activity type.
        taskAssignee:
          type: string
          description: Only include activity instances that are user tasks and assigned
            to a given user.
        finished:
          type: boolean
          description: |-
            Only include finished activity instances.
            Value may only be `true`, as `false` behaves the same as when the property is not set.
          nullable: true
        unfinished:
          type: boolean
          description: |-
            Only include unfinished activity instances.
            Value may only be `true`, as `false` behaves the same as when the property is not set.
          nullable: true
        canceled:
          type: boolean
          description: |-
            Only include canceled activity instances.
            Value may only be `true`, as `false` behaves the same as when the property is not set.
          nullable: true
        completeScope:
          type: boolean
          description: |-
            Only include activity instances which completed a scope.
            Value may only be `true`, as `false` behaves the same as when the property is not set.
          nullable: true
        startedBefore:
          type: string
          description: |-
            Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        startedAfter:
          type: string
          description: |-
            Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        finishedBefore:
          type: string
          description: |-
            Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        finishedAfter:
          type: string
          description: |-
            Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        tenantIdIn:
          type: array
          description: Must be a JSON array of Strings. An activity instance must
            have one of the given tenant ids.
          items:
            type: string
        withoutTenantId:
          type: boolean
          description: Only include historic activity instances that belong to no
            tenant. Value may only be `true`, as `false` is the default behavior.
          nullable: true
        sorting:
          type: array
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/HistoricActivityInstanceQueryDto_sorting'
      description: A historic activity instance query which defines a group of historic
        activity instances
    HistoricProcessInstanceDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the process instance.
        rootProcessInstanceId:
          type: string
          description: The process instance id of the root process instance that initiated
            the process.
        superProcessInstanceId:
          type: string
          description: The id of the parent process instance, if it exists.
        superCaseInstanceId:
          type: string
          description: The id of the parent case instance, if it exists.
        caseInstanceId:
          type: string
          description: The id of the parent case instance, if it exists.
        processDefinitionName:
          type: string
          description: The name of the process definition that this process instance
            belongs to.
        processDefinitionKey:
          type: string
          description: The key of the process definition that this process instance
            belongs to.
        processDefinitionVersion:
          type: integer
          description: The version of the process definition that this process instance
            belongs to.
          format: int32
        processDefinitionId:
          type: string
          description: The id of the process definition that this process instance
            belongs to.
        businessKey:
          type: string
          description: The business key of the process instance.
        startTime:
          type: string
          description: The time the instance was started. Default [format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
        endTime:
          type: string
          description: The time the instance ended. Default [format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
        removalTime:
          type: string
          description: The time after which the instance should be removed by the
            History Cleanup job. Default [format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
        durationInMillis:
          type: integer
          description: The time the instance took to finish (in milliseconds).
          format: int32
          nullable: true
        startUserId:
          type: string
          description: The id of the user who started the process instance.
        startActivityId:
          type: string
          description: The id of the initial activity that was executed (e.g., a start
            event).
        deleteReason:
          type: string
          description: The provided delete reason in case the process instance was
            canceled during execution.
        tenantId:
          type: string
          description: The tenant id of the process instance.
        state:
          type: string
          description: |-
            Last state of the process instance, possible values are:

            `ACTIVE` - running process instance

            `SUSPENDED` - suspended process instances

            `COMPLETED` - completed through normal end event

            `EXTERNALLY_TERMINATED` - terminated externally, for instance through REST API

            `INTERNALLY_TERMINATED` - terminated internally, for instance by terminating boundary event
          enum:
          - ACTIVE
          - SUSPENDED
          - COMPLETED
          - EXTERNALLY_TERMINATED
          - INTERNALLY_TERMINATED
      example:
        processDefinitionId: processDefinitionId
        durationInMillis: 6
        caseInstanceId: caseInstanceId
        processDefinitionName: processDefinitionName
        superCaseInstanceId: superCaseInstanceId
        deleteReason: deleteReason
        processDefinitionKey: processDefinitionKey
        removalTime: 2000-01-23T04:56:07.000+00:00
        startUserId: startUserId
        startActivityId: startActivityId
        businessKey: businessKey
        tenantId: tenantId
        rootProcessInstanceId: rootProcessInstanceId
        startTime: 2000-01-23T04:56:07.000+00:00
        id: id
        endTime: 2000-01-23T04:56:07.000+00:00
        state: ACTIVE
        processDefinitionVersion: 0
        superProcessInstanceId: superProcessInstanceId
    HistoricProcessInstanceQueryDto:
      type: object
      properties:
        processInstanceId:
          type: string
          description: Filter by process instance id.
        processInstanceIds:
          type: array
          description: Filter by process instance ids. Must be a JSON array of `Strings`.
          items:
            type: string
        processDefinitionId:
          type: string
          description: Filter by the process definition the instances run on.
        processDefinitionKey:
          type: string
          description: Filter by the key of the process definition the instances run
            on.
        processDefinitionKeyIn:
          type: array
          description: Filter by a list of process definition keys. A process instance
            must have one of the given process definition keys. Must be a JSON array
            of `Strings`.
          items:
            type: string
        processDefinitionName:
          type: string
          description: Filter by the name of the process definition the instances
            run on.
        processDefinitionNameLike:
          type: string
          description: Filter by process definition names that the parameter is a
            substring of.
        processDefinitionKeyNotIn:
          type: array
          description: Exclude instances that belong to a set of process definitions.
            Must be a JSON array of `Strings`.
          items:
            type: string
        processInstanceBusinessKey:
          type: string
          description: Filter by process instance business key.
        processInstanceBusinessKeyLike:
          type: string
          description: Filter by process instance business key that the parameter
            is a substring of.
        rootProcessInstances:
          type: boolean
          description: Restrict the query to all process instances that are top level
            process instances.
          nullable: true
        finished:
          type: boolean
          description: Only include finished process instances. Value may only be
            `true`, as `false` is the default behavior.
          nullable: true
        unfinished:
          type: boolean
          description: Only include unfinished process instances. Value may only be
            `true`, as `false` is the default behavior.
          nullable: true
        withIncidents:
          type: boolean
          description: Only include process instances which have an incident. Value
            may only be `true`, as `false` is the default behavior.
          nullable: true
        withRootIncidents:
          type: boolean
          description: Only include process instances which have a root incident.
            Value may only be `true`, as `false` is the default behavior.
          nullable: true
        incidentType:
          type: string
          description: Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
            for a list of incident types.
        incidentStatus:
          type: string
          description: Only include process instances which have an incident in status
            either open or resolved. To get all process instances, use the query parameter
            withIncidents.
          enum:
          - open
          - resolved
        incidentMessage:
          type: string
          description: Filter by the incident message. Exact match.
        incidentMessageLike:
          type: string
          description: Filter by the incident message that the parameter is a substring
            of.
        startedBefore:
          type: string
          description: |-
            Restrict to instances that were started before the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        startedAfter:
          type: string
          description: |-
            Restrict to instances that were started after the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        finishedBefore:
          type: string
          description: |-
            Restrict to instances that were finished before the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        finishedAfter:
          type: string
          description: |-
            Restrict to instances that were finished after the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        executedActivityAfter:
          type: string
          description: |-
            Restrict to instances that executed an activity after the given date (inclusive).
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        executedActivityBefore:
          type: string
          description: |-
            Restrict to instances that executed an activity before the given date (inclusive).
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        executedJobAfter:
          type: string
          description: |-
            Restrict to instances that executed an job after the given date (inclusive).
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        executedJobBefore:
          type: string
          description: |-
            Restrict to instances that executed an job before the given date (inclusive).
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        startedBy:
          type: string
          description: Only include process instances that were started by the given
            user.
        superProcessInstanceId:
          type: string
          description: Restrict query to all process instances that are sub process
            instances of the given process instance. Takes a process instance id.
        subProcessInstanceId:
          type: string
          description: Restrict query to one process instance that has a sub process
            instance with the given id.
        superCaseInstanceId:
          type: string
          description: Restrict query to all process instances that are sub process
            instances of the given case instance. Takes a case instance id.
        subCaseInstanceId:
          type: string
          description: Restrict query to one process instance that has a sub case
            instance with the given id.
        caseInstanceId:
          type: string
          description: Restrict query to all process instances that are sub process
            instances of the given case instance. Takes a case instance id.
        tenantIdIn:
          type: array
          description: Filter by a list of tenant ids. A process instance must have
            one of the given tenant ids. Must be a JSON array of `Strings`
          items:
            type: string
        withoutTenantId:
          type: boolean
          description: Only include historic process instances which belong to no
            tenant. Value may only be `true`, as `false` is the default behavior.
          nullable: true
        executedActivityIdIn:
          type: array
          description: Restrict to instances that executed an activity with one of
            given ids. Must be a JSON array of `Strings`
          items:
            type: string
        activeActivityIdIn:
          type: array
          description: Restrict to instances that have an active activity with one
            of given ids. Must be a JSON array of `Strings`
          items:
            type: string
        active:
          type: boolean
          description: Restrict to instances that are active.
          nullable: true
        suspended:
          type: boolean
          description: Restrict to instances that are suspended.
          nullable: true
        completed:
          type: boolean
          description: Restrict to instances that are completed.
          nullable: true
        externallyTerminated:
          type: boolean
          description: Restrict to instances that are externallyTerminated.
          nullable: true
        internallyTerminated:
          type: boolean
          description: Restrict to instances that are internallyTerminated.
          nullable: true
        variables:
          type: array
          description: |
            A JSON array to only include process instances that have/had variables with certain values.
            The array consists of objects with the three properties `name`, `operator` and `value`. `name` (`String`) is the variable name,
            `operator` (`String`) is the comparison operator to be used and `value` the variable value.

            Value may be `String`, `Number` or `Boolean`.

            Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
        variableNamesIgnoreCase:
          type: boolean
          description: Match all variable names provided in variables case-insensitively.
            If set to `true` variableName and variablename are treated as equal.
          nullable: true
        variableValuesIgnoreCase:
          type: boolean
          description: Match all variable values provided in variables case-insensitively.
            If set to `true` variableValue and variablevalue are treated as equal.
          nullable: true
        orQueries:
          type: array
          description: |-
            A JSON array of nested historic process instance queries with OR semantics.

            A process instance matches a nested query if it fulfills at least one of the query's predicates.

            With multiple nested queries, a process instance must fulfill at least one predicate of each query
            ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).

            All process instance query properties can be used except for: `sorting`

            See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
          items:
            $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
        sorting:
          type: array
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/HistoricProcessInstanceQueryDto_sorting'
      description: A historic process instance query which defines a group of historic
        process instances
    HistoryTimeToLiveDto:
      type: object
      properties:
        historyTimeToLive:
          minimum: 0
          type: integer
          description: |-
            New value for historyTimeToLive field of the definition.
            Can be `null`. Can not be negative.
          format: int32
          nullable: true
    IdentityLinkDto:
      required:
      - type
      type: object
      properties:
        userId:
          type: string
          description: The id of the user participating in this link. Either `userId`
            or `groupId` is set.
        groupId:
          type: string
          description: The id of the group participating in this link. Either `groupId`
            or `userId` is set.
        type:
          type: string
          description: |-
            The type of the identity link. The value of the this property can be user-defined. The Process Engine
            provides three pre-defined Identity Link `type`s:

            * `candidate`
            * `assignee` - reserved for the task assignee
            * `owner` - reserved for the task owner

            **Note**: When adding or removing an Identity Link, the `type` property must be defined.
      example:
        groupId: groupId
        type: type
        userId: userId
    IncidentDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the incident.
        processDefinitionId:
          type: string
          description: The id of the process definition this incident is associated
            with.
        processInstanceId:
          type: string
          description: The id of the process instance this incident is associated
            with.
        executionId:
          type: string
          description: The id of the execution this incident is associated with.
        incidentTimestamp:
          type: string
          description: |-
            The time this incident happened. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
        incidentType:
          type: string
          description: |-
            The type of incident, for example: `failedJobs` will be returned in case of an incident which identified
            a failed job during the execution of a process instance. See the
            [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
        activityId:
          type: string
          description: The id of the activity this incident is associated with.
        failedActivityId:
          type: string
          description: The id of the activity on which the last exception occurred.
        causeIncidentId:
          type: string
          description: The id of the associated cause incident which has been triggered.
        rootCauseIncidentId:
          type: string
          description: The id of the associated root cause incident which has been
            triggered.
        configuration:
          type: string
          description: The payload of this incident.
        tenantId:
          type: string
          description: The id of the tenant this incident is associated with.
        incidentMessage:
          type: string
          description: The message of this incident.
        jobDefinitionId:
          type: string
          description: The job definition id the incident is associated with.
      example:
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        jobDefinitionId: jobDefinitionId
        incidentMessage: incidentMessage
        configuration: configuration
        causeIncidentId: causeIncidentId
        incidentType: incidentType
        executionId: executionId
        activityId: activityId
        incidentTimestamp: 2000-01-23T04:56:07.000+00:00
        rootCauseIncidentId: rootCauseIncidentId
        tenantId: tenantId
        id: id
        failedActivityId: failedActivityId
    IncidentStatisticsResultDto:
      type: object
      properties:
        incidentType:
          type: string
          description: The type of the incident the number of incidents is aggregated
            for. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types)
            for a list of incident types.
        incidentCount:
          type: integer
          description: The total number of incidents for the corresponding incident
            type.
          format: int32
      example:
        incidentCount: 1
        incidentType: incidentType
    LinkableDto:
      type: object
      properties:
        links:
          type: array
          description: The links associated to this resource, with `method`, `href`
            and `rel`.
          items:
            $ref: '#/components/schemas/AtomLink'
    LockedExternalTaskDto:
      title: LockedExternalTaskDto
      type: object
      properties:
        activityId:
          type: string
          description: The id of the activity that this external task belongs to.
        activityInstanceId:
          type: string
          description: The id of the activity instance that the external task belongs
            to.
        errorMessage:
          type: string
          description: |-
            The full error message submitted with the latest reported failure executing this task;`null` if no failure
            was reported previously or if no error message was submitted
        errorDetails:
          type: string
          description: |-
            The error details submitted with the latest reported failure executing this task.`null` if no failure was
            reported previously or if no error details was submitted
        executionId:
          type: string
          description: The id of the execution that the external task belongs to.
        id:
          type: string
          description: The id of the external task.
        lockExpirationTime:
          type: string
          description: The date that the task's most recent lock expires or has expired.
          format: date-time
          nullable: true
        processDefinitionId:
          type: string
          description: The id of the process definition the external task is defined
            in.
        processDefinitionKey:
          type: string
          description: The key of the process definition the external task is defined
            in.
        processDefinitionVersionTag:
          type: string
          description: The version tag of the process definition the external task
            is defined in.
        processInstanceId:
          type: string
          description: The id of the process instance the external task belongs to.
        tenantId:
          type: string
          description: The id of the tenant the external task belongs to.
        retries:
          type: integer
          description: The number of retries the task currently has left.
          format: int32
          nullable: true
        suspended:
          type: boolean
          description: Whether the process instance the external task belongs to is
            suspended.
          nullable: true
        workerId:
          type: string
          description: The id of the worker that posesses or posessed the most recent
            lock.
        priority:
          type: integer
          description: The priority of the external task.
          format: int64
          nullable: true
        topicName:
          type: string
          description: The topic name of the external task.
        businessKey:
          type: string
          description: The business key of the process instance the external task
            belongs to.
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A JSON object containing a property for each of the requested variables. The key is the variable name,
            the value is a JSON object of serialized variable values with the following properties:
      example:
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        workerId: workerId
        variables:
          key:
            valueInfo: ""
            type: type
            value: {}
        lockExpirationTime: 2000-01-23T04:56:07.000+00:00
        errorMessage: errorMessage
        activityInstanceId: activityInstanceId
        priority: 6
        suspended: true
        processDefinitionKey: processDefinitionKey
        activityId: activityId
        executionId: executionId
        processDefinitionVersionTag: processDefinitionVersionTag
        retries: 0
        tenantId: tenantId
        businessKey: businessKey
        topicName: topicName
        id: id
        errorDetails: errorDetails
    MessageCorrelationResultWithVariableDto:
      type: object
      properties:
        resultType:
          type: string
          description: "Indicates if the message was correlated to a message start\
            \ event or an \nintermediate message catching event. In the first case,\
            \ the resultType is \n`ProcessDefinition` and otherwise `Execution`."
          enum:
          - Execution
          - ProcessDefinition
        processInstance:
          $ref: '#/components/schemas/ProcessInstanceDto'
        execution:
          $ref: '#/components/schemas/ExecutionDto'
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: "This property is returned if the `variablesInResultEnabled`\
            \ is set to `true`.\nContains a list of the process variables. "
      description: |-
        The `processInstance` property only has a value if the resultType is set to `ProcessDefinition`.
        The processInstance with the properties as described in the
        [get single instance](https://docs.camunda.org/manual/7.14/reference/rest/process-instance/get/) method.

        The `execution` property only has a value if the resultType is set to `Execution`.
        The execution with the properties as described in the
        [get single execution](https://docs.camunda.org/manual/7.14/reference/rest/execution/get/) method.
      example:
        execution:
          processInstanceId: processInstanceId
          ended: true
          tenantId: tenantId
          id: id
        variables:
          key:
            valueInfo: ""
            type: type
            value: {}
        processInstance: ""
        resultType: Execution
    MetricsIntervalResultDto:
      type: object
      properties:
        timestamp:
          type: string
          description: The interval timestamp.
          format: date-time
        name:
          type: string
          description: The name of the metric.
        reporter:
          type: string
          description: The reporter of the metric. `null` if the metrics are aggregated
            by reporter.
        value:
          type: integer
          description: The value of the metric aggregated by the interval.
          format: int64
      example:
        name: name
        reporter: reporter
        value: 0
        timestamp: 2000-01-23T04:56:07.000+00:00
    MetricsResultDto:
      type: object
      properties:
        result:
          type: integer
          description: The current sum (count) for the selected metric.
          format: int64
      example:
        result: 0
    MissingAuthorizationDto:
      type: object
      properties:
        permissionName:
          type: string
          description: The permission name that the user is missing.
        resourceName:
          type: string
          description: The name of the resource that the user is missing permission
            for.
        resourceId:
          type: string
          description: The id of the resource that the user is missing permission
            for.
    MultiFormAttachmentDto:
      type: object
      properties:
        attachment-name:
          type: string
          description: The name of the attachment.
        attachment-description:
          type: string
          description: The description of the attachment.
        attachment-type:
          type: string
          description: The type of the attachment.
        url:
          type: string
          description: The url to the remote content of the attachment.
        content:
          type: string
          description: The content of the attachment.
          format: binary
          nullable: true
    MultiFormDeploymentDto:
      type: object
      properties:
        tenant-id:
          type: string
          description: The tenant id for the deployment to be created.
        deployment-source:
          type: string
          description: The source for the deployment to be created.
        deploy-changed-only:
          type: boolean
          description: |-
            A flag indicating whether the process engine should perform duplicate checking on a per-resource basis.
            If set to true, only those resources that have actually changed are deployed.
            Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources.
            If set to true, the option enable-duplicate-filtering is overridden and set to true.
          nullable: true
          default: false
        enable-duplicate-filtering:
          type: boolean
          description: |-
            A flag indicating whether the process engine should perform duplicate checking for the deployment or not.
            This allows you to check if a deployment with the same name and the same resouces already exists and
            if true, not create a new deployment but instead return the existing deployment. The default value is false.
          nullable: true
          default: false
        deployment-name:
          type: string
          description: The name for the deployment to be created.
        data:
          type: string
          description: |-
            The binary data to create the deployment resource.
            It is possible to have more than one form part with different form part names for the binary data to create a deployment.
          format: binary
          nullable: true
    MultiFormVariableBinaryDto:
      type: object
      properties:
        data:
          type: string
          description: |-
            The binary data to be set.
            For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set
            Only the filename is mandatory.
          format: binary
          nullable: true
        valueType:
          type: string
          description: The name of the variable type. Either Bytes for a byte array
            variable or File for a file variable.
          enum:
          - Bytes
          - File
    ParseExceptionDto:
      allOf:
      - type: object
        properties:
          details:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/ResourceReportDto'
            description: A JSON Object containing list of errors and warnings occurred
              during deployment.
      - $ref: '#/components/schemas/ExceptionDto'
    PatchVariablesDto:
      type: object
      properties:
        modifications:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A JSON object containing variable key-value pairs.
        deletions:
          type: array
          description: An array of String keys of variables to be deleted.
          items:
            type: string
    PriorityDto:
      type: object
      properties:
        priority:
          type: integer
          description: The priority of the resource.
          format: int64
          nullable: true
    ProblemDto:
      type: object
      properties:
        message:
          type: string
          description: The message of the problem.
        line:
          type: integer
          description: The line where the problem occurred.
          format: int32
          nullable: true
        column:
          type: integer
          description: The column where the problem occurred.
          format: int32
          nullable: true
        mainElementId:
          type: string
          description: The main element id where the problem occurred.
        elementIds:
          type: array
          description: A list of element id affected by the problem.
          items:
            type: string
    ProcessDefinitionDiagramDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the process definition.
        bpmn20Xml:
          type: string
          description: |-
            An escaped XML string containing the XML that this definition was deployed with.
            Carriage returns, line feeds and quotation marks are escaped.
      example:
        bpmn20Xml: bpmn20Xml
        id: id
    ProcessDefinitionDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the process definition
        key:
          type: string
          description: The key of the process definition, i.e., the id of the BPMN
            2.0 XML process definition.
        category:
          type: string
          description: The category of the process definition.
        description:
          type: string
          description: The description of the process definition.
        name:
          type: string
          description: The name of the process definition.
        version:
          type: integer
          description: The version of the process definition that the engine assigned
            to it.
          format: int32
        resource:
          type: string
          description: The file name of the process definition.
        deploymentId:
          type: string
          description: The deployment id of the process definition.
        diagram:
          type: string
          description: The file name of the process definition diagram, if it exists.
        suspended:
          type: boolean
          description: A flag indicating whether the definition is suspended or not.
        tenantId:
          type: string
          description: The tenant id of the process definition.
        versionTag:
          type: string
          description: The version tag of the process definition.
        historyTimeToLive:
          minimum: 0
          type: integer
          description: |-
            History time to live value of the process definition.
            Is used within [History cleanup](https://docs.camunda.org/manual/7.14/user-guide/process-engine/history/#history-cleanup).
          format: int32
          nullable: true
        startableInTasklist:
          type: boolean
          description: A flag indicating whether the process definition is startable
            in Tasklist or not.
      example:
        resource: resource
        startableInTasklist: true
        description: description
        historyTimeToLive: 0
        versionTag: versionTag
        version: 0
        suspended: true
        diagram: diagram
        deploymentId: deploymentId
        name: name
        tenantId: tenantId
        id: id
        category: category
        key: key
    ProcessDefinitionStatisticsResultDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the process definition the results are aggregated
            for.
        instances:
          type: integer
          description: The total number of running process instances of this process
            definition.
          format: int32
        failedJobs:
          type: integer
          description: |-
            The total number of failed jobs for the running instances.
            **Note**: Will be `0` (not `null`), if failed jobs were excluded.
          format: int32
        incidents:
          type: array
          description: |-
            Each item in the resulting array is an object which contains `incidentType` and `incidentCount`.
            **Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded.
            Furthermore, the array will be also empty if no incidents were found.
          items:
            $ref: '#/components/schemas/IncidentStatisticsResultDto'
        definition:
          $ref: '#/components/schemas/ProcessDefinitionDto'
      example:
        instances: 0
        failedJobs: 6
        incidents:
        - incidentCount: 1
          incidentType: incidentType
        - incidentCount: 1
          incidentType: incidentType
        definition:
          resource: resource
          startableInTasklist: true
          description: description
          historyTimeToLive: 0
          versionTag: versionTag
          version: 0
          suspended: true
          diagram: diagram
          deploymentId: deploymentId
          name: name
          tenantId: tenantId
          id: id
          category: category
          key: key
        id: id
    ProcessDefinitionSuspensionStateDto:
      type: object
      properties:
        suspended:
          type: boolean
          description: |-
            A `Boolean` value which indicates whether to activate or suspend all process definitions with the given key.
            When the value is set to `true`, all process definitions with the given key will be suspended and
            when the value is set to `false`, all process definitions with the given key will be activated.
          nullable: true
        processDefinitionId:
          type: string
          description: The id of the process definitions to activate or suspend.
        processDefinitionKey:
          type: string
          description: "\tThe key of the process definitions to activate or suspend."
        includeProcessInstances:
          type: boolean
          description: "A `Boolean` value which indicates whether to activate or suspend\
            \ also all process instances of \nthe process definitions with the given\
            \ key.\nWhen the value is set to `true`, all process instances of the\
            \ process definitions with the given key\nwill be activated or suspended\
            \ and when the value is set to `false`, the suspension state of \nall\
            \ process instances of the process definitions with the given key will\
            \ not be updated."
          nullable: true
        executionDate:
          type: string
          description: |-
            The date on which all process definitions with the given key will be activated or suspended.
            If `null`, the suspension state of all process definitions with the given key is updated immediately.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/),
            the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
          format: date-time
          nullable: true
    ProcessEngineDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the process engine.
      example:
        name: name
    ProcessInstanceDto:
      allOf:
      - type: object
        properties:
          id:
            type: string
            description: The id of the process instance.
          definitionId:
            type: string
            description: The id of the process definition that this process instance
              belongs to.
          businessKey:
            type: string
            description: The business key of the process instance.
          caseInstanceId:
            type: string
            description: The id of the case instance associated with the process instance.
          ended:
            type: boolean
            description: 'A flag indicating whether the process instance has ended
              or not. Deprecated: will always be false!'
            deprecated: true
          suspended:
            type: boolean
            description: A flag indicating whether the process instance is suspended
              or not.
          tenantId:
            type: string
            description: The tenant id of the process instance.
      - $ref: '#/components/schemas/LinkableDto'
    ProcessInstanceModificationDto:
      type: object
      properties:
        skipCustomListeners:
          type: boolean
          description: Skip execution listener invocation for activities that are
            started or ended as part of this request.
          nullable: true
        skipIoMappings:
          type: boolean
          description: |-
            Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/#input-output-variable-mapping)
            for activities that are started or ended as part of this request.
          nullable: true
        instructions:
          type: array
          description: JSON array of modification instructions. The instructions are
            executed in the order they are in.
          items:
            $ref: '#/components/schemas/ProcessInstanceModificationInstructionDto'
        annotation:
          type: string
          description: An arbitrary text annotation set by a user for auditing reasons.
    ProcessInstanceModificationInstructionDto:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: |-
            **Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.

            * A cancel instruction requests cancellation of a single activity instance or all instances of one activity.
            * A startBeforeActivity instruction requests to enter a given activity.
            * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity.
            * A startTransition instruction requests to execute a specific sequence flow.
          enum:
          - cancel
          - startBeforeActivity
          - startAfterActivity
          - startTransition
        variables:
          $ref: '#/components/schemas/TriggerVariableValueDto'
        activityId:
          type: string
          description: Can be used with instructions of types `startTransition`. Specifies
            the sequence flow to start.
        transitionId:
          type: string
          description: Can be used with instructions of types `startTransition`. Specifies
            the sequence flow to start.
        activityInstanceId:
          type: string
          description: |-
            Can be used with instructions of type `cancel`. Specifies the activity instance to cancel.
            Valid values are the activity instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.14/reference/rest/process-instance/get-activity-instances/).
        transitionInstanceId:
          type: string
          description: |-
            Can be used with instructions of type `cancel`. Specifies the transition instance to cancel.
            Valid values are the transition instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.14/reference/rest/process-instance/get-activity-instances/).
        ancestorActivityInstanceId:
          type: string
          description: |-
            Can be used with instructions of type `startBeforeActivity`, `startAfterActivity`, and `startTransition`.
            Valid values are the activity instance IDs supplied by the Get Activity Instance request.
            If there are multiple parent activity instances of the targeted activity,
            this specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated.

            Example: When there are two instances of a subprocess and an activity contained in the subprocess is to be started,
            this parameter allows to specifiy under which subprocess instance the activity should be started.
        cancelCurrentActiveActivityInstances:
          type: boolean
          description: Can be used with instructions of type cancel. Prevents the
            deletion of new created activity instances.
          nullable: true
    ProcessInstanceQueryDto:
      type: object
      properties:
        deploymentId:
          type: string
          description: Filter by the deployment the id belongs to.
        processDefinitionId:
          type: string
          description: Filter by the process definition the instances run on.
        processDefinitionKey:
          type: string
          description: Filter by the key of the process definition the instances run
            on.
        processDefinitionKeyIn:
          type: array
          description: |-
            Filter by a list of process definition keys.
            A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
          items:
            type: string
        processDefinitionKeyNotIn:
          type: array
          description: |-
            Exclude instances by a list of process definition keys.
            A process instance must not have one of the given process definition keys. Must be a JSON array of Strings.
          items:
            type: string
        businessKey:
          type: string
          description: Filter by process instance business key.
        businessKeyLike:
          type: string
          description: Filter by process instance business key that the parameter
            is a substring of.
        caseInstanceId:
          type: string
          description: Filter by case instance id.
        superProcessInstance:
          type: string
          description: |-
            Restrict query to all process instances that are sub process instances of the given process instance.
            Takes a process instance id.
        subProcessInstance:
          type: string
          description: |-
            Restrict query to all process instances that have the given process instance as a sub process instance.
            Takes a process instance id.
        superCaseInstance:
          type: string
          description: |-
            Restrict query to all process instances that are sub process instances of the given case instance.
            Takes a case instance id.
        subCaseInstance:
          type: string
          description: |-
            Restrict query to all process instances that have the given case instance as a sub case instance.
            Takes a case instance id.
        active:
          type: boolean
          description: Only include active process instances. Value may only be true,
            as false is the default behavior.
          nullable: true
        suspended:
          type: boolean
          description: Only include suspended process instances. Value may only be
            true, as false is the default behavior.
          nullable: true
        processInstanceIds:
          type: array
          description: Filter by a list of process instance ids. Must be a JSON array
            of Strings.
          items:
            type: string
        withIncident:
          type: boolean
          description: Filter by presence of incidents. Selects only process instances
            that have an incident.
          nullable: true
        incidentId:
          type: string
          description: Filter by the incident id.
        incidentType:
          type: string
          description: Filter by the incident type. See the User Guide for a list
            of incident types.
        incidentMessage:
          type: string
          description: Filter by the incident message. Exact match.
        incidentMessageLike:
          type: string
          description: Filter by the incident message that the parameter is a substring
            of.
        tenantIdIn:
          type: array
          description: |-
            Filter by a list of tenant ids. A process instance must have one of the given tenant ids.
            Must be a JSON array of Strings.
          items:
            type: string
        withoutTenantId:
          type: boolean
          description: |-
            Only include process instances which belong to no tenant.
            Value may only be true, as false is the default behavior.
          nullable: true
        processDefinitionWithoutTenantId:
          type: boolean
          description: Only include process instances which process definition has
            no tenant id.
          nullable: true
        activityIdIn:
          type: array
          description: |-
            Filter by a list of activity ids.
            A process instance must currently wait in a leaf activity with one of the given activity ids.
          items:
            type: string
        rootProcessInstances:
          type: boolean
          description: Restrict the query to all process instances that are top level
            process instances.
          nullable: true
        leafProcessInstances:
          type: boolean
          description: Restrict the query to all process instances that are leaf instances.
            (i.e. don't have any sub instances)
          nullable: true
        variables:
          type: array
          description: |-
            A JSON array to only include process instances that have variables with certain values.
            The array consists of objects with the three properties `name`, `operator` and `value`.
            `name` (String) is the variable name,
            `operator` (String) is the comparison operator to be used and `value` the variable value.
            The `value` may be String, Number or Boolean.

            Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than;
            `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
        variableNamesIgnoreCase:
          type: boolean
          description: |-
            Match all variable names in this query case-insensitively.
            If set to true variableName and variablename are treated as equal.
          nullable: true
        variableValuesIgnoreCase:
          type: boolean
          description: |-
            Match all variable values in this query case-insensitively.
            If set to true variableValue and variablevalue are treated as equal.
          nullable: true
        orQueries:
          type: array
          description: |-
            A JSON array of nested process instance queries with OR semantics.
            A process instance matches a nested query if it fulfills at least one of the query's predicates.
            With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form).
            All process instance query properties can be used except for: `sorting`
            See the [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
          items:
            $ref: '#/components/schemas/ProcessInstanceQueryDto'
        sorting:
          type: array
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/ProcessInstanceQueryDto_sorting'
      description: A process instance query which defines a group of process instances
    ProcessInstanceSuspensionStateAsyncDto:
      type: object
      properties:
        suspended:
          type: boolean
          description: |-
            A Boolean value which indicates whether to activate or suspend a given process instance.
            When the value is set to true, the given process instance will be suspended and when the value is set to false,
            the given process instance will be activated.
          nullable: true
        processInstanceIds:
          type: array
          description: |-
            A list of process instance ids which defines a group of process instances
            which will be activated or suspended by the operation.
          items:
            type: string
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
    ProcessInstanceSuspensionStateDto:
      type: object
      properties:
        suspended:
          type: boolean
          description: |-
            A `Boolean` value which indicates whether to activate or suspend a given process instance.
            When the value is set to `true`, the given process instance will be suspended and when the value is set to `false`,
            the given process instance will be activated.
          nullable: true
        processDefinitionId:
          type: string
          description: |-
            The process definition id of the process instances to activate or suspend.

            **Note**: This parameter can be used only with combination of `suspended`.
        processDefinitionKey:
          type: string
          description: |-
            The process definition key of the process instances to activate or suspend.

            **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionTenantId`, and `processDefinitionWithoutTenantId`.
        processDefinitionTenantId:
          type: string
          description: |-
            Only activate or suspend process instances of a process definition which belongs to a tenant with the given id.

            **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionWithoutTenantId`.
        processDefinitionWithoutTenantId:
          type: boolean
          description: |-
            Only activate or suspend process instances of a process definition which belongs to no tenant.
            Value may only be true, as false is the default behavior.

            **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionTenantId`.
          nullable: true
        processInstanceIds:
          type: array
          description: |-
            A list of process instance ids which defines a group of process instances
            which will be activated or suspended by the operation.

            **Note**: This parameter can be used only with combination of `suspended`, `processInstanceQuery`, and `historicProcessInstanceQuery`.
          items:
            type: string
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
    ProcessInstanceWithVariablesDto:
      allOf:
      - type: object
        properties:
          variables:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/VariableValueDto'
            description: The id of the process instance.
      - $ref: '#/components/schemas/ProcessInstanceDto'
    RedeploymentDto:
      title: RedeploymentDto
      type: object
      properties:
        resourceIds:
          type: array
          description: A list of deployment resource ids to re-deploy.
          items:
            type: string
        resourceNames:
          type: array
          description: A list of deployment resource names to re-deploy.
          items:
            type: string
        source:
          type: string
          description: Sets the source of the deployment.
      description: 'A JSON object with the following properties:'
    ResourceOptionsDto:
      allOf:
      - type: object
        properties: {}
      - $ref: '#/components/schemas/LinkableDto'
    ResourceReportDto:
      type: object
      properties:
        errors:
          type: array
          description: A list of errors occurred during parsing.
          items:
            $ref: '#/components/schemas/ProblemDto'
        warnings:
          type: array
          description: A list of warnings occurred during parsing.
          items:
            $ref: '#/components/schemas/ProblemDto'
    RestartProcessInstanceDto:
      type: object
      properties:
        processInstanceIds:
          type: array
          description: A list of process instance ids to restart.
          items:
            type: string
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
        skipCustomListeners:
          type: boolean
          description: Skip execution listener invocation for activities that are
            started as part of this request.
          nullable: true
        skipIoMappings:
          type: boolean
          description: |-
            Skip execution of
            [input/output variable mappings](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/#input-output-variable-mapping)
            for activities that are started as part of this request.
          nullable: true
        initialVariables:
          type: boolean
          description: Set the initial set of variables during restart. By default,
            the last set of variables is used.
          nullable: true
        withoutBusinessKey:
          type: boolean
          description: Do not take over the business key of the historic process instance.
          nullable: true
        instructions:
          type: array
          description: |-
            **Optional**. A JSON array of instructions that specify which activities to start the process instance at.
            If this property is omitted, the process instance starts at its default blank start event.
          items:
            $ref: '#/components/schemas/RestartProcessInstanceModificationInstructionDto'
    RestartProcessInstanceModificationInstructionDto:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: |-
            **Mandatory**. One of the following values: `startBeforeActivity`, `startAfterActivity`, `startTransition`.

            * A `startBeforeActivity` instruction requests to enter a given activity.
            * A `startAfterActivity` instruction requests to execute the single outgoing sequence flow of a given activity.
            * A `startTransition` instruction requests to execute a specific sequence flow.
          enum:
          - startBeforeActivity
          - startAfterActivity
          - startTransition
        activityId:
          type: string
          description: |-
            **Can be used with instructions of types** `startBeforeActivity`
            and `startAfterActivity`. Specifies the sequence flow to start.
        transitionId:
          type: string
          description: |-
            **Can be used with instructions of types** `startTransition`.
            Specifies the sequence flow to start.
    RetriesDto:
      type: object
      properties:
        retries:
          type: integer
          description: |-
            The number of retries to set for the resource.  Must be >= 0. If this is 0, an incident is created
            and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again.
            Can not be null.
          format: int32
          nullable: true
    SchemaLogEntryDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the schema log entry.
        timestamp:
          type: string
          description: The date and time of the schema update.
          format: date-time
        version:
          type: string
          description: The version of the schema.
      example:
        id: id
        version: version
        timestamp: 2000-01-23T04:56:07.000+00:00
    SchemaLogQueryDto:
      type: object
      properties:
        version:
          type: string
          description: The version of the schema.
        sorting:
          type: array
          description: "A JSON array of criteria to sort the result by. Each element\
            \ of the array is\n                      a JSON object that specifies\
            \ one ordering. The position in the array\n                      identifies\
            \ the rank of an ordering, i.e., whether it is primary, secondary,\n \
            \                     etc. "
          items:
            $ref: '#/components/schemas/SchemaLogQueryDto_sorting'
    SetJobRetriesByProcessDto:
      type: object
      properties:
        processInstances:
          type: array
          description: A list of process instance ids to fetch jobs, for which retries
            will be set.
          items:
            type: string
        retries:
          minimum: 0
          type: integer
          description: An integer representing the number of retries. Please note
            that the value cannot be negative or null.
          format: int32
          nullable: true
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
    SetRemovalTimeToHistoricProcessInstancesDto:
      allOf:
      - type: object
        properties:
          historicProcessInstanceIds:
            type: array
            description: The id of the process instance.
            items:
              type: string
          historicProcessInstanceQuery:
            $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
          hierarchical:
            type: boolean
            description: |-
              Sets the removal time to all historic process instances in the hierarchy.
              Value may only be `true`, as `false` is the default behavior.
            nullable: true
      - $ref: '#/components/schemas/AbstractSetRemovalTimeDto'
    SetRetriesForExternalTasksDto:
      type: object
      properties:
        retries:
          type: integer
          description: |-
            The number of retries to set for the external task.  Must be >= 0. If this is 0, an incident is created
            and the task cannot be fetched anymore unless the retries are increased again. Can not be null.
          format: int32
          nullable: true
        externalTaskIds:
          type: array
          description: The ids of the external tasks to set the number of retries
            for.
          items:
            type: string
        processInstanceIds:
          type: array
          description: The ids of process instances containing the tasks to set the
            number of retries for.
          items:
            type: string
        externalTaskQuery:
          $ref: '#/components/schemas/ExternalTaskQueryDto'
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
    SetVariablesAsyncDto:
      type: object
      properties:
        processInstanceIds:
          type: array
          description: |-
            A list of process instance ids that define a group of process instances
            to which the operation will set variables.

            Please note that if `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery`
            are defined, the resulting operation will be performed on the union of these sets.
          items:
            type: string
        processInstanceQuery:
          $ref: '#/components/schemas/ProcessInstanceQueryDto'
        historicProcessInstanceQuery:
          $ref: '#/components/schemas/HistoricProcessInstanceQueryDto'
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A variables the operation will set in the root scope of the
            process instances.
    SignalDto:
      type: object
      properties:
        name:
          type: string
          description: |-
            The name of the signal to deliver.

            **Note**: This property is mandatory.
        executionId:
          type: string
          description: "Optionally specifies a single execution which is notified\
            \ by the signal.\n\n**Note**: If no execution id is defined the signal\
            \ is broadcasted to all subscribed\nhandlers. "
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: |-
            A JSON object containing variable key-value pairs. Each key is a variable name and
            each value a JSON variable value object.
        tenantId:
          type: string
          description: |-
            Specifies a tenant to deliver the signal. The signal can only be received on
            executions or process definitions which belongs to the given tenant.

            **Note**: Cannot be used in combination with executionId.
        withoutTenantId:
          type: boolean
          description: |-
            If true the signal can only be received on executions or process definitions which
            belongs to no tenant. Value may not be false as this is the default behavior.

            **Note**: Cannot be used in combination with `executionId`.
          nullable: true
    SortTaskQueryParametersDto:
      type: object
      properties:
        variable:
          type: string
          description: The name of the variable to sort by.
        type:
          type: string
          description: The name of the type of the variable value.
      description: |-
        Mandatory when `sortBy` is one of the following values: `processVariable`, `executionVariable`,
        `taskVariable`, `caseExecutionVariable` or `caseInstanceVariable`. Must be a JSON object with the properties
        `variable` and `type` where `variable` is a variable name and `type` is the name of a variable value type.
    StartProcessInstanceDto:
      type: object
      properties:
        businessKey:
          type: string
          description: The business key of the process instance.
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
        caseInstanceId:
          type: string
          description: The case instance id the process instance is to be initialized
            with.
        startInstructions:
          type: array
          description: |-
            **Optional**. A JSON array of instructions that specify which activities to start the process instance at.
            If this property is omitted, the process instance starts at its default blank start event.
          items:
            $ref: '#/components/schemas/ProcessInstanceModificationInstructionDto'
        skipCustomListeners:
          type: boolean
          description: |-
            Skip execution listener invocation for activities that are started or ended as part of this request.
            **Note**: This option is currently only respected when start instructions are submitted
            via the `startInstructions` property.
          nullable: true
        skipIoMappings:
          type: boolean
          description: |-
            Skip execution of
            [input/output variable mappings](https://docs.camunda.org/manual/7.14/user-guide/process-engine/variables/#input-output-variable-mapping)
            for activities that are started or ended as part of this request.
            **Note**: This option is currently only respected when start instructions are submitted
            via the `startInstructions` property.
          nullable: true
        withVariablesInReturn:
          type: boolean
          description: |-
            Indicates if the variables, which was used by the process instance during execution, should be returned.
            Default value: `false`
          nullable: true
    StartProcessInstanceFormDto:
      type: object
      properties:
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
        businessKey:
          type: string
          description: |-
            The business key the process instance is to be initialized with.
            The business key uniquely identifies the process instance in the context of the given process definition.
    SuspensionStateDto:
      type: object
      properties:
        suspended:
          type: boolean
          description: |-
            A Boolean value which indicates whether to activate or suspend a given process instance.
            When the value is set to true, the given process instance will be suspended and when the value is set to false,
            the given process instance will be activated.
    TaskBpmnErrorDto:
      type: object
      properties:
        errorCode:
          type: string
          description: |-
            An error code that indicates the predefined error. It is used to identify the BPMN
            error handler.
        errorMessage:
          type: string
          description: An error message that describes the error.
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A JSON object containing variable key-value pairs.
    TaskDto:
      type: object
      properties:
        id:
          type: string
          description: The task id.
        name:
          type: string
          description: The task name.
        assignee:
          type: string
          description: The assignee's id.
        owner:
          type: string
          description: The owner's id.
        created:
          type: string
          description: |-
            The date the task was created on.
            [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
        due:
          type: string
          description: |-
            The task's due date.
            [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
        followUp:
          type: string
          description: |-
            The follow-up date for the task.
            [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/)
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
          format: date-time
          nullable: true
        delegationState:
          type: string
          description: The task's delegation state. Possible values are `PENDING`
            and `RESOLVED`.
          enum:
          - PENDING
          - RESOLVED
        description:
          type: string
          description: The task's description.
        executionId:
          type: string
          description: The id of the execution the task belongs to.
        parentTaskId:
          type: string
          description: The id the parent task, if this task is a subtask.
        priority:
          type: integer
          description: The task's priority.
          format: int32
          nullable: true
        processDefinitionId:
          type: string
          description: The id of the process definition the task belongs to.
        processInstanceId:
          type: string
          description: The id of the process instance the task belongs to.
        caseExecutionId:
          type: string
          description: The id of the case execution the task belongs to.
        caseDefinitionId:
          type: string
          description: The id of the case definition the task belongs to.
        caseInstanceId:
          type: string
          description: The id of the case instance the task belongs to.
        taskDefinitionKey:
          type: string
          description: The task's key.
        suspended:
          type: boolean
          description: Whether the task belongs to a process instance that is suspended.
          nullable: true
        formKey:
          type: string
          description: If not `null`, the form key for the task.
        tenantId:
          type: string
          description: If not `null`, the tenant id of the task.
      example:
        owner: owner
        processDefinitionId: processDefinitionId
        processInstanceId: processInstanceId
        caseExecutionId: caseExecutionId
        caseDefinitionId: caseDefinitionId
        formKey: formKey
        created: 2000-01-23T04:56:07.000+00:00
        parentTaskId: parentTaskId
        caseInstanceId: caseInstanceId
        description: description
        priority: 0
        suspended: true
        delegationState: PENDING
        followUp: 2000-01-23T04:56:07.000+00:00
        executionId: executionId
        taskDefinitionKey: taskDefinitionKey
        due: 2000-01-23T04:56:07.000+00:00
        name: name
        tenantId: tenantId
        id: id
        assignee: assignee
    TaskEscalationDto:
      type: object
      properties:
        escalationCode:
          type: string
          description: |-
            An escalation code that indicates the predefined escalation. It is used to identify
            the BPMN escalation handler.
        variables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableValueDto'
          description: A JSON object containing variable key-value pairs.
    TaskQueryDto:
      type: object
      properties:
        processInstanceId:
          type: string
          description: Restrict to tasks that belong to process instances with the
            given id.
        processInstanceIdIn:
          type: array
          description: Restrict to tasks that belong to process instances with the
            given ids.
          items:
            type: string
        processInstanceBusinessKey:
          type: string
          description: Restrict to tasks that belong to process instances with the
            given business key.
        processInstanceBusinessKeyExpression:
          type: string
          description: "Restrict to tasks that belong to process instances with the\
            \ given business key which \nis described by an expression. See the \n\
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\n\
            for more information on available functions."
        processInstanceBusinessKeyIn:
          type: array
          description: "Restrict to tasks that belong to process instances with one\
            \ of the give business keys. \nThe keys need to be in a comma-separated\
            \ list."
          items:
            type: string
        processInstanceBusinessKeyLike:
          type: string
          description: "Restrict to tasks that have a process instance business key\
            \ that has the parameter \nvalue as a substring."
        processInstanceBusinessKeyLikeExpression:
          type: string
          description: "Restrict to tasks that have a process instance business key\
            \ that has the parameter \nvalue as a substring and is described by an\
            \ expression. See the\n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
        processDefinitionId:
          type: string
          description: Restrict to tasks that belong to a process definition with
            the given id.
        processDefinitionKey:
          type: string
          description: Restrict to tasks that belong to a process definition with
            the given key.
        processDefinitionKeyIn:
          type: array
          description: "Restrict to tasks that belong to a process definition with\
            \ one of the given keys. The \nkeys need to be in a comma-separated list."
          items:
            type: string
        processDefinitionName:
          type: string
          description: Restrict to tasks that belong to a process definition with
            the given name.
        processDefinitionNameLike:
          type: string
          description: "Restrict to tasks that have a process definition name that\
            \ has the parameter value as \na substring."
        executionId:
          type: string
          description: Restrict to tasks that belong to an execution with the given
            id.
        caseInstanceId:
          type: string
          description: Restrict to tasks that belong to case instances with the given
            id.
        caseInstanceBusinessKey:
          type: string
          description: Restrict to tasks that belong to case instances with the given
            business key.
        caseInstanceBusinessKeyLike:
          type: string
          description: "Restrict to tasks that have a case instance business key that\
            \ has the parameter value \nas a substring."
        caseDefinitionId:
          type: string
          description: Restrict to tasks that belong to a case definition with the
            given id.
        caseDefinitionKey:
          type: string
          description: Restrict to tasks that belong to a case definition with the
            given key.
        caseDefinitionName:
          type: string
          description: Restrict to tasks that belong to a case definition with the
            given name.
        caseDefinitionNameLike:
          type: string
          description: "Restrict to tasks that have a case definition name that has\
            \ the parameter value as a \nsubstring."
        caseExecutionId:
          type: string
          description: Restrict to tasks that belong to a case execution with the
            given id.
        activityInstanceIdIn:
          type: array
          description: "Only include tasks which belong to one of the passed and comma-separated\
            \ activity \ninstance ids."
          items:
            type: string
        tenantIdIn:
          type: array
          description: "Only include tasks which belong to one of the passed and comma-separated\
            \ \ntenant ids."
          items:
            type: string
        withoutTenantId:
          type: boolean
          description: "Only include tasks which belong to no tenant. Value may only\
            \ be `true`, \nas `false` is the default behavior."
          nullable: true
          default: false
        assignee:
          type: string
          description: Restrict to tasks that the given user is assigned to.
        assigneeExpression:
          type: string
          description: "Restrict to tasks that the user described by the given expression\
            \ is assigned to. See the\n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
        assigneeLike:
          type: string
          description: "Restrict to tasks that have an assignee that has the parameter\
            \ \nvalue as a substring."
        assigneeLikeExpression:
          type: string
          description: "Restrict to tasks that have an assignee that has the parameter\
            \ value described by the \ngiven expression as a substring. See the \n\
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
        assigneeIn:
          type: array
          description: Only include tasks which are assigned to one of the passed
            and comma-separated user ids.
          items:
            type: string
        owner:
          type: string
          description: Restrict to tasks that the given user owns.
        ownerExpression:
          type: string
          description: "Restrict to tasks that the user described by the given expression\
            \ owns. See the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
        candidateGroup:
          type: string
          description: Only include tasks that are offered to the given group.
        candidateGroupExpression:
          type: string
          description: "Only include tasks that are offered to the group described\
            \ by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
        candidateUser:
          type: string
          description: Only include tasks that are offered to the given user or to
            one of his groups.
        candidateUserExpression:
          type: string
          description: "Only include tasks that are offered to the user described\
            \ by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)\
            \ \nfor more information on available functions."
        includeAssignedTasks:
          type: boolean
          description: "Also include tasks that are assigned to users in candidate\
            \ queries. Default is to only \ninclude tasks that are not assigned to\
            \ any user if you query by candidate user or\ngroup(s)."
          nullable: true
          default: false
        involvedUser:
          type: string
          description: "Only include tasks that the given user is involved in. A user\
            \ is involved in a task if \nan identity link exists between task and\
            \ user (e.g., the user is the assignee)."
        involvedUserExpression:
          type: string
          description: |-
            Only include tasks that the user described by the given expression is involved in.
            A user is involved in a task if an identity link exists between task and user
            (e.g., the user is the assignee). See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions.
        assigned:
          type: boolean
          description: If set to `true`, restricts the query to all tasks that are
            assigned.
          nullable: true
          default: false
        unassigned:
          type: boolean
          description: If set to `true`, restricts the query to all tasks that are
            unassigned.
          nullable: true
          default: false
        taskDefinitionKey:
          type: string
          description: Restrict to tasks that have the given key.
        taskDefinitionKeyIn:
          type: array
          description: Restrict to tasks that have one of the given keys. The keys
            need to be in a comma-separated list.
          items:
            type: string
        taskDefinitionKeyLike:
          type: string
          description: Restrict to tasks that have a key that has the parameter value
            as a substring.
        name:
          type: string
          description: Restrict to tasks that have the given name.
        nameNotEqual:
          type: string
          description: Restrict to tasks that do not have the given name.
        nameLike:
          type: string
          description: Restrict to tasks that have a name with the given parameter
            value as substring.
        nameNotLike:
          type: string
          description: |-
            Restrict to tasks that do not have a name with the given parameter
            value as substring.
        description:
          type: string
          description: Restrict to tasks that have the given description.
        descriptionLike:
          type: string
          description: |-
            Restrict to tasks that have a description that has the parameter
            value as a substring.
        priority:
          type: integer
          description: Restrict to tasks that have the given priority.
          format: int32
          nullable: true
        maxPriority:
          type: integer
          description: Restrict to tasks that have a lower or equal priority.
          format: int32
          nullable: true
        minPriority:
          type: integer
          description: Restrict to tasks that have a higher or equal priority.
          format: int32
          nullable: true
        dueDate:
          type: string
          description: |-
            Restrict to tasks that are due on the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format
            `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
          format: date-time
          nullable: true
        dueDateExpression:
          type: string
          description: |-
            Restrict to tasks that are due on the date described by the given expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        dueAfter:
          type: string
          description: |-
            Restrict to tasks that are due after the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
          format: date-time
          nullable: true
        dueAfterExpression:
          type: string
          description: |-
            Restrict to tasks that are due after the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        dueBefore:
          type: string
          description: |-
            Restrict to tasks that are due before the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
          format: date-time
          nullable: true
        dueBeforeExpression:
          type: string
          description: |-
            Restrict to tasks that are due before the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        followUpDate:
          type: string
          description: |-
            Restrict to tasks that have a followUp date on the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date
            must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
          format: date-time
          nullable: true
        followUpDateExpression:
          type: string
          description: |-
            Restrict to tasks that have a followUp date on the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        followUpAfter:
          type: string
          description: |-
            Restrict to tasks that have a followUp date after the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
          format: date-time
          nullable: true
        followUpAfterExpression:
          type: string
          description: |-
            Restrict to tasks that have a followUp date after the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        followUpBefore:
          type: string
          description: |-
            Restrict to tasks that have a followUp date before the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
        followUpBeforeExpression:
          type: string
          description: |-
            Restrict to tasks that have a followUp date before the date described by the given
            expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        followUpBeforeOrNotExistent:
          type: string
          description: |-
            Restrict to tasks that have no followUp date or a followUp date before the given date.
            By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case
            is to query all `active` tasks for a user for a given date.
          format: date-time
          nullable: true
        followUpBeforeOrNotExistentExpression:
          type: string
          description: |-
            Restrict to tasks that have no followUp date or a followUp date before the date
            described by the given expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        createdOn:
          type: string
          description: |-
            Restrict to tasks that were created on the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have
            the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
          format: date-time
          nullable: true
        createdOnExpression:
          type: string
          description: |-
            Restrict to tasks that were created on the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        createdAfter:
          type: string
          description: |-
            Restrict to tasks that were created after the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must
            have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
          format: date-time
          nullable: true
        createdAfterExpression:
          type: string
          description: |-
            Restrict to tasks that were created after the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        createdBefore:
          type: string
          description: |-
            Restrict to tasks that were created before the given date. By
            [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must
            have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
          format: date-time
          nullable: true
        createdBeforeExpression:
          type: string
          description: |-
            Restrict to tasks that were created before the date described by the given expression.
            See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to a
            `java.util.Date` or `org.joda.time.DateTime` object.
        delegationState:
          type: string
          description: |-
            Restrict to tasks that are in the given delegation state. Valid values are
            `PENDING` and `RESOLVED`.
          enum:
          - PENDING
          - RESOLVED
        candidateGroups:
          type: array
          description: |-
            Restrict to tasks that are offered to any of the given candidate groups. Takes a
            comma-separated list of group names, so for example
            `developers,support,sales`.
          items:
            type: string
        candidateGroupsExpression:
          type: string
          description: |-
            Restrict to tasks that are offered to any of the candidate groups described by the
            given expression. See the
            [user guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/expression-language/#internal-context-functions)
            for more information on available functions. The expression must evaluate to
            `java.util.List` of Strings.
        withCandidateGroups:
          type: boolean
          description: |-
            Only include tasks which have a candidate group. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          default: false
        withoutCandidateGroups:
          type: boolean
          description: |-
            Only include tasks which have no candidate group. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          default: false
        withCandidateUsers:
          type: boolean
          description: |-
            Only include tasks which have a candidate user. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          default: false
        withoutCandidateUsers:
          type: boolean
          description: |-
            Only include tasks which have no candidate users. Value may only be `true`,
            as `false` is the default behavior.
          nullable: true
          default: false
        active:
          type: boolean
          description: |-
            Only include active tasks. Value may only be `true`, as `false`
            is the default behavior.
          nullable: true
          default: false
        suspended:
          type: boolean
          description: |-
            Only include suspended tasks. Value may only be `true`, as
            `false` is the default behavior.
          nullable: true
          default: false
        taskVariables:
          type: array
          description: |-
            A JSON array to only include tasks that have variables with certain values. The
            array consists of JSON objects with three properties `name`, `operator` and `value`.
            `name` is the variable name, `operator` is the comparison operator to be used and
            `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.

            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`.
            `key` and `value` may not contain underscore or comma characters.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
        processVariables:
          type: array
          description: |-
            A JSON array to only include tasks that belong to a process instance with variables
            with certain values. The array consists of JSON objects with three properties
            `name`, `operator` and `value`. `name` is the variable name, `operator` is the
            comparison operator to be used and `value` the variable value. `value` may be of
            type `String`, `Number` or `Boolean`.

            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`.
            `key` and `value` may not contain underscore or comma characters.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
        caseInstanceVariables:
          type: array
          description: |-
            A JSON array to only include tasks that belong to a case instance with variables
            with certain values. The array consists of JSON objects with three properties
            `name`, `operator` and `value`. `name` is the variable name, `operator` is the
            comparison operator to be used and `value` the variable value. `value` may be of
            type `String`, `Number` or `Boolean`.

            Valid `operator` values are:
            `eq` - equal to;
            `neq` - not equal to;
            `gt` - greater than;
            `gteq` - greater than or equal to;
            `lt` - lower than;
            `lteq` - lower than or equal to;
            `like`.
            `key` and `value` may not contain underscore or comma characters.
          items:
            $ref: '#/components/schemas/VariableQueryParameterDto'
        variableNamesIgnoreCase:
          type: boolean
          description: |-
            Match all variable names in this query case-insensitively. If set
            `variableName` and `variablename` are treated as equal.
          nullable: true
          default: false
        variableValuesIgnoreCase:
          type: boolean
          description: |-
            Match all variable values in this query case-insensitively. If set
            `variableValue` and `variablevalue` are treated as equal.
          nullable: true
          default: false
        parentTaskId:
          type: string
          description: Restrict query to all tasks that are sub tasks of the given
            task. Takes a task id.
        orQueries:
          type: array
          description: |-
            A JSON array of nested task queries with OR semantics. A task matches a nested query if it fulfills
            *at least one* of the query's predicates. With multiple nested queries, a task must fulfill at least one predicate of *each* query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).

            All task query properties can be used except for: `sorting`, `withCandidateGroups`,
            `withoutCandidateGroups`, `withCandidateUsers`, `withoutCandidateUsers`

            See the [User guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries)
            for more information about OR queries.
          items:
            $ref: '#/components/schemas/TaskQueryDto'
        sorting:
          type: array
          description: Apply sorting of the result
          items:
            $ref: '#/components/schemas/TaskQueryDto_sorting'
      description: A Task query which defines a group of Tasks.
    TelemetryConfigurationDto:
      type: object
      properties:
        enableTelemetry:
          type: boolean
          description: Specifies if the telemetry data should be sent or not.
          nullable: true
      example:
        enableTelemetry: true
    TransitionInstanceDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the transition instance.
        parentActivityInstanceId:
          type: string
          description: The id of the parent activity instance, for example a sub process
            instance.
        activityId:
          type: string
          description: The id of the activity that this instance enters (asyncBefore
            job) or leaves (asyncAfter job)
        activityName:
          type: string
          description: The name of the activity that this instance enters (asyncBefore
            job) or leaves (asyncAfter job)
        activityType:
          type: string
          description: The type of the activity that this instance enters (asyncBefore
            job) or leaves (asyncAfter job)
        processInstanceId:
          type: string
          description: The id of the process instance this instance is part of.
        processDefinitionId:
          type: string
          description: The id of the process definition.
        executionId:
          type: string
          description: The execution id.
        incidentIds:
          type: array
          description: A list of incident ids.
          items:
            type: string
        incidents:
          type: array
          description: |-
            A list of JSON objects containing incident specific properties:
            * `id`: the id of the incident
            * `activityId`: the activity id in which the incident occurred
          items:
            $ref: '#/components/schemas/ActivityInstanceIncidentDto'
      description: A JSON object corresponding to the Activity Instance tree of the
        given process instance.
      example:
        activityId: activityId
        processInstanceId: processInstanceId
        processDefinitionId: processDefinitionId
        executionId: executionId
        activityName: activityName
        incidents:
        - id: id
          parentActivityInstanceId: parentActivityInstanceId
        - id: id
          parentActivityInstanceId: parentActivityInstanceId
        id: id
        activityType: activityType
        incidentIds:
        - incidentIds
        - incidentIds
        parentActivityInstanceId: parentActivityInstanceId
    TriggerVariableValueDto:
      allOf:
      - type: object
        properties:
          local:
            type: boolean
            description: |-
              Indicates whether the variable should be a local variable or not.
              If set to true, the variable becomes a local variable of the execution
              entering the target activity.
            nullable: true
      - $ref: '#/components/schemas/VariableValueDto'
    UserCredentialsDto:
      type: object
      properties:
        password:
          type: string
          description: The users new password.
        authenticatedUserPassword:
          type: string
          description: |-
            The password of the authenticated user who changes the password of the user
            (i.e., the user with passed id as path parameter).
    UserDto:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserProfileDto'
        credentials:
          $ref: '#/components/schemas/UserCredentialsDto'
    UserIdDto:
      type: object
      properties:
        userId:
          type: string
          description: The id of the user that the current action refers to.
    UserProfileDto:
      type: object
      properties:
        id:
          type: string
          description: The id of the user.
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The first name of the user.
        email:
          type: string
          description: The email of the user.
      example:
        firstName: firstName
        lastName: lastName
        id: id
        email: email
    VariableQueryParameterDto:
      type: object
      properties:
        name:
          type: string
          description: Variable name
        operator:
          type: string
          description: Comparison operator to be used
          enum:
          - eq
          - neq
          - gt
          - gteq
          - lt
          - lteq
          - like
        value:
          type: object
          description: The variable value, could be of type boolean, string or number
    VariableValueDto:
      type: object
      properties:
        value:
          type: object
          description: The variable's value. Value differs depending on the variable's
            type and on the deserializeValues parameter.
        type:
          type: string
          description: The value type of the variable.
        valueInfo:
          type: object
          additionalProperties: true
          description: |-
            A JSON object containing additional, value-type-dependent properties.
            For serialized variables of type Object, the following properties can be provided:

            * `objectTypeName`: A string representation of the object's type name.
            * `serializationDataFormat`: The serialization format used to store the variable.

            For serialized variables of type File, the following properties can be provided:

            * `filename`: The name of the file. This is not the variable name but the name that will be used when downloading the file again.
            * `mimetype`: The MIME type of the file that is being uploaded.
            * `encoding`: The encoding of the file that is being uploaded.
      example:
        valueInfo: ""
        type: type
        value: {}
    VersionDto:
      type: object
      properties:
        version:
          type: string
          description: The version of the Rest API.
      example:
        version: version
    EventSubscriptionQueryDto_sorting:
      type: object
      properties:
        sortBy:
          type: string
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - created
          - tenantId
        sortOrder:
          type: string
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
    ExternalTaskQueryDto_sorting:
      type: object
      properties:
        sortBy:
          type: string
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - id
          - lockExpirationTime
          - processInstanceId
          - processDefinitionId
          - processDefinitionKey
          - taskPriority
          - tenantId
        sortOrder:
          type: string
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
    HistoricActivityInstanceQueryDto_sorting:
      type: object
      properties:
        sortBy:
          type: string
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - activityInstanceId
          - instanceId
          - executionId
          - activityId
          - activityName
          - activityType
          - startTime
          - endTime
          - duration
          - definitionId
          - occurrence
          - tenantId
        sortOrder:
          type: string
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
    HistoricProcessInstanceQueryDto_sorting:
      type: object
      properties:
        sortBy:
          type: string
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - instanceId
          - definitionId
          - definitionKey
          - definitionName
          - definitionVersion
          - businessKey
          - startTime
          - endTime
          - duration
          - tenantId
        sortOrder:
          type: string
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
    ProcessInstanceQueryDto_sorting:
      type: object
      properties:
        sortBy:
          type: string
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - instanceId
          - definitionId
          - definitionKey
          - businessKey
          - tenantId
        sortOrder:
          type: string
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
    SchemaLogQueryDto_sorting:
      type: object
      properties:
        sortBy:
          type: string
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - timestamp
        sortOrder:
          type: string
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
    TaskQueryDto_sorting:
      type: object
      properties:
        sortBy:
          type: string
          description: |-
            Sort the results lexicographically by a given criterion.
            Must be used in conjunction with the sortOrder parameter.
          enum:
          - instanceId
          - caseInstanceId
          - dueDate
          - executionId
          - caseExecutionId
          - assignee
          - created
          - description
          - id
          - name
          - nameCaseInsensitive
          - priority
          - processVariable
          - executionVariable
          - taskVariable
          - caseExecutionVariable
          - caseInstanceVariable
        sortOrder:
          type: string
          description: |-
            Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
            descending order. Must be used in conjunction with the sortBy parameter.
          enum:
          - asc
          - desc
        parameters:
          $ref: '#/components/schemas/SortTaskQueryParametersDto'
